<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/12/14/vcf2PCA/"/>
      <url>/2020/12/14/vcf2PCA/</url>
      
        <content type="html"><![CDATA[<ol><li>合并单个vcf样本为merged vcd</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls *vcf | while read line; do bgzip -c $&#123;line&#125; &gt; $&#123;line&#125;.gz; tabix $&#123;line&#125;.gz; done</span><br><span class="line"></span><br><span class="line">bcftools merge *gz -o 95.merged.vcf</span><br></pre></td></tr></table></figure><ol start="2"><li>使用beagle填补空缺的基因型</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx64g -jar ~/software/beagle.18May20.d20.jar gt=95.merged.vcf  out=95.merged.beagle.vcf impute=true</span><br></pre></td></tr></table></figure><ol start="3"><li>使用plink计算pca所需要的协方差矩阵</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"><span class="keyword">library</span>(ggsci)</span><br><span class="line"><span class="keyword">library</span>(ggplot2)</span><br><span class="line">pca &lt;- read_table2(<span class="string">"pca.eigenvec"</span>, col_names = <span class="literal">FALSE</span>)</span><br><span class="line">eigenval &lt;- scan(<span class="string">"pca.eigenval"</span>)</span><br><span class="line"><span class="comment"># remove nuisance column</span></span><br><span class="line">pca &lt;- pca[,-<span class="number">1</span>]</span><br><span class="line">names(pca)[<span class="number">1</span>] &lt;- <span class="string">"ind"</span></span><br><span class="line">names(pca)[<span class="number">2</span>:ncol(pca)] &lt;- paste0(<span class="string">"PC"</span>, <span class="number">1</span>:(ncol(pca)-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">sample &lt;- rep(<span class="literal">NA</span>, length(pca$ind))</span><br><span class="line">sample[grep(<span class="string">"HGDP00"</span>, pca$ind)] &lt;- <span class="string">"Japanese"</span></span><br><span class="line">sample[grep(<span class="string">"HGDP01"</span>, pca$ind)] &lt;- <span class="string">"NorthernHan"</span></span><br><span class="line">sample[grep(<span class="string">"HG00"</span>, pca$ind)] &lt;- <span class="string">"SouthernHan"</span></span><br><span class="line"></span><br><span class="line">b &lt;- ggplot(pca, aes(PC1, PC2, col = sample)) + geom_point(size = <span class="number">3</span>)+</span><br><span class="line">    scale_color_npg()+</span><br><span class="line">    coord_equal() + </span><br><span class="line">    theme_light()+</span><br><span class="line">    xlab(paste0(<span class="string">"PC1 ("</span>, signif(pve$pve[<span class="number">1</span>], <span class="number">3</span>), <span class="string">"%)"</span>)) + </span><br><span class="line">    ylab(paste0(<span class="string">"PC2 ("</span>, signif(pve$pve[<span class="number">2</span>], <span class="number">3</span>), <span class="string">"%)"</span>)) +</span><br><span class="line">    theme(legend.title = element_text(colour=<span class="string">"black"</span>,size = <span class="number">16</span>))+</span><br><span class="line">    theme(legend.text  = element_text(colour=<span class="string">"black"</span>,size = <span class="number">12</span>))+</span><br><span class="line">  labs(fill = <span class="string">"Sample"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>主要记录千人基因组数据分析</title>
      <link href="/2020/12/08/1K_genome/"/>
      <url>/2020/12/08/1K_genome/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1."></a>Part 1.</h3><h4 id="数据下载"><a href="#数据下载" class="headerlink" title="数据下载"></a>数据下载</h4><blockquote><p>感觉再做一些可以去迅雷入职了</p></blockquote><p>首先下载alignment的list   </p><p>eg. igsr_Northern\ Han\ in\ China\ (HGDP)_undefined.tsv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 0.提取第一列保存为1_ftp_sites</span><br><span class="line">awk '&#123;print $1&#125;' igsr_Northern\ Han\ in\ China\ \(HGDP\)_undefined.tsv.tsv</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1.因为使用ascp下载 所以只需要数据在ebi数据库中的位置就可以，保存为2_temp_id</span><br><span class="line">awk -F 'uk/' '&#123;print $2&#125;' 1_ftp_sites &gt; 2_temp_id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.使用echo生成命令，并记录在3_run，方便以后查看哪里错了</span><br><span class="line">less 2_temp_id | while read line; </span><br><span class="line">do </span><br><span class="line">echo "ascp  -v -k 1 -l 200m -i \</span><br><span class="line">/Users/Yi-Liangwei/Applications/Aspera\ Connect.app/Contents/Resources/asperaweb_id_dsa.openssh \</span><br><span class="line">-Tr -Q -P33001 -L- fasp-g1k@fasp.1000genomes.ebi.ac.uk:"$&#123;line&#125; .; </span><br><span class="line">done &gt; 3_run </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3.下 载</span><br><span class="line">nohup sh 3_run</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4.对于下载完成的cram文件 执行call snp环节</span><br><span class="line"><span class="meta">#</span> 在所有操作之前，如果没有下载基因组的索引文件</span><br><span class="line"><span class="meta">#</span> 可以使用下面两个命令生成</span><br><span class="line">samtools faidx Homo_sapiens_assembly38.fasta </span><br><span class="line"></span><br><span class="line">java -Xmx2g -jar ~/software/picard.jar CreateSequenceDictionary R=Homo_sapiens_assembly38.fasta O=Homo_sapiens_assembly38.dict</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 然后还需要准备三个文件，第一个是bam文件的prefix（CHS.info），第二个是rs位点的染色体和位置，</span><br><span class="line"><span class="meta">#</span> 第三个是根据第二个文件生成的bed文件rs_id.bed</span><br><span class="line"><span class="meta">#</span> 格式如下  CHS.info eg.</span><br><span class="line">HG00597</span><br><span class="line">HG00591</span><br><span class="line">HG00609</span><br><span class="line"><span class="meta">#</span> rs_id eg.</span><br><span class="line">rs12044597      1       1708801</span><br><span class="line">rs11185092      1       107886278</span><br><span class="line">rs10923724      1       119546842</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> rs_id.bed用下面的命令生成</span><br><span class="line">awk -v OFS='\t' '&#123;print "chr"$2,$3-1,$3+1,$1&#125;' rs_id   &gt; rs_id.bed</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5.cram格式转bam格式去call snp</span><br><span class="line">less CHS.info | while read line; do </span><br><span class="line">samtools view  -T /data/gujiaqi/698_download/Homo_sapiens_assembly38.fasta $&#123;line&#125;.final.cram  -L rs_id.bed -M -b -o $&#123;line&#125;.m.1.bam; done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 6.call snp and parse vcf file</span><br><span class="line"><span class="meta">#</span> 这时候还需要生成一个只包含rs编号的文件，两次的输入文件不一样的</span><br><span class="line">python bam2vcf.py -p CHS.info -rs rs_id</span><br><span class="line">python parse_vcf.py -p CHS.info -rs rs_number</span><br><span class="line"><span class="meta">#</span> 所有结果会写在rs.genotype 和 rs.frequency中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使用的call snp软件为bcftools，如果时间不紧的话可以用GATK，将bcftools那一行改成</span><br><span class="line"><span class="meta">#</span> java -XX:+UseParallelGC -XX:ParallelGCThreads=8 -Xmx10g -jar \</span><br><span class="line">~/software/GenomeAnalysisTK.jar -T HaplotypeCaller --genotyping_mode DISCOVERY -A \</span><br><span class="line">AlleleBalanceBySample -A DepthPerAlleleBySample -A DepthPerSampleHC \</span><br><span class="line">-A InbreedingCoeff -A MappingQualityZeroBySample -A StrandBiasBySample\</span><br><span class="line">-A Coverage -A FisherStrand -A HaplotypeScore -A MappingQualityRankSumTest \</span><br><span class="line">-A MappingQualityZero -A QualByDepth -A RMSMappingQuality -A ReadPosRankSumTest \</span><br><span class="line">-A VariantType -l INFO --emitRefConfidence GVCF \</span><br><span class="line">-rf BadCigar --variant_index_parameter 128000 --variant_index_type LINEAR \</span><br><span class="line">-R /data/gujiaqi/698_download/Homo_sapiens_assembly38.fasta -I HG00597.merged.bam\</span><br><span class="line">-o HG00597.merged.gatk.gvcf</span><br></pre></td></tr></table></figure><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2."></a>Part 2.</h3><h5 id="对vcf进行计算前还需要准备一下"><a href="#对vcf进行计算前还需要准备一下" class="headerlink" title="对vcf进行计算前还需要准备一下"></a>对vcf进行计算前还需要准备一下</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对filtered出来的vcf文件压缩并索引</span></span><br><span class="line">ls *vcf | <span class="keyword">while</span> read line; <span class="keyword">do</span> bgzip $&#123;line&#125; -@ <span class="number">8</span>;tabix $&#123;line&#125;.gz; done</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并为一个文件，这一步如果直接合并所有的话，顺序默认按照文件夹内从小到大的顺序</span></span><br><span class="line"><span class="comment"># 后续会再rehead，当然也可以一个Group一个Group的合并，然后再把合并的合并</span></span><br><span class="line">bcftools merge *gz -O z -o <span class="number">698</span>_HGDP.<span class="number">1185</span>.vcf.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看vcf是否包含1185个位点</span></span><br><span class="line">less <span class="number">698</span>_HGDP.<span class="number">1185</span>.vcf.gz | awk <span class="string">'&#123;if ($0 !~ "#")print&#125;'</span> | wc -l</span><br><span class="line"><span class="comment"># 或者可以直接用plink把rs号给提取出来，结果会保存在 -o 指定的 rs_check.snplist中</span></span><br><span class="line"><span class="comment"># 再根据rs_check.snplist 和之前的rs_id看一下就可以了</span></span><br><span class="line">plink --write-snplist -vcf <span class="number">698</span>_HGDP.<span class="number">1185</span>.vcf.gz -out rs_check</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用excel做一个all_sample.info 就把之前那些.info文件和在一起</span></span><br><span class="line"><span class="comment"># all_sample.info 内容如下</span></span><br><span class="line"><span class="comment"># HG00709SouthernHan698dataset698dataset_SouthernHan_HG00709</span></span><br><span class="line"><span class="comment"># HGDP01296NorthernHanHGDPHGDP_NorthernHan_HGDP01296</span></span><br><span class="line"><span class="comment"># HGDP00828JapaneseHGDPHGDP_Japanese_HGDP00828</span></span><br><span class="line"><span class="comment"># HGDP00774Han in ChinaHGDPHGDP_Han in China_HGDP00774</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了下一步 reheader通过bcftools提取所有样本的id</span></span><br><span class="line">bcftools query -l <span class="number">698</span>_HGDP.<span class="number">1185</span>.vcf.gz ｜<span class="keyword">while</span> read line; <span class="keyword">do</span> grep $&#123;line&#125; all_sample.info ; done | awk -F <span class="string">'\t'</span> <span class="string">'&#123;print $4&#125;'</span> &gt; vcf.sample.reheader.list</span><br><span class="line">bcftools reheader <span class="number">698</span>_HGDP.<span class="number">1185</span>.vcf.gz -s vcf.sample.reheader.list -o <span class="number">698</span>_HGDP.<span class="number">1185</span>.reheader.vcf.gz</span><br></pre></td></tr></table></figure><h5 id="统计vcf文件中的sample和sites"><a href="#统计vcf文件中的sample和sites" class="headerlink" title="统计vcf文件中的sample和sites"></a>统计vcf文件中的sample和sites</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计vcf文件中的基本信息</span></span><br><span class="line"><span class="comment"># individual 的missing信息</span></span><br><span class="line">vcftools --gzvcf <span class="number">698</span>_HGDP.<span class="number">1185</span>.reheader.vcf.gz  --missing-indv  --out vcf_check</span><br><span class="line">vcftools --gzvcf <span class="number">698</span>_HGDP.<span class="number">1185</span>.reheader.vcf.gz  --missing-site --out vcf_check</span><br><span class="line">vcftools --gzvcf <span class="number">698</span>_HGDP.<span class="number">1185</span>.reheader.vcf.gz  --site-mean-depth  --out vcf_check</span><br><span class="line">vcftools --gzvcf <span class="number">698</span>_HGDP.<span class="number">1185</span>.reheader.vcf.gz  --site-quality --out vcf_check</span><br><span class="line">vcftools --gzvcf <span class="number">698</span>_HGDP.<span class="number">1185</span>.reheader.vcf.gz  --het --out vcf_check</span><br><span class="line"><span class="comment"># sites 的missing信息</span></span><br><span class="line"><span class="comment"># vcf_check.imiss vcf_check.lmiss vcf_check.ldepth.mean vcf_check.lqual  vcf_check.het</span></span><br><span class="line"><span class="comment"># 上面就是生成的结果</span></span><br><span class="line"><span class="comment"># awk '&#123;print $3&#125;' vcf_check.ldepth.mean | sort -g -r 可以看平均深度有位点depth的平均深度只有20左右</span></span><br><span class="line"><span class="comment"># awk -F '\t' '&#123;print $4&#125;'  vcf_check.imiss | sort | uniq -c 可以看多少样本有缺失位点，有30个样本都是有缺失的，但是最多也就只缺两个位点</span></span><br><span class="line"><span class="comment"># awk -F '\t' '&#123;print $5&#125;'  vcf_check.lmiss | sort | uniq -c 可以看每个位点有多少个缺失，有两个位点有10个样本以上的缺失</span></span><br><span class="line"><span class="comment"># 需要注意的是 vcf_check.lmiss 中会默认我们的物种是二倍体，所以Number of DATA的数量是sample*2 </span></span><br><span class="line"><span class="comment"># 同理在这个文件中的missing sites都会变为 2 倍</span></span><br></pre></td></tr></table></figure><h4 id="使用beagle填充缺失的基因型"><a href="#使用beagle填充缺失的基因型" class="headerlink" title="使用beagle填充缺失的基因型"></a>使用beagle填充缺失的基因型</h4><a id="more"></a> <p>##### </p><p>具体使用的python脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bam2vcf.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ap = argparse.ArgumentParser()</span><br><span class="line">ap.add_argument(<span class="string">"-p"</span>, <span class="string">"--prefix"</span>, required=<span class="literal">True</span>,</span><br><span class="line">help=<span class="string">"the list of prefix of all sample"</span>)</span><br><span class="line">ap.add_argument(<span class="string">"-rs"</span>, <span class="string">"--rsid"</span>, required=<span class="literal">True</span>,</span><br><span class="line">help=<span class="string">"the postion of each rs id, eg. chr1:100-101"</span>)</span><br><span class="line">args = vars(ap.parse_args())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Start : &#123;&#125;"</span> ).format(time.ctime()) </span><br><span class="line">bam_file = []</span><br><span class="line">rs_check = []</span><br><span class="line">rs_id = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(args[<span class="string">'rsid'</span>]) <span class="keyword">as</span> rs:</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rs:</span><br><span class="line">        lst1 = row.split(<span class="string">'\t'</span>)</span><br><span class="line">        good = <span class="string">'chr'</span>+str(lst1[<span class="number">1</span>])+<span class="string">'vs'</span>+str(lst1[<span class="number">2</span>].rstrip())</span><br><span class="line">        rs_check.append(good)</span><br><span class="line">        rs_id[good] = lst1[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(args[<span class="string">"prefix"</span>]) <span class="keyword">as</span> input_bam_file_prefix:</span><br><span class="line">    <span class="keyword">for</span> prefix <span class="keyword">in</span> input_bam_file_prefix:</span><br><span class="line">        prefix =prefix.rstrip()</span><br><span class="line">        new_dir = <span class="string">'mkdir &#123;&#125;'</span>.format(prefix)</span><br><span class="line">        subprocess.call(new_dir, shell = <span class="literal">True</span>)</span><br><span class="line">        merge_bam = <span class="string">'samtools merge -@ 16 &#123;&#125;/&#123;&#125;.merged.bam &#123;&#125;.*.bam'</span>.format(prefix,prefix,prefix)</span><br><span class="line">        subprocess.call(merge_bam, shell = <span class="literal">True</span>)</span><br><span class="line">        bam2vcf =  <span class="string">'bcftools mpileup -a AD,DP,SP &#123;&#125;/&#123;&#125;.merged.bam -f /data/gujiaqi/698_download/Homo_sapiens_assembly38.fasta | bcftools call -f GQ,GP -mO v -o &#123;&#125;/&#123;&#125;.merged.vcf'</span>.format(prefix,prefix,prefix,prefix)</span><br><span class="line">        subprocess.call(bam2vcf, shell = <span class="literal">True</span>)</span><br><span class="line">        f = open(<span class="string">'&#123;&#125;.filtered.vcf'</span>.format(prefix),<span class="string">'w'</span>)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'&#123;&#125;/&#123;&#125;.merged.vcf'</span>.format(prefix,prefix)) <span class="keyword">as</span> current_vcf_file:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> current_vcf_file:</span><br><span class="line">                <span class="comment"># wrtie filtered vcf</span></span><br><span class="line">                <span class="keyword">if</span> row.startswith(<span class="string">'#'</span>):</span><br><span class="line">                    f.write(row)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lst1 = row.split(<span class="string">'\t'</span>)</span><br><span class="line">                    good = lst1[<span class="number">0</span>]+<span class="string">'vs'</span>+lst1[<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">if</span> good <span class="keyword">in</span> rs_check:</span><br><span class="line">                        lst1[<span class="number">2</span>] = rs_id[good]</span><br><span class="line">                        f.write(<span class="string">"\t"</span>.join(lst1))</span><br><span class="line">f.close()   </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"END : &#123;&#125;"</span> ).format(time.ctime())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### parse_vcf.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line">DP4_find = re.compile(<span class="string">r'DP4=(.*?);'</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">ap = argparse.ArgumentParser()</span><br><span class="line">ap.add_argument(<span class="string">"-p"</span>, <span class="string">"--prefix"</span>, required=<span class="literal">True</span>,</span><br><span class="line">    help=<span class="string">"the list of prefix of all sample"</span>)</span><br><span class="line">ap.add_argument(<span class="string">"-rs"</span>, <span class="string">"--rsid"</span>, required=<span class="literal">True</span>,</span><br><span class="line">    help=<span class="string">"the postion of each rs id, eg. chr1:100-101"</span>)</span><br><span class="line">args = vars(ap.parse_args())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Start : &#123;&#125;"</span> ).format(time.ctime()) </span><br><span class="line"></span><br><span class="line">f1 = open(<span class="string">'rs.frequency'</span>,<span class="string">'w'</span>)</span><br><span class="line">f2 = open(<span class="string">'rs.genotype'</span>,<span class="string">'w'</span>)</span><br><span class="line">sample = []</span><br><span class="line">rs_id = [<span class="string">'Sample'</span>]</span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">d = <span class="number">1</span></span><br><span class="line"><span class="keyword">with</span> open(args[<span class="string">"rsid"</span>]) <span class="keyword">as</span> input_rs:</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> input_rs:</span><br><span class="line">        c += <span class="number">1</span></span><br><span class="line">        row =row.strip()</span><br><span class="line">        rs_id.append(row)</span><br><span class="line">        sample.append(row)</span><br><span class="line">f1.write(<span class="string">'\t'</span>.join(rs_id))</span><br><span class="line">f2.write(<span class="string">'\t'</span>.join(rs_id))</span><br><span class="line"><span class="keyword">with</span> open(args[<span class="string">'prefix'</span>]) <span class="keyword">as</span> input_prefix_file:</span><br><span class="line">    <span class="keyword">for</span> lines <span class="keyword">in</span> input_prefix_file:</span><br><span class="line">        lines = lines.strip()</span><br><span class="line">        freq_out = []</span><br><span class="line">        gt_out = []</span><br><span class="line">        GT_rs = &#123;&#125;</span><br><span class="line">        freq_rs = &#123;&#125;</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"&#123;&#125;.filtered.vcf"</span>.format(lines)) <span class="keyword">as</span> input_vcf_file:</span><br><span class="line">            freq_out.append(lines)</span><br><span class="line">            gt_out.append(lines)</span><br><span class="line">            rs_id2 = []</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> input_vcf_file:</span><br><span class="line">                <span class="keyword">if</span> row.startswith(<span class="string">'chr'</span>):</span><br><span class="line">                    lst1 = row.split(<span class="string">'\t'</span>)</span><br><span class="line">                    rs_id2.append(lst1[<span class="number">2</span>])</span><br><span class="line">                    DP4 = re.findall(DP4_find,lst1[<span class="number">7</span>])[<span class="number">0</span>]</span><br><span class="line">                    lst2 = DP4.split(<span class="string">','</span>)</span><br><span class="line">                    ref = int(lst2[<span class="number">0</span>]) + int(lst2[<span class="number">1</span>])</span><br><span class="line">                    alt = int(lst2[<span class="number">2</span>]) + int(lst2[<span class="number">3</span>])</span><br><span class="line">                    <span class="keyword">if</span> lst1[<span class="number">4</span>] == <span class="string">'.'</span>:</span><br><span class="line">                        freq_rs[lst1[<span class="number">2</span>]] = str(<span class="string">"&#123;&#125;:&#123;&#125;/0"</span>.format(lst1[<span class="number">3</span>],str(ref+alt)))</span><br><span class="line">                    <span class="keyword">elif</span> <span class="string">','</span> <span class="keyword">in</span> lst1[<span class="number">4</span>]:</span><br><span class="line">                        freq_rs[lst1[<span class="number">2</span>]] = str(<span class="string">"&#123;&#125;/&#123;&#125;/&#123;&#125;:&#123;&#125;/&#123;&#125;/&#123;&#125;"</span>.format(lst1[<span class="number">3</span>],lst1[<span class="number">4</span>].split(<span class="string">','</span>)[<span class="number">0</span>],lst1[<span class="number">4</span>].split(<span class="string">','</span>)[<span class="number">1</span>],lst1[<span class="number">9</span>].split(<span class="string">':'</span>)[<span class="number">4</span>].split(<span class="string">','</span>)[<span class="number">0</span>],lst1[<span class="number">9</span>].split(<span class="string">':'</span>)[<span class="number">4</span>].split(<span class="string">','</span>)[<span class="number">1</span>],lst1[<span class="number">9</span>].split(<span class="string">':'</span>)[<span class="number">4</span>].split(<span class="string">','</span>)[<span class="number">2</span>]))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        freq_rs[lst1[<span class="number">2</span>]] = str(<span class="string">"&#123;&#125;/&#123;&#125;:&#123;&#125;/&#123;&#125;"</span>.format(lst1[<span class="number">3</span>],lst1[<span class="number">4</span>],ref,alt))</span><br><span class="line">                    <span class="comment"># write GT</span></span><br><span class="line">                    GT_type = lst1[<span class="number">9</span>][<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">                    <span class="keyword">if</span> GT_type == <span class="string">'0/0'</span>:</span><br><span class="line">                        GT_rs[lst1[<span class="number">2</span>]] = str(lst1[<span class="number">3</span>])+<span class="string">"/"</span>+str(lst1[<span class="number">3</span>])</span><br><span class="line">                    <span class="keyword">elif</span> GT_type == <span class="string">'0/1'</span>:</span><br><span class="line">                        GT_rs[lst1[<span class="number">2</span>]] = str(lst1[<span class="number">3</span>])+<span class="string">"/"</span>+str(lst1[<span class="number">4</span>])</span><br><span class="line">                    <span class="keyword">elif</span> GT_type == <span class="string">'1/1'</span>:</span><br><span class="line">                        GT_rs[lst1[<span class="number">2</span>]] = str(lst1[<span class="number">4</span>])+<span class="string">"/"</span>+str(lst1[<span class="number">4</span>])</span><br><span class="line">                    <span class="keyword">elif</span> GT_type == <span class="string">'1/2'</span>:</span><br><span class="line">                        GT_rs[lst1[<span class="number">2</span>]] = str(lst1[<span class="number">3</span>])+<span class="string">"/"</span>+str(lst1[<span class="number">4</span>].replace(<span class="string">','</span>,<span class="string">'/'</span>))</span><br><span class="line">                    <span class="keyword">elif</span> GT_type == <span class="string">'./.'</span>:</span><br><span class="line">                        GT_rs[lst1[<span class="number">2</span>]] = <span class="string">'N'</span></span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sample:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> rs_id2:</span><br><span class="line">                freq_out.append(freq_rs[i])</span><br><span class="line">                gt_out.append(GT_rs[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                freq_out.append(<span class="string">"0/0"</span>)</span><br><span class="line">                gt_out.append(<span class="string">'N/N'</span>)</span><br><span class="line">        f1.write(<span class="string">'\n'</span>)</span><br><span class="line">        f1.write(<span class="string">'\t'</span>.join(freq_out))</span><br><span class="line">        f2.write(<span class="string">'\n'</span>)</span><br><span class="line">        f2.write(<span class="string">'\t'</span>.join(gt_out))</span><br><span class="line">        print(<span class="string">'&#123;&#125; DONE!'</span>.format(lines))</span><br><span class="line">f2.write(<span class="string">'\n'</span>)</span><br><span class="line">f1.write(<span class="string">'\n'</span>)</span><br><span class="line">f2.close()</span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># creat a head</span></span><br><span class="line">pattern = re.compile(<span class="string">'.&#123;1&#125;'</span>)</span><br><span class="line">head = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,c+<span class="number">1</span>):</span><br><span class="line">    stat = <span class="string">''</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'rs.genotype'</span>) <span class="keyword">as</span> input_gt:</span><br><span class="line">        next(input_gt)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> input_gt:</span><br><span class="line">            lst1 = row.split(<span class="string">'\t'</span>)</span><br><span class="line">            stat += lst1[i]</span><br><span class="line">    final = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> stat.count(<span class="string">'A'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">        final += <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">if</span> stat.count(<span class="string">'T'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">        final += <span class="string">'T'</span></span><br><span class="line">    <span class="keyword">if</span> stat.count(<span class="string">'C'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">        final += <span class="string">'C'</span></span><br><span class="line">    <span class="keyword">if</span> stat.count(<span class="string">'G'</span>) &gt; <span class="number">0</span>:</span><br><span class="line">        final += <span class="string">'G'</span></span><br><span class="line">    head += <span class="string">'\t'</span> + <span class="string">'/'</span>.join(pattern.findall(final))</span><br><span class="line">head += <span class="string">'\n'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'rs.genotype'</span>, <span class="string">'r+'</span>) <span class="keyword">as</span> f1, open(<span class="string">'rs.frequency'</span>, <span class="string">'r+'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    content = f1.read()        </span><br><span class="line">    f1.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    f1.write(head+content)</span><br><span class="line">    content = f2.read()        </span><br><span class="line">    f2.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    f2.write(head+content)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"END : &#123;&#125;"</span> ).format(time.ctime())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 1000 Genomes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>挂载硬盘至服务器</title>
      <link href="/2020/12/06/NTFS%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD/"/>
      <url>/2020/12/06/NTFS%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>挂载的意思就是。硬盘本身插在接口上是有一个物理位置的。位于 /dev 文件夹内</p><p>在dev文件夹中 sda sdb sdc 就代表了三个硬盘，/dev是不可以直接查看里面的内容的</p><p>我们平常访问他们里面的东西需要把他从/dev中挂载到一个方便的目录中。</p><p>比如windows系统里 /dev/sda1被挂载在C:     就是C盘</p><p>在linux中通常习惯为挂载在/mnt目录中</p><p>通常使用的硬盘格式有 NTFS exFAT   EXT？FAT..</p><p>现在买回来的硬盘通常为NTFS</p><p>但是linux自身并不支持NTFS格式的硬盘，但有相关工具ntfs-3g可以挂载ntfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount -t ntfs /dev/sdf /mnt/temp</span><br><span class="line">mount -t ntfs /dev/sdg /mnt/temp2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/07/02/mscanX/"/>
      <url>/2020/07/02/mscanX/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">blastp -query longest.nil.pep.fa -db nil.pep -max_target_seqs 5 -outfmt 6 -num_threads 10 -out nil.blast &amp;</span><br><span class="line">blastp -query longest.trifida.pep.fa -db trifida.pep -max_target_seqs 5 -outfmt 6 -num_threads 10 -out trifida.blast &amp;</span><br><span class="line">blastp -query longest.triloba.pep.fa -db triloba.pep -max_target_seqs 5 -outfmt 6 -num_threads 10 -out triloba.blast &amp;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">perl MCScanX-transposed.pl -x 6 -i data -t batatas -c trifida,triloba,nil,sly,Os,at -o result/batatas6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perl MCScanX-transposed.pl -x 5 -i data -t trifida -c triloba,nil,sly,Os,at -o result/trifida5</span><br><span class="line">perl MCScanX-transposed.pl -x 4 -i data -t triloba -c nil,sly,Os,at -o result/triloba4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perl MCScanX-transposed.pl -x 3 -i data -t nil -c sly,at,Os -o result/nil3</span><br><span class="line">perl MCScanX-transposed.pl -x 3 -i data -t trifida -c sly,at,Os -o result/trifida3</span><br><span class="line">perl MCScanX-transposed.pl -x 3 -i data -t triloba -c sly,at,Os -o result/triloba3</span><br><span class="line">perl MCScanX-transposed.pl  -x 3 -i data -t batatas -c sly,at,Os -o result/batatas3</span><br><span class="line">perl detect_dup_modes_for_a_family.pl -i ItbSPL.id -d result/triloba3/triloba -o triloba3.ItbSPL</span><br><span class="line">perl detect_dup_modes_for_a_family.pl -i ItfSPL.id -d result/trifida3/trifida -o trifida3.ItfSPL</span><br><span class="line">perl detect_dup_modes_for_a_family.pl -i InilSPL.id -d result/nil3/nil -o nil3.InilSPL</span><br><span class="line">perl detect_dup_modes_for_a_family.pl -i IbSPL.id -d result/batatas3/batatas -o batatas3.IbSPL</span><br><span class="line">ls *SPL | while read line; do python rep.py SPL.replace.id $&#123;line&#125; &gt; $&#123;line&#125;.rename; done</span><br><span class="line">java annotate_tree_with_dup_modes -t InilSPL.nwk  -s nil3.InilSPL.rename -o nil3.InilSPL.png -x 800 -y 1600</span><br><span class="line">java annotate_tree_with_dup_modes -t ItfSPL.nwk  -s trifida3.ItfSPL.rename -o trifida3.ItfSPL.png -x 800 -y 1600</span><br><span class="line">java annotate_tree_with_dup_modes -t ItbSPL.nwk  -s triloba3.ItbSPL.rename -o triloba3.ItbSPL.png -x 800 -y 1600</span><br><span class="line">java annotate_tree_with_dup_modes -t IbSPL.nwk  -s batatas3.IbSPL.rename -o batatas3.IbSPL.png -x 800 -y 1600</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java annotate_tree_with_dup_modes -t batatas.spl.29.muscle.gb.nwk -s result/batatas6.dup.re -o result/batatas6.png -x 800 -y 1600</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KaKs 计算进化速率_update</title>
      <link href="/2020/06/22/KaKs_calculator/"/>
      <url>/2020/06/22/KaKs_calculator/</url>
      
        <content type="html"><![CDATA[<h3 id="首先我们还是需要用蛋白的比对文件，去匹配cds的比对文件"><a href="#首先我们还是需要用蛋白的比对文件，去匹配cds的比对文件" class="headerlink" title="首先我们还是需要用蛋白的比对文件，去匹配cds的比对文件"></a>首先我们还是需要用蛋白的比对文件，去匹配cds的比对文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># rename.6merge.ms.pep 为蛋白全长的比对文件,在使用kaks的时候需要nogap命令，不然还是会报错</span><br><span class="line">perl ~/Downloads/softwares/pal2nal.v14/pal2nal.pl rename.6merge.ms.pep rename.6merge.cds -nogap &gt; rename.6merge.ms.pal2nal.clu</span><br><span class="line"></span><br><span class="line"># 然后转换为成对的基因对的格式</span><br><span class="line">AXTConvertor rename.6merge.ms.pal2nal.clu rename.6merge.ms.pal2nal.AXT</span><br><span class="line"></span><br><span class="line"># 然后再是用kaks calculator对 axt格式的文件 输出其kaks等信息 ，-m选择model为YN，如果选择model为MA的话大概需要花费20行个小时， 但是如果使用YN的话只需要十几秒，暂时没有找到有什么具体的差异，算出来的方式有一点差异。MA的话是如果 有三种异常值，一个是50</span><br><span class="line">一个是NA 一个是 0.0001，具体解释如下：如果只有一个非同一突变的位点那就是0.0001，如果只有一个同义突变的位点 那就是50，如果啥都没有，完全一样那就是NA。当模型选为YN的话，有两种异常值 -0。和 就不再计算NA或者50的位点。。同时有许多对基因</span><br><span class="line"># 发现不同的模型之间差距还是蛮大的。有可能有两倍的差距</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KaKs_Calculator -i rename.6merge.ms.pal2nal.AXT -o rename.6merge.ms.pal2nal.kaks -m YN -c 11</span><br><span class="line">awk -F &apos;\t&apos; -v OFS=&apos;\t&apos; &apos;&#123;print $1,$5&#125;&apos; rename.6merge.ms.pal2nal.kaks  | awk -F &apos;\&amp;&apos; -v OFS=&apos;\t&apos; &apos;&#123;print $1,$2&#125;&apos;</span><br></pre></td></tr></table></figure><p>Table 2. Methods Incorporated in KaKs_Calculator</p><table><thead><tr><th>Approximate method</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Method</td><td>Mutation model<a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#tbl2fn1" target="_blank" rel="noopener">#1</a></td><td>Reference</td><td></td><td></td></tr><tr><td></td><td>Step 1</td><td>Step 2</td><td>Step 3</td><td></td></tr><tr><td>NG</td><td>JC</td><td>JC</td><td>JC</td><td><a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib26" target="_blank" rel="noopener"><em>26</em></a></td></tr><tr><td>LWL</td><td>JC</td><td>K2P</td><td>K2P</td><td><a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib28" target="_blank" rel="noopener"><em>28</em></a></td></tr><tr><td>MLWL</td><td>K2P</td><td>K2P</td><td>K2P</td><td><a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib30" target="_blank" rel="noopener"><em>30</em></a></td></tr><tr><td>LPB</td><td>—<a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#tbl2fn3" target="_blank" rel="noopener">*</a></td><td>—<a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#tbl2fn3" target="_blank" rel="noopener">*</a></td><td>K2P</td><td><a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib25" target="_blank" rel="noopener">25.</a>, <a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib29" target="_blank" rel="noopener">29.</a></td></tr><tr><td>MLPB</td><td>—<a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#tbl2fn3" target="_blank" rel="noopener">*</a></td><td>—<a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#tbl2fn3" target="_blank" rel="noopener">*</a></td><td>K2P</td><td><a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib30" target="_blank" rel="noopener"><em>30</em></a></td></tr><tr><td>YN</td><td>HKY</td><td>HKY</td><td>HKY</td><td><a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib27" target="_blank" rel="noopener"><em>27</em></a></td></tr><tr><td>MYN</td><td>TN</td><td>TN</td><td>TN</td><td><a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib31" target="_blank" rel="noopener"><em>31</em></a></td></tr><tr><td>Maximum likelihood method</td><td></td><td></td><td></td><td></td></tr><tr><td>Method</td><td>Mutation model<a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#tbl2fn2" target="_blank" rel="noopener">#2</a></td><td>Reference</td><td></td><td></td></tr><tr><td>GY</td><td>HKY</td><td><a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib19" target="_blank" rel="noopener">19.</a>, <a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib20" target="_blank" rel="noopener">20.</a></td><td></td><td></td></tr><tr><td>MS</td><td>a model that has the smallest AICC among 14 candidate models</td><td>Model-selected method proposed in this study</td><td></td><td></td></tr><tr><td>MA</td><td>a model that averages parameters across 14 candidate models</td><td>Model-averaged method proposed in this study</td><td></td><td></td></tr></tbody></table><p>#1. The approximate method involves three basic steps: Step 1: counting the numbers of synonymous and nonsynonymous sites; Step 2: calculating the numbers of synonymous and nonsynonymous substitutions; Step 3: correcting for multiple substitutions.</p><p>#2. The maximum likelihood method uses the probability theory to finish the three steps in one go <a href="https://www.sciencedirect.com/science/article/pii/S1672022907600072?via%3Dihub#bib4" target="_blank" rel="noopener">(<em>4</em>)</a>.</p><p>*No specific definition of synonymous and nonsynonymous sites or substitutions.</p><h4 id="有个想法-计算每个物种对之间的kaks比值"><a href="#有个想法-计算每个物种对之间的kaks比值" class="headerlink" title="有个想法    计算每个物种对之间的kaks比值"></a>有个想法    计算每个物种对之间的kaks比值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">less Ipomoea.id | while read line</span><br><span class="line">do</span><br><span class="line">echo &quot;python get_target_kaks.py -r rename.6merge.ms.pal2nal.clu -1 At -2 &quot;$&#123;line&#125;&quot; &gt; At&quot;$&#123;line&#125;&quot;.clu&quot;</span><br><span class="line">done    </span><br><span class="line"></span><br><span class="line">python get_target_kaks.py -r rename.6merge.ms.pal2nal.clu -1 Ib -2 Sly &gt; IbSly.clu</span><br><span class="line">python get_target_kaks.py -r rename.6merge.ms.pal2nal.clu -1 Ib -2 Inil &gt; IbInil.clu</span><br><span class="line">python get_target_kaks.py -r rename.6merge.ms.pal2nal.clu -1 Ib -2 Itb &gt; IbItb.clu</span><br><span class="line">python get_target_kaks.py -r rename.6merge.ms.pal2nal.clu -1 Ib -2 Itf &gt; IbItf.clu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#计算所有甘薯属和番茄的关系，计算所有番薯属和拟南芥的关系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 给他们加上clustal的标识head</span><br><span class="line">ls S*clu | while read line                      </span><br><span class="line">do</span><br><span class="line">cat head $&#123;line&#125; &gt; $&#123;line&#125;.ok</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 转换为AXT格式</span><br><span class="line">ls *clu.ok  | sed &apos;s/.clu.ok//g&apos; |while read line</span><br><span class="line">do</span><br><span class="line">AXTConvertor $&#123;line&#125;.clu.ok $&#123;line&#125;.axt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># 生成kaks文件</span><br><span class="line">ls *axt| sed &apos;s/.axt//g&apos;  | while read line; do  echo &quot;KaKs_Calculator -i &quot;$&#123;line&#125;&quot;.axt -o &quot;$&#123;line&#125;&quot;.kaks -m MA -c 11 &amp;&quot;; done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> KaKscalculator,R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/06/16/WGCNA/"/>
      <url>/2020/06/16/WGCNA/</url>
      
        <content type="html"><![CDATA[<p>##RSEM</p><h3 id="1-Get-matrix-of-gene-expression-FPKM-or-TPM-or-reads-count"><a href="#1-Get-matrix-of-gene-expression-FPKM-or-TPM-or-reads-count" class="headerlink" title="1. Get matrix of gene expression (FPKM or TPM),or reads count"></a>1. Get matrix of gene expression (FPKM or TPM),or reads count</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash">  rsem-generate-data-matrix is a perl script, be sure of the prameter inside is <span class="built_in">set</span> as getting counts or FPKM or TPM</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim pl file to make target col as 6 <span class="keyword">for</span> FPKM</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim pl file to make target col as 5 <span class="keyword">for</span> TPM</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim pl file to make target col as 4 <span class="keyword">for</span> counts</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment"># rsem-generate-data-matrix PATH</span></span></span><br><span class="line"> rsem-generate-data-matrix results_file/S*gene* &gt; 30.counts.matrix</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment"># remove reduant information</span></span></span><br><span class="line"> sed -i 's/results_file\///g' 30.counts.matrix </span><br><span class="line"> sed -i 's/.genes.results//g' 30.counts.matrix</span><br><span class="line"> sed -i 's/"//g' 30.counts.matrix </span><br><span class="line"> awk '&#123;if( $0 !~"^L")print $0&#125;' 30.counts.matrix &gt; 30.count.matrix </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment"># vim rsem-generate-data-matrix to get </span></span></span><br><span class="line"> vim ~/software/RSEM-1.3.2/rsem-generate-data-matrix</span><br><span class="line"> rsem-generate-data-matrix S*gene* &gt; 39.FPKM.matrix</span><br><span class="line"> awk '&#123;if( $0 !~"^L")print $0&#125;' 30.FPKM.matrix &gt; 30.count.matrix</span><br></pre></td></tr></table></figure><p>###2. Primary filter</p><p>#####filter condition: counts &gt; 10 in 90 percent samples </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter by counts &gt;10 in 90 percent samples</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">ab = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> count_matrix:</span><br><span class="line">    head_include = count_matrix.readline().split(<span class="string">'\t'</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> count_matrix:</span><br><span class="line">        lst1 = row.split(<span class="string">'\t'</span>)</span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst1)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> float(lst1[i+<span class="number">1</span>].strip()) &gt; <span class="number">10.0</span>:</span><br><span class="line">                m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> m &gt; int(<span class="number">0.9</span>*len(head_include)):</span><br><span class="line">            ab[lst1[<span class="number">0</span>]] = <span class="string">"yes"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ab[lst1[<span class="number">0</span>]] = <span class="string">"bad"</span></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">2</span>]) <span class="keyword">as</span> fpkm_matrix:</span><br><span class="line">    print(fpkm_matrix.readline().rstrip())</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> fpkm_matrix:</span><br><span class="line">        lst1 = row.split(<span class="string">'\t'</span>)</span><br><span class="line">        <span class="keyword">if</span> ab[lst1[<span class="number">0</span>]] == <span class="string">"yes"</span>:</span><br><span class="line">            print(row.strip())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> use reads counts filter FPKM matrix</span></span><br><span class="line">python f.py  30.counts.matrix 30.FPKM.noLG.matrix  &gt; 30.FPKM.noLG.filtered.matrix</span><br></pre></td></tr></table></figure><h3 id="3-trinity"><a href="#3-trinity" class="headerlink" title="3.trinity"></a>3.trinity</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/software/trinityrnaseq-v2.9.1/Analysis/DifferentialExpression/PtR --matrix 32.filter.noLG.FPKM.matrix --samples 32samples.txt --log2 --min_rowSums 10 --compare_replicates</span><br><span class="line">~/software/trinityrnaseq-v2.9.1/Analysis/DifferentialExpression/PtR --matrix  32.filter.noLG.FPKM.matrix --min_rowSums 10 -s 32samples.txt --log2 --CPM --sample_cor_matrix</span><br><span class="line">~/software/trinityrnaseq-v2.9.1/Analysis/DifferentialExpression/PtR --matrix  32.filter.noLG.FPKM.matrix -s 32samples.txt --min_rowSums 10 --log2 --CPM --center_rows   --prin_comp 8</span><br></pre></td></tr></table></figure><p>##WGCNA</p><h3 id="How-many-samples-does-WGCNA-need"><a href="#How-many-samples-does-WGCNA-need" class="headerlink" title="How many samples does WGCNA need ?"></a>How many samples does WGCNA need ?</h3><p>20 samples</p><p>If at all possible, one should <strong>have</strong> at least 20 <strong>samples</strong>; as with <strong>any</strong> analysis methods, more <strong>samples</strong> usually lead to more robust and refined results</p><h3 id="If-replicated-samples-could-use-as-individuals"><a href="#If-replicated-samples-could-use-as-individuals" class="headerlink" title="If replicated samples could use as individuals?"></a>If replicated samples could use as individuals?</h3><p>There is a biostar question about that</p><blockquote><p>Q: Hi, in WGCNA manual I learn that the minimum sample size for WGCNA is 15. If I have 10 different treatment, each treatment has three replicates, do I have 30 samples or just 10 samples?</p><p>A: The value of 15 seems arbitrary to me - I am not sure that it is a hard threshold. If the developer of WGCNA went by the Aztec system of numbers, maybe he would have said that 20 is the minimum (Aztecs had 20-base system of numbers).</p></blockquote><p>This answer get 3 stars include me :)</p><blockquote><p><a href="https://www.biostars.org/p/342696/" target="_blank" rel="noopener">https://www.biostars.org/p/342696/</a></p></blockquote><p>###Does gene set need normalized?</p><p>Dec 24, 2017 - These <em>normalization</em> methods make a big difference if one wants to compare expression of gene A to expression of gene B; but <em>WGCNA</em> calculates correlations for which gene-wise scaling factors make no difference. (Sample-wise scaling factors of course do, so samples do <em>need</em> to be <em>normalized</em>.)</p><h3 id="Whether-should-I-filter-gene-sets"><a href="#Whether-should-I-filter-gene-sets" class="headerlink" title="Whether  should I filter gene sets"></a>Whether  should I filter gene sets</h3><blockquote><p>offical:</p><p>We <strong>do</strong> not recommend <strong>filtering genes</strong> by differential expression. <strong>WGCNA</strong> is designed to be an unsupervised analysis method that clusters <strong>genes</strong> based on their expression profiles.</p></blockquote><p>But it really need a lot memory, 16G PC is not available for gene sets large than 50k</p><h3 id="Answear-two-forementioned-question"><a href="#Answear-two-forementioned-question" class="headerlink" title="Answear two forementioned question :"></a>Answear two forementioned question :</h3><p>Can WGCNA be used to analyze RNA-Seq data?</p><p>Yes. As far as WGCNA is concerned, working with (properly normalized) RNA-seq data isn’t really any different from working with (properly normalized) microarray data.</p><p><strong>We suggest removing features whose counts are consistently low</strong> (for example, removing all features that have a count of less than say 10 in more than 90% of the samples) because such low-expressed features tend to reflect noise and correlations based on counts that are mostly zero aren’t really meaningful. The actual thresholds should be based on experimental design, sequencing depth and sample counts.</p><p><strong>We then recommend a variance-stabilizing transformation. For example,</strong> <strong>package DESeq2 implements the function</strong> <strong>varianceStabilizingTransformation which we have found useful, but one</strong> <strong>could also start with normalized counts (or RPKM/FPKM data) and</strong> <strong>log-transform them using log2(x+1).</strong> For highly expressed features, the differences between full variance stabilization and a simple log transformation are small.</p><p><strong>Whether one uses RPKM, FPKM, or simply normalized counts doesn’t make</strong> <strong>a whole lot of difference for WGCNA analysis as long as all samples</strong> <strong>were processed the same way.</strong> These normalization methods make a big difference if one wants to compare expression of gene A to expression of gene B; but WGCNA calculates correlations for which gene-wise scaling factors make no difference. (Sample-wise scaling factors of course do, so samples do need to be normalized.)</p><p>If data come from different batches, we recommend to check for batch effects and, if needed, adjust for them. We use ComBat for batch effect removal but other methods should also work.</p><p>Finally, we usually check quantile scatterplots to make sure there are no systematic shifts between samples; if sample quantiles show correlations (which they usually do), quantile normalization can be used to remove this effect.</p><blockquote><p><a href="https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/faq.html" target="_blank" rel="noopener">OFFICIAL FAQ</a></p></blockquote><h5 id="Final-I-decided"><a href="#Final-I-decided" class="headerlink" title="Final I decided:"></a>Final I decided:</h5><p>The authors do recommend to remove the “noisier” genes, either by mean expression or variance, but they also recommmend to not filter by differential expression.</p><ol><li>Use reads count to filter: if reads count of one gene in 90% samples is less than <strong><em>10</em></strong> , remove it (i got 20902 genes,15 SPL genes included finally)    </li></ol><h2 id="WGCNA-Process"><a href="#WGCNA-Process" class="headerlink" title="WGCNA Process"></a>WGCNA Process</h2><h4 id="Samples-30-samples-during-5-period-of-batatas-devolopment"><a href="#Samples-30-samples-during-5-period-of-batatas-devolopment" class="headerlink" title="Samples: 30 samples during 5 period of batatas devolopment"></a>Samples: 30 samples during 5 period of batatas devolopment</h4><p>10TR 20TR 30FR 30SR 40FR 40SR 50FR 50SR</p><p>Only after 30 days, we could recognize SR based on the diameter &gt; 2.5mm (and DAT10TR DAT20TR is FR).</p><p>each period has 4 rep</p><p>go</p><h4 id="Target-Use-WGCNA-distinguishes-which-genes-have-the-same-express-pattern-and-find-the-gene-most-correlated-to-SPL-genes-in-the-same-module"><a href="#Target-Use-WGCNA-distinguishes-which-genes-have-the-same-express-pattern-and-find-the-gene-most-correlated-to-SPL-genes-in-the-same-module" class="headerlink" title="Target: Use WGCNA distinguishes which genes have the same express pattern and find the gene most correlated to SPL genes in the same module"></a>Target: Use WGCNA distinguishes which genes have the same express pattern and find the gene most correlated to <em>SPL</em> genes in the same module</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(WGCNA)</span><br><span class="line">allowWGCNAThreads(<span class="number">12</span>)</span><br><span class="line">options(stringsAsFactors = <span class="literal">FALSE</span>)</span><br><span class="line">setwd(<span class="string">"~/DATA/WGCNA/"</span>)</span><br><span class="line">expro=read.table(<span class="string">'rename.30.FPKM.noLG.filtered.matrix'</span>,row.names = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter most 25% variant genes</span></span><br><span class="line"><span class="comment">#m.vars=apply(expro,1,var)</span></span><br><span class="line"><span class="comment">#expro.upper=expro[which(m.vars&gt;quantile(m.vars, probs = seq(0, 1, 0.25))[4]),]</span></span><br><span class="line"><span class="comment">#dim(expro.upper)</span></span><br><span class="line"><span class="comment">#datExpr=as.data.frame(t(expro.upper));</span></span><br><span class="line"><span class="comment">#nGenes = ncol(datExpr)</span></span><br><span class="line"><span class="comment">#nSamples = nrow(datExpr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># do not perform filter</span></span><br><span class="line">datExpr=as.data.frame(t(expro));</span><br><span class="line">nGenes = ncol(datExpr)</span><br><span class="line">nSamples = nrow(datExpr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## check outlier</span></span><br><span class="line">gsg = goodSamplesGenes(datExpr, verbose = <span class="number">3</span>);</span><br><span class="line">gsg$allOK</span><br><span class="line">sampleTree = hclust(dist(datExpr), method = <span class="string">"average"</span>)</span><br><span class="line">plot(sampleTree, main = <span class="string">"Sample clustering to detect outliers"</span></span><br><span class="line">     , sub=<span class="string">""</span>, xlab=<span class="string">""</span>)</span><br><span class="line"><span class="comment"># save(datExpr, file = "FPKM-01-dataInput.RData")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## if outlier exsit, then remove gsg False genes using this function </span></span><br><span class="line"><span class="comment">#if (!gsg$allOK)&#123;</span></span><br><span class="line"><span class="comment">## Optionally, print the gene and sample names that were removed:</span></span><br><span class="line"><span class="comment">#if (sum(!gsg$goodGenes)&gt;0) </span></span><br><span class="line"><span class="comment"># printFlush(paste("Removing genes:", </span></span><br><span class="line"><span class="comment"># paste(names(datExpr)[!gsg$goodGenes], collapse = ",")));</span></span><br><span class="line"><span class="comment">#if (sum(!gsg$goodSamples)&gt;0) </span></span><br><span class="line"><span class="comment"># printFlush(paste("Removing samples:", </span></span><br><span class="line"><span class="comment"># paste(rownames(datExpr)[!gsg$goodSamples], collapse = ",")));</span></span><br><span class="line"><span class="comment"># Remove the offending genes and samples from the data:</span></span><br><span class="line"><span class="comment">#datExpr = datExpr[gsg$goodSamples, gsg$goodGenes]</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Log2 fold change</span></span><br><span class="line"><span class="comment">#datExpr = log2(datExpr+1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## try different soft threshold,from 1 to 25</span></span><br><span class="line">powers = c(seq(<span class="number">1</span>,<span class="number">25</span>,by = <span class="number">1</span>))</span><br><span class="line">sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## plot the 25 value</span></span><br><span class="line">par(mfrow = c(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">cex1 = <span class="number">0.8</span>;</span><br><span class="line">plot(sft$fitIndices[,<span class="number">1</span>], -sign(sft$fitIndices[,<span class="number">3</span>])*sft$fitIndices[,<span class="number">2</span>],</span><br><span class="line">     xlab=<span class="string">"Soft Threshold (power)"</span>,ylab=<span class="string">"Scale Free Topology Model Fit,signed R^2"</span>,type=<span class="string">"n"</span>,</span><br><span class="line">     main = paste(<span class="string">"Scale independence"</span>));</span><br><span class="line">text(sft$fitIndices[,<span class="number">1</span>], -sign(sft$fitIndices[,<span class="number">3</span>])*sft$fitIndices[,<span class="number">2</span>],</span><br><span class="line">     labels=powers,cex=cex1,col=<span class="string">"red"</span>);</span><br><span class="line">abline(h=<span class="number">0.80</span>,col=<span class="string">"red"</span>)</span><br><span class="line">plot(sft$fitIndices[,<span class="number">1</span>], sft$fitIndices[,<span class="number">5</span>],</span><br><span class="line">     xlab=<span class="string">"Soft Threshold (power)"</span>,ylab=<span class="string">"Mean Connectivity"</span>, type=<span class="string">"n"</span>,</span><br><span class="line">     main = paste(<span class="string">"Mean connectivity"</span>))</span><br><span class="line">text(sft$fitIndices[,<span class="number">1</span>], sft$fitIndices[,<span class="number">5</span>], labels=powers, cex=cex1,col=<span class="string">"red"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### get an estimate power value(Closest to 0.9)</span></span><br><span class="line">sft$powerEstimate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## One-step network construction and module detection##</span></span><br><span class="line">cor = WGCNA::cor</span><br><span class="line">net = blockwiseModules(</span><br><span class="line">  <span class="comment"># input data</span></span><br><span class="line">  datExpr, </span><br><span class="line">  <span class="comment"># calculate correlation coefficient</span></span><br><span class="line">  power = sft$powerEstimate, </span><br><span class="line">  corType = <span class="string">"pearson"</span>,</span><br><span class="line">  networkType = <span class="string">"unsigned"</span>,</span><br><span class="line">  maxBlockSize = <span class="number">6000</span>,</span><br><span class="line">  TOMType = <span class="string">"unsigned"</span>,</span><br><span class="line">  deepSplit = <span class="number">2</span>,</span><br><span class="line">  minModuleSize = <span class="number">30</span>,</span><br><span class="line">  reassignThreshold = <span class="number">0</span>,</span><br><span class="line">  <span class="comment"># distance among modules less than 0.15, otherwise correlation among module more than 0.85 will be merged</span></span><br><span class="line">  mergeCutHeight = <span class="number">0.15</span>,</span><br><span class="line">  numericLabels = <span class="literal">TRUE</span>, </span><br><span class="line">  pamRespectsDendro = <span class="literal">FALSE</span>,)</span><br><span class="line"><span class="comment">## show how many modules identified</span></span><br><span class="line">table(net$colors)</span><br><span class="line"><span class="comment">## plot results</span></span><br><span class="line"><span class="comment">## Convert labels to colors for plotting</span></span><br><span class="line">mergedColors = labels2colors(net$colors)</span><br><span class="line"><span class="comment">## Plot the dendrogram and the module colors underneath</span></span><br><span class="line">plotDendroAndColors(net$dendrograms[[<span class="number">1</span>]], mergedColors[net$blockGenes[[<span class="number">1</span>]]],<span class="string">"Module colors"</span>,</span><br><span class="line">                    dendroLabels = <span class="literal">FALSE</span>, hang = <span class="number">0.03</span>,</span><br><span class="line">                    addGuide = <span class="literal">TRUE</span>, guideHang = <span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## get all edge file and node file</span></span><br><span class="line"></span><br><span class="line">moduleLabels = net$colors</span><br><span class="line">moduleColors = labels2colors(net$colors)</span><br><span class="line">modProbes = names(datExpr)</span><br><span class="line">modules = <span class="string">"all_without_normalize"</span></span><br><span class="line">TOM = TOMsimilarityFromExpr(datExpr, power = sft$powerEstimate);</span><br><span class="line">cyt = exportNetworkToCytoscape(TOM,</span><br><span class="line">                               edgeFile = paste(<span class="string">"CytoscapeInput-edges-"</span>, paste(modules, collapse=<span class="string">"-"</span>), <span class="string">".txt"</span>, sep=<span class="string">""</span>),</span><br><span class="line">                               nodeFile = paste(<span class="string">"CytoscapeInput-nodes-"</span>, paste(modules, collapse=<span class="string">"-"</span>), <span class="string">".txt"</span>, sep=<span class="string">""</span>),</span><br><span class="line">                               weighted = <span class="literal">TRUE</span>,</span><br><span class="line">                               threshold = <span class="number">0.02</span>,</span><br><span class="line">                               nodeNames = modProbes,</span><br><span class="line">                               nodeAttr = moduleColors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Or retrieve specific module edges</span></span><br><span class="line">modules = c(<span class="string">"turquoise"</span>)</span><br><span class="line"><span class="comment"># 要可视化的基因</span></span><br><span class="line">probes = colnames(datExpr)</span><br><span class="line">inModule = is.finite(match(moduleColors, modules));</span><br><span class="line">modProbes = probes[inModule]</span><br><span class="line"><span class="comment"># 候选基因的 TOM</span></span><br><span class="line">modTOM = TOM[inModule, inModule]</span><br><span class="line"></span><br><span class="line">dimnames(modTOM) = list(modProbes, modProbes)</span><br><span class="line"><span class="comment"># Export the network into edge and node list files Cytoscape can read</span></span><br><span class="line">cyt = exportNetworkToCytoscape(modTOM,</span><br><span class="line">                               edgeFile = paste(<span class="string">"CytoscapeInput-edges-"</span>, paste(modules, collapse=<span class="string">"-"</span>), <span class="string">".txt"</span>, sep=<span class="string">""</span>),</span><br><span class="line">                               nodeFile = paste(<span class="string">"CytoscapeInput-nodes-"</span>, paste(modules, collapse=<span class="string">"-"</span>), <span class="string">".txt"</span>, sep=<span class="string">""</span>),</span><br><span class="line">                               weighted = <span class="literal">TRUE</span>,</span><br><span class="line">                               threshold = <span class="number">0.02</span>,</span><br><span class="line">                               nodeNames = modProbes,</span><br><span class="line">                               nodeAttr = moduleColors[inModule])</span><br><span class="line"><span class="comment">########</span></span><br><span class="line"><span class="comment"># If our target genes are not clustered in one module as expected</span></span><br><span class="line"><span class="comment"># may be reconstruct net in more sensitive parameter</span></span><br><span class="line"><span class="comment">#######</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get module</span></span><br><span class="line">MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes</span><br><span class="line">MEs = orderMEs(MEs0)</span><br><span class="line">modNames = substring(names(MEs), <span class="number">3</span>)</span><br><span class="line">geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = <span class="string">"p"</span>))</span><br><span class="line">MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), </span><br><span class="line">                                          nSamples))</span><br><span class="line">names(geneModuleMembership) = paste(<span class="string">"MM"</span>, modNames, sep=<span class="string">""</span>)</span><br><span class="line">names(MMPvalue) = paste(<span class="string">"p.MM"</span>, modNames, sep=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">write.csv(MMPvalue,file = <span class="string">"MMPvalue.csv"</span>,quote=<span class="literal">F</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HubGenes &lt;- chooseTopHubInEachModule(datExpr,modules)</span><br><span class="line">write.table (HubGenes,file = <span class="string">"HubGenes_of_turquoise_module.txt"</span>,quote=<span class="literal">F</span>,sep=<span class="string">'\t'</span>)</span><br></pre></td></tr></table></figure><h3 id="SPL-gene-analysis"><a href="#SPL-gene-analysis" class="headerlink" title="SPL gene analysis"></a>SPL gene analysis</h3><h4 id="get-target-gene-color-and-id"><a href="#get-target-gene-color-and-id" class="headerlink" title="get target gene color and id"></a>get target gene color and id</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">get top gene based on weight</span></span><br><span class="line">less  spl.ori.id | while read line; do grep -w $&#123;line&#125;  CytoscapeInput-nodes-all_without_normalize.txt; done &gt; spl.color</span><br><span class="line">mkdir result</span><br><span class="line">awk '&#123;print "grep -w \""$1"\" 0.05.CytoscapeInput-edges-all.txt &gt; result/"$1"."$3".result"&#125;' spl.color &gt; go</span><br><span class="line">sh go</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> direction among genes <span class="keyword">in</span> sample color are lacking of direction, cuz we constrcut net use <span class="string">"unsigned"</span> method</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> therefore we could sort the edge file by 3rd column</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> either we should filter those replicated genes <span class="keyword">in</span> 1st 2nd column </span></span><br><span class="line">ls *result.2 | sed 's/.result.2//g' | while read line;do python sort.py $&#123;line&#125;.result &gt; $&#123;line&#125;.id.2;done</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## sort.py </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">lst3 = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_list</span><span class="params">(one_list)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> list(set(one_list))</span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> input_data:</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> input_data:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">file_len = i</span><br><span class="line">sort_file = <span class="string">''</span>.join(sorted(open(sys.argv[<span class="number">1</span>]), key=<span class="keyword">lambda</span> s: s.split()[<span class="number">2</span>],reverse=<span class="number">1</span>))</span><br><span class="line">lst1 = sort_file.strip().split(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(file_len*<span class="number">0.1</span>)):</span><br><span class="line">    lst2 = lst1[i].split(<span class="string">'\t'</span>)</span><br><span class="line">    lst3.append(lst2[<span class="number">0</span>])</span><br><span class="line">    lst3.append(lst2[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sort_list(lst3))):</span><br><span class="line">    print(sort_list(lst3)[i<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h4 id="get-gene-based-on-FPKM-cor"><a href="#get-gene-based-on-FPKM-cor" class="headerlink" title="get gene based on FPKM cor"></a>get gene based on FPKM cor</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> only analyze gene <span class="keyword">in</span> turquoise</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> get gene based on FPKM cor</span></span><br><span class="line">less  turquoise.gene.id | while read line  </span><br><span class="line">do</span><br><span class="line">grep -w $&#123;line&#125; ../../9_RSEM/88/88.FPKM.noLGfiltered.matrix</span><br><span class="line">done &gt; turquoise.gene.FPKM.matrix</span><br></pre></td></tr></table></figure><h4 id="get-correlation-ship-between-spl-gene-and-turquoise-gene"><a href="#get-correlation-ship-between-spl-gene-and-turquoise-gene" class="headerlink" title="get correlation ship between spl gene and turquoise gene"></a>get correlation ship between spl gene and turquoise gene</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(circlize)</span><br><span class="line"><span class="keyword">library</span>(corrplot)</span><br><span class="line"><span class="keyword">library</span>(pheatmap)</span><br><span class="line">setwd(<span class="string">"~/data/gene_family/downstream/10_GO_KEGG"</span>)</span><br><span class="line"></span><br><span class="line">gene &lt;- read.delim(<span class="string">'hubgene/turquoise.gene.FPKM.matrix'</span>, row.names = <span class="number">1</span>,header = <span class="literal">T</span>, sep = <span class="string">'\t'</span>)</span><br><span class="line">gene &lt;- t(gene) </span><br><span class="line">gene &lt;- log2(gene+<span class="number">1</span>) </span><br><span class="line">gene_cor &lt;- cor(gene, method = <span class="string">'pearson'</span>)</span><br><span class="line">df &lt;- as.data.frame(gene_cor)</span><br><span class="line"></span><br><span class="line">spl_turquoise &lt;- df[,which(names(df)%<span class="keyword">in</span>%c(<span class="string">"g34536"</span>,<span class="string">"g46868"</span>,<span class="string">"g54228"</span>,<span class="string">"g31999"</span>,<span class="string">"g44906"</span>))]</span><br><span class="line">gene_cor &lt;- as.matrix(spl_turquoise)</span><br><span class="line"></span><br><span class="line">col &lt;- colorRampPalette(c(<span class="string">"#BB4444"</span>, <span class="string">"#EE9988"</span>, <span class="string">"#FFFFFF"</span>, <span class="string">"#77AADD"</span>, <span class="string">"#4477AA"</span>))</span><br><span class="line">pheatmap(spl_turquoise,</span><br><span class="line">         labels_row = <span class="literal">NULL</span>,</span><br><span class="line">         angle_col = <span class="string">"45"</span>,</span><br><span class="line">         cluster_row = <span class="literal">T</span>,</span><br><span class="line">         )</span><br><span class="line">  </span><br><span class="line">write.csv(spl_turquoise, file = <span class="string">"5spl_turquoise.gene.cor.matrix"</span>,quote = <span class="literal">F</span>)</span><br></pre></td></tr></table></figure><h2 id="eggNOG-mapper-and-ClusterProfile"><a href="#eggNOG-mapper-and-ClusterProfile" class="headerlink" title="eggNOG mapper and ClusterProfile"></a>eggNOG mapper and ClusterProfile</h2><p>we first submit our whole protome to <a href="http://eggnog-mapper.embl.de/" target="_blank" rel="noopener">eggNOG website</a>,  against 33090 database representing plants.</p><p>Then we use R script to create a R package named </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> we should modify some cloumn name and necessary content both <span class="keyword">in</span> these two file</span></span><br><span class="line">query_seqs.fa.emapper.annotations</span><br><span class="line"></span><br><span class="line">nohup Rscript  makeOrgPackageFromEmapper.R 1&gt;make.log 2&gt;err.log</span><br></pre></td></tr></table></figure><h4 id="makeOrgPackageFromEmapper-R"><a href="#makeOrgPackageFromEmapper-R" class="headerlink" title="makeOrgPackageFromEmapper.R"></a>makeOrgPackageFromEmapper.R</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"><span class="keyword">library</span>(stringr)</span><br><span class="line"><span class="keyword">library</span>(KEGGREST)</span><br><span class="line"><span class="keyword">library</span>(AnnotationForge)</span><br><span class="line"></span><br><span class="line"><span class="comment">#' Title</span></span><br><span class="line"><span class="comment">#'</span></span><br><span class="line"><span class="comment">#' @param f_emapper_anno eggnog-mapper annotation result</span></span><br><span class="line"><span class="comment">#' @param author Who is the creator of this package? like "xxx &lt;xxx@xxx.xx&gt;"</span></span><br><span class="line"><span class="comment">#' @param tax_id The Taxonomy ID that represents your organism. (NCBI has a nice online browser for finding the one you need)</span></span><br><span class="line"><span class="comment">#' @param genus Single string indicating the genus</span></span><br><span class="line"><span class="comment">#' @param species Single string indicating the species</span></span><br><span class="line"><span class="comment">#'</span></span><br><span class="line"><span class="comment">#' @return OrgDb name</span></span><br><span class="line"><span class="comment">#' @export</span></span><br><span class="line"><span class="comment">#'</span></span><br><span class="line"><span class="comment">#' @examples</span></span><br><span class="line">makeOrgPackageFromEmapper &lt;- <span class="keyword">function</span>(f_emapper_anno, </span><br><span class="line">                                      author, </span><br><span class="line">                                      tax_id = <span class="string">"0"</span>, </span><br><span class="line">                                      genus = <span class="string">"default"</span>, </span><br><span class="line">                                      species = <span class="string">"default"</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># f_emapper_anno = "input/sesame.emapper.annotations"</span></span><br><span class="line">  <span class="comment"># author = "zhangxudong &lt;zhangxudong@genek.tv&gt;"</span></span><br><span class="line">  <span class="comment"># tax_id = "4182"</span></span><br><span class="line">  <span class="comment"># genus = "Sesamum"</span></span><br><span class="line">  <span class="comment"># species = "indicum"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># read emapper result</span></span><br><span class="line">  emapper &lt;- read_delim(f_emapper_anno,</span><br><span class="line">                        <span class="string">"\t"</span>, escape_double = <span class="literal">FALSE</span>, trim_ws = <span class="literal">TRUE</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># extract gene name from emapper</span></span><br><span class="line">  gene_info &lt;- emapper %&gt;%</span><br><span class="line">    dplyr::select(GID = query_name, GENENAME = `eggNOG annot`) %&gt;%</span><br><span class="line">    na.omit()</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># extract go annotation from emapper</span></span><br><span class="line">  gos &lt;- emapper %&gt;%</span><br><span class="line">    dplyr::select(query_name, GO_terms) %&gt;%</span><br><span class="line">    na.omit()</span><br><span class="line">  </span><br><span class="line">  gene2go = data.frame(GID = character(),</span><br><span class="line">                       GO = character(),</span><br><span class="line">                       EVIDENCE = character())</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (row <span class="keyword">in</span> <span class="number">1</span>:nrow(gos)) &#123;</span><br><span class="line">    the_gid &lt;- gos[row, <span class="string">"query_name"</span>][[<span class="number">1</span>]]</span><br><span class="line">    the_gos &lt;- str_split(gos[row,<span class="string">"GO_terms"</span>], <span class="string">","</span>, simplify = <span class="literal">FALSE</span>)[[<span class="number">1</span>]]</span><br><span class="line">    </span><br><span class="line">    df_temp &lt;- data_frame(GID = rep(the_gid, length(the_gos)),</span><br><span class="line">                          GO = the_gos,</span><br><span class="line">                          EVIDENCE = rep(<span class="string">"IEA"</span>, length(the_gos)))</span><br><span class="line">    gene2go &lt;- rbind(gene2go, df_temp)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># extract kegg pathway annotation from emapper ----------------------------</span></span><br><span class="line">  kos &lt;- emapper %&gt;%</span><br><span class="line">    dplyr::select(query_name, KEGG_KOs) %&gt;%</span><br><span class="line">    na.omit()</span><br><span class="line">  </span><br><span class="line">  gene2ko = data.frame(GID = character(),</span><br><span class="line">                       Ko = character())</span><br><span class="line">  </span><br><span class="line">  df_temp &lt;- list()</span><br><span class="line">  <span class="keyword">for</span> (row <span class="keyword">in</span> <span class="number">1</span>:nrow(kos)) &#123;</span><br><span class="line">    the_gid &lt;- kos[row, <span class="string">"query_name"</span>][[<span class="number">1</span>]]</span><br><span class="line">    the_kos &lt;- str_split(kos[row,<span class="string">"KEGG_KOs"</span>], <span class="string">","</span>, simplify = <span class="literal">FALSE</span>)[[<span class="number">1</span>]]</span><br><span class="line">    </span><br><span class="line">    df_temp[[row]] &lt;- data_frame(GID = rep(the_gid, length(the_kos)),</span><br><span class="line">                                 Ko = the_kos)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  gene2ko &lt;- bind_rows(df_temp)</span><br><span class="line">  </span><br><span class="line">  load(file = <span class="string">"kegg_info.RData"</span>)</span><br><span class="line">  gene2pathway &lt;- gene2ko %&gt;% left_join(ko2pathway, by = <span class="string">"Ko"</span>) %&gt;%</span><br><span class="line">    left_join(pathway2name, by = <span class="string">"Pathway"</span>) %&gt;%</span><br><span class="line">    dplyr::select(GID, Ko, Pathway, Pathway_Name, Pathway_Class, Pathway_Subclass) %&gt;%</span><br><span class="line">    distinct() %&gt;%</span><br><span class="line">    na.omit()</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># extract COG annotation from emapper -------------------------------------</span></span><br><span class="line">  cog_info &lt;- read_delim(<span class="string">"cog_funclass.tab"</span>, </span><br><span class="line">                         <span class="string">"\t"</span>, escape_double = <span class="literal">FALSE</span>, trim_ws = <span class="literal">TRUE</span>)</span><br><span class="line">  </span><br><span class="line">  cogs &lt;- emapper %&gt;%</span><br><span class="line">    dplyr::select(query_name, COG = `COG cat`) %&gt;%</span><br><span class="line">    na.omit()</span><br><span class="line">  </span><br><span class="line">  gene2cog = data.frame(GID = character(),</span><br><span class="line">                        COG = character())</span><br><span class="line">  </span><br><span class="line">  df_temp &lt;- list()</span><br><span class="line">  <span class="keyword">for</span> (row <span class="keyword">in</span> <span class="number">1</span>:nrow(cogs)) &#123;</span><br><span class="line">    the_gid &lt;- cogs[row, <span class="string">"query_name"</span>][[<span class="number">1</span>]]</span><br><span class="line">    the_cogs &lt;- str_trim(str_split(cogs[row,<span class="string">"COG"</span>], <span class="string">","</span>, simplify = <span class="literal">FALSE</span>)[[<span class="number">1</span>]])</span><br><span class="line">    </span><br><span class="line">    df_temp[[row]] &lt;- data_frame(GID = rep(the_gid, length(the_cogs)),</span><br><span class="line">                                 COG = the_cogs)</span><br><span class="line">  &#125;</span><br><span class="line">  gene2cog &lt;- bind_rows(df_temp)</span><br><span class="line">  </span><br><span class="line">  gene2cog &lt;- gene2cog %&gt;% left_join(cog_info, by = <span class="string">"COG"</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment"># make OrgDb</span></span><br><span class="line">  makeOrgPackage(gene_info=gene_info,</span><br><span class="line">                 go=gene2go,</span><br><span class="line">                 <span class="comment">#ko=gene2ko,</span></span><br><span class="line">                 pathway=gene2pathway,</span><br><span class="line">                 cog=gene2cog,</span><br><span class="line">                 version=<span class="string">"0.0.2"</span>,</span><br><span class="line">                 maintainer=author,</span><br><span class="line">                 author=author,</span><br><span class="line">                 outputDir = <span class="string">"."</span>,</span><br><span class="line">                 tax_id=tax_id,</span><br><span class="line">                 genus=genus,</span><br><span class="line">                 species=species,</span><br><span class="line">                 goTable=<span class="string">"go"</span>)</span><br><span class="line">  </span><br><span class="line">  my_orgdb &lt;- str_c(<span class="string">"org."</span>, str_to_upper(str_sub(genus, <span class="number">1</span>, <span class="number">1</span>)) , species, <span class="string">".eg.db"</span>, sep = <span class="string">""</span>)</span><br><span class="line">  <span class="keyword">return</span>(my_orgdb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">my_orgdb &lt;- makeOrgPackageFromEmapper(<span class="string">"query_seqs.fa.emapper.annotations"</span>, </span><br><span class="line">                                      <span class="string">"shy &lt;2020180495@jsnu.edu.cn&gt;"</span>, </span><br><span class="line">                                      tax_id = <span class="string">"4120"</span>, </span><br><span class="line">                                      genus = <span class="string">"Ipomoea"</span>, </span><br><span class="line">                                      species = <span class="string">"batatas"</span>)</span><br></pre></td></tr></table></figure><h3 id="And-i-also-use-kobas-enrichment-methods-but-it-still-queued"><a href="#And-i-also-use-kobas-enrichment-methods-but-it-still-queued" class="headerlink" title="And i also use kobas enrichment methods, but it still queued"></a>And i also use kobas enrichment methods, but it still queued</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ipomoea nil</span><br><span class="line">http://kobas.cbi.pku.edu.cn/kobas3/retrieve/?taskid=8ee9e38a368d4ce98ea359f629b0ca38</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># sl</span><br><span class="line"></span><br><span class="line">page:http://kobas.cbi.pku.edu.cn/kobas3/retrieve/?taskid=48bed844140b48a7a4e76e8aca4fa16a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># enrichment nil </span><br><span class="line"></span><br><span class="line">http://kobas.cbi.pku.edu.cn/kobas3/retrieve/?taskid=bd863ad74ea74fa9adc91b4bfe080520</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#enrichment sl</span><br></pre></td></tr></table></figure><h4 id="There-is-a-very-funny-bug"><a href="#There-is-a-very-funny-bug" class="headerlink" title="There is a very funny bug"></a>There is a very funny bug</h4><p>when i first visit kobas webwites, I find they only have two species included in protein blast tags (human and mouse), after I pee back I found many items loaded…. So I could use Ipomoea nil as reference species…</p><h4 id="GO-and-KEGG-annotate-by-ClusterProfile"><a href="#GO-and-KEGG-annotate-by-ClusterProfile" class="headerlink" title="GO and KEGG annotate by ClusterProfile"></a>GO and KEGG annotate by ClusterProfile</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(readr)</span><br><span class="line"><span class="keyword">library</span>(clusterProfiler)</span><br><span class="line"><span class="keyword">library</span>(DOSE)</span><br><span class="line"><span class="keyword">library</span>(purrr)</span><br><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"><span class="keyword">library</span>(org.Ibatatas.eg.db)</span><br><span class="line">setwd(<span class="string">"~/data/gene_family/downstream/10_GO_KEGG/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装构建的R包</span></span><br><span class="line">my_orgdb &lt;- <span class="string">"org.Ibatatas.eg.db/"</span></span><br><span class="line"><span class="keyword">if</span> (requireNamespace(my_orgdb, quietly = <span class="literal">TRUE</span>))</span><br><span class="line">  remove.packages(my_orgdb)</span><br><span class="line">install.packages(my_orgdb, repos = <span class="literal">NULL</span>, type = <span class="string">"source"</span>)</span><br><span class="line"><span class="keyword">library</span>(org.Ibatatas.eg.db)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">load(<span class="string">"kegg_info.RData"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gene_list &lt;- read.table(<span class="string">"hubgene/CytoscapeInput-edges-turquoise.top10.id"</span>, header = <span class="literal">FALSE</span>)</span><br><span class="line">gene_list &lt;- as.character(gene_list$V1)</span><br><span class="line"><span class="comment">#gene_list2 &lt;- read.table("../39/30/gene_filter/final/top10_percent.g34536.brown.f", header = FALSE)</span></span><br><span class="line"><span class="comment">#gene_list2 &lt;- as.character(gene_list2$V1)</span></span><br><span class="line"></span><br><span class="line">ego &lt;- enrichGO(gene          = gene_list, <span class="comment">#差异基因 vector</span></span><br><span class="line">                keyType       = <span class="string">"GID"</span>,  <span class="comment">#差异基因的 ID 类型，需要是 OrgDb 支持的</span></span><br><span class="line">                OrgDb         = org.Ibatatas.eg.db, <span class="comment">#对应的OrgDb</span></span><br><span class="line">                ont           = <span class="string">"BP"</span>, <span class="comment">#GO 分类名称，CC BP MF </span></span><br><span class="line">                pvalueCutoff  = <span class="number">0.05</span>, <span class="comment">#Pvalue 阈值</span></span><br><span class="line">                qvalueCutoff  = <span class="number">0.05</span>, <span class="comment">#qvalue 阈值</span></span><br><span class="line">                pAdjustMethod = <span class="string">"BH"</span>, <span class="comment">#Pvalue 矫正方法 </span></span><br><span class="line">                readable      = <span class="literal">FALSE</span>) <span class="comment">#TRUE 则展示SYMBOL，FALSE 则展示原来的ID</span></span><br><span class="line"><span class="comment">#将 ego 对象转换为dataframe，新版本可以用as.data.frame(ego)</span></span><br><span class="line">ego_results&lt;-as.data.frame(ego)</span><br><span class="line">barplot(ego, showCategory=<span class="number">20</span>, x = <span class="string">"GeneRatio"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pathway2gene &lt;- AnnotationDbi::select(org.Ibatatas.eg.db, </span><br><span class="line">                                      keys = keys(org.Ibatatas.eg.db), </span><br><span class="line">                                      columns = c(<span class="string">"Pathway"</span>)) %&gt;%</span><br><span class="line">  na.omit() %&gt;%</span><br><span class="line">  dplyr::select(Pathway, GID)</span><br><span class="line"></span><br><span class="line">ekp &lt;- enricher(gene_list, </span><br><span class="line">                TERM2GENE = pathway2gene, </span><br><span class="line">                TERM2NAME = pathway2name, </span><br><span class="line">                pvalueCutoff = <span class="number">0.05</span>, </span><br><span class="line">                qvalueCutoff = <span class="number">0.2</span>,</span><br><span class="line">                pAdjustMethod = <span class="string">"BH"</span>,</span><br><span class="line">                minGSSize = <span class="number">1</span>)</span><br><span class="line">ekp_results &lt;- as.data.frame(ekp)</span><br><span class="line"></span><br><span class="line">barplot(ekp, showCategory=<span class="number">20</span>, x = <span class="string">"GeneRatio"</span>)</span><br><span class="line"></span><br><span class="line">dotplot(ekp)</span><br><span class="line"></span><br><span class="line">emapplot(ekp)</span><br></pre></td></tr></table></figure><h3 id="use-CytoScape-construct-network-plot"><a href="#use-CytoScape-construct-network-plot" class="headerlink" title="use CytoScape construct network plot"></a>use CytoScape construct network plot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="file:///Users/sunhaoyun/Library/Application%20Support/typora-user-images/image-20200620111509583.png?lastModify=1592810480" alt="image-20200620111509583"></p><h3 id="Hub-based-analysis"><a href="#Hub-based-analysis" class="headerlink" title="Hub-based analysis"></a>Hub-based analysis</h3><blockquote><p><a href="https://www.karger.com/Article/Fulltext/495205" target="_blank" rel="noopener">Weighted Gene Correlation Network Analysis (WGCNA) Detected Loss of MAGI2 Promotes Chronic Kidney Disease (CKD) by Podocyte Damage</a></p></blockquote><p>Highly connected hub nodes are central to the network’s architecture [<a href="https://www.karger.com/Article/Fulltext/495205#ref6" target="_blank" rel="noopener">6</a>] and studies suggested that genes more centralized in the network are more likely to be key drivers to respective cellular functions compared with peripheral genes [<a href="https://www.karger.com/Article/Fulltext/495205#ref26" target="_blank" rel="noopener">26</a>]. Therefore, more important nodes can be obtained by identifying hub nodes. In this study, the top 5% of nodes with highest connectivity were defined as hub genes in each module [<a href="https://www.karger.com/Article/Fulltext/495205#ref27" target="_blank" rel="noopener">27</a>]. Fig. <a href="https://www.karger.com/Article/Fulltext/495205#f03" target="_blank" rel="noopener">3</a>A-D are the networks of hub genes in the brown, yellow, green and red modules, only displaying connections with weight (w) above threshold values of 0.3, 0.15, 0.05, and 0.05, respectively. Clearly, hub genes (red nodes) exhibited high connectivity with neighboring genes whose functions are consistent with GO and KEGG findings. Taking the brown module as an example, which showed functional enrichment in metabolic and oxidation-reduction processes, some hub genes have been also reported to participate in similar processes, e.g. the SLC13 Family (SLC13A3) [<a href="https://www.karger.com/Article/Fulltext/495205#ref28" target="_blank" rel="noopener">28</a>, <a href="https://www.karger.com/Article/Fulltext/495205#ref29" target="_blank" rel="noopener">29</a>], SLC22 Family (SLC22A6) [<a href="https://www.karger.com/Article/Fulltext/495205#ref30" target="_blank" rel="noopener">30</a>] or MSRA that plays a protective role in the progression of UUO-induced kidney fibrosis via suppression of fibrotic responses caused by oxidative stress [<a href="https://www.karger.com/Article/Fulltext/495205#ref31" target="_blank" rel="noopener">31</a>]. Similarly, some hub genes in the yellow module have been identified as pro-inflammatory factors in a variety of human diseases, including CTSS and ITGB2 [<a href="https://www.karger.com/Article/Fulltext/495205#ref32" target="_blank" rel="noopener">32</a>], consistent with the BP term or KEGG pathway enriched in the yellow module. Meanwhile, some well-known inflammatory factors also had high connectivity to these hub genes, e.g. IL1B, CXCR4 and CASP1. These observations further supported the notion that proposed roles for hub genes of unknown functions may be inferred from clusters of genes similarly expressed across many biological conditions.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk &apos;&#123;if ($1 ~ &quot;^g&quot;)print $1&quot;.t1&quot;&#125;&apos; 0.1.CytoscapeInput-nodes-turquoise.txt  &gt; 0.1.gene.id</span><br><span class="line">awk &apos;&#123;if ($1 ~ &quot;^g&quot;)print $1&quot;.t1&quot;&#125;&apos; 0.05.CytoscapeInput-nodes-turquoise.txt  &gt; 0.05.gene.id</span><br><span class="line">awk &apos;&#123;if ($1 ~ &quot;^g&quot;)print $1&quot;.t1&quot;&#125;&apos; 0.02.CytoscapeInput-nodes-turquoise.txt  &gt; 0.02.gene.id</span><br></pre></td></tr></table></figure><p>![image-20200701084031314](/Users/sunhaoyun/Library/Application Support/typora-user-images/image-20200701084031314.png)</p><p>![image-20200701085601228](/Users/sunhaoyun/Library/Application Support/typora-user-images/image-20200701085601228.png)</p><p>To identify the key modules co-expressed with FT, we calculated themodule-trait association and ranked genes by their correlation with the FPKM value of PmFT.Finally,top 50 candidate genes (R2 &gt; 0.6) co-expressed with PmFTand 11 putative FTinteracting factors inArabidopsisflowering pathway </p><p>by “WGCNA” R package (version 1.4.9) [<a href="https://bmcplantbiol.biomedcentral.com/articles/10.1186/s12870-018-1526-8#ref-CR55" target="_blank" rel="noopener">55</a>], the parameters were set as follows: The power was 9; the minModuleSize was 30 and the cutHeight was 0.25. Finally, we visualized the sub-network using Cytoscape (version 3.4.0) program [<a href="https://bmcplantbiol.biomedcentral.com/articles/10.1186/s12870-018-1526-8#ref-CR56" target="_blank" rel="noopener">56</a>]. An additional investigation of the putative functions of <em>GhSK</em> genes and their co-expression genes was based on Gene Ontology (GO) and Kyoto Encyclopedia of Genes and Genomes (KEGG) enrichment analyses.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>下载鸟类的基因组2) giga</title>
      <link href="/2020/05/28/wget_giga/"/>
      <url>/2020/05/28/wget_giga/</url>
      
        <content type="html"><![CDATA[<p>###1. 首先是张郭杰老师他们的48个鸟类基因组，他们全都放在一个project文件夹下了 十分方便</p><p><a href="http://gigadb.org/dataset/101000" target="_blank" rel="noopener">project 地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/100001_101000/101000/gene_and_repeat_annotation/coding_sequences/cds/*.cds.gz</span><br><span class="line"></span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/100001_101000/101000/assembly/*.fa.gz</span><br><span class="line"></span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/100001_101000/101000/gene_and_repeat_annotation/gff/*gff.gz</span><br><span class="line"></span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/100001_101000/101000/gene_and_repeat_annotation/coding_sequences/pep/*pep.gz</span><br></pre></td></tr></table></figure><h3 id="2-然后是有五个天堂鸟的基因组"><a href="#2-然后是有五个天堂鸟的基因组" class="headerlink" title="2. 然后是有五个天堂鸟的基因组"></a>2. 然后是有五个天堂鸟的基因组</h3><p>只需要根据最后网址提供的doi循环输出就好</p><p><a href="http://gigadb.org/dataset/100521" target="_blank" rel="noopener">project 地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102157/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102158/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102159/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102160/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102161/*</span><br></pre></td></tr></table></figure><h3 id="3-然后是19个企鹅的基因组"><a href="#3-然后是19个企鹅的基因组" class="headerlink" title="3. 然后是19个企鹅的基因组"></a>3. 然后是19个企鹅的基因组</h3><p><a href="http://gigadb.org/dataset/100649" target="_blank" rel="noopener">project地址</a></p><p>同样只需要修改doi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102164/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102165/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102166/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102167/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102168/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102169/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102170/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102171/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102172/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102173/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102174/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102175/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102176/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102177/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102178/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102179/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102180/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102181/*</span><br><span class="line">wget -c ftp://parrot.genomics.cn/gigadb/pub/10.5524/102001_103000/102182/*</span><br></pre></td></tr></table></figure><h4 id="所有giga的项目都支持md5sum十分方便"><a href="#所有giga的项目都支持md5sum十分方便" class="headerlink" title="所有giga的项目都支持md5sum十分方便"></a>所有giga的项目都支持md5sum十分方便</h4>]]></content>
      
      
      
        <tags>
            
            <tag> GiagaScience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载鸟类的基因组2) ncbi</title>
      <link href="/2020/05/28/wget_ncbi/"/>
      <url>/2020/05/28/wget_ncbi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-NCBI-的数据比较麻烦"><a href="#1-NCBI-的数据比较麻烦" class="headerlink" title="1. NCBI 的数据比较麻烦"></a>1. NCBI 的数据比较麻烦</h3><p>NCBI中的assemble分为两个数据库 </p><p>1个是GCA数据库（genebank） 1个是GCF数据库（refgSeq）</p><p>![image-20200528163802536](/Users/sunhaoyun/Library/Application Support/typora-user-images/image-20200528163802536.png)</p><p>两个库在数据上是有重叠的，且GCF优于GCA，所以使用时尽量先使用GCF中有的数据GCF的</p><p>不过一般很少使用ncbi的数据</p><p>A RefSeq (GCF) genome assembly represents an NCBI-derived copy of a submitted GenBank (GCA) assembly. RefSeq (GCF) assembly records are maintained by NCBI. In some cases the RefSeq (GCF) assembly may not be completely identical to the GenBank (GCA) assembly because NCBI staff may (1) remove short sequences or reported contaminants from the assembly or (2) add non-nuclear genome sequences (for example, mitochondrial or chloroplast genomes) to the assembly. All RefSeq (GCF) genome assemblies include annotation. In the majority of cases, this annotation is generated by the NCBI <a href="https://www.ncbi.nlm.nih.gov/genome/annotation_prok/" target="_blank" rel="noopener">prokaryotic</a> or <a href="https://www.ncbi.nlm.nih.gov/genome/annotation_euk/process/" target="_blank" rel="noopener">eukaryotic</a> genome annotation pipelines. In some cases, annotation is provided by the assembly submitter.</p><h3 id="2-需要准备的文件"><a href="#2-需要准备的文件" class="headerlink" title="2.  需要准备的文件"></a>2.  需要准备的文件</h3><p>#### </p><p><a href="https://www.ncbi.nlm.nih.gov/genome/?term=Aves" target="_blank" rel="noopener">NCBI ave</a></p><p>在搜索结果中能看到320个物种的相关assembly信息。</p><p>其中has annotation的117个</p><p>那就先把这117个下载下来</p><h4 id="分析ftp的构成"><a href="#分析ftp的构成" class="headerlink" title="分析ftp的构成"></a>分析ftp的构成</h4><blockquote><p><a href="ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/247/815/GCA_000247815.2_FicAlb1.5" target="_blank" rel="noopener">ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/247/815/GCA_000247815.2_FicAlb1.5</a></p></blockquote><p>GCA_000247815.2</p><p>发现地址中解构了GCA id 或者GCF id。同时还添加了 FicAlb1.5 物种的版本名称（在后面发现这个pattern其实也可能没有规律）</p><p>写了个爬虫去爬ncbi 但总是time out 不知道学校的网有什么鬼。而且他这个带着物种的版本名称的页面 竟然没有index</p><p>所以 把这些结果全选复制粘贴下来。。</p><p>保存为list1</p><p>格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">FicAlb1.5</span><br><span class="line"></span><br><span class="line">Organism: Ficedula albicollis (Collared flycatcher)</span><br><span class="line">Sex: male</span><br><span class="line">Submitter: Uppsala University</span><br><span class="line">Date: 2013/06/27</span><br><span class="line">Assembly level: Chromosome</span><br><span class="line">Genome representation: full</span><br><span class="line">RefSeq category: representative genome</span><br><span class="line">GenBank assembly accession: GCA_000247815.2 (latest)</span><br><span class="line">RefSeq assembly accession: GCF_000247815.1 (latest)</span><br><span class="line">IDs: 37801 [UID] 716688 [GenBank] 726138 [RefSeq]</span><br><span class="line">Item in clipboard</span><br><span class="line"></span><br><span class="line">Select item 1116181</span><br><span class="line">2.</span><br><span class="line">NumMel1.0</span><br><span class="line"></span><br><span class="line">Organism: Numida meleagris (helmeted guineafowl)</span><br><span class="line">Infraspecific name: Breed: g44 Domestic line</span><br><span class="line">Sex: male</span><br><span class="line">Submitter: INRA</span><br><span class="line">Date: 2017/06/01</span><br><span class="line">Assembly level: Chromosome</span><br><span class="line">Genome representation: full</span><br><span class="line">RefSeq category: representative genome</span><br><span class="line">GenBank assembly accession: GCA_002078875.2 (latest)</span><br><span class="line">RefSeq assembly accession: GCF_002078875.1 (latest)</span><br><span class="line">IDs: 1116181 [UID] 4541828 [GenBank] 4550868 [RefSeq]</span><br><span class="line">Item in clipboard</span><br></pre></td></tr></table></figure><p>对这个文件进行过滤 至提取出来有用的信息。。比如包含GCF id的就提取 name 和 GCF id 不包含GCF id的就提取name 和GCA id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 提取GCF id</span><br><span class="line">grep &apos;GCF&apos; list | awk &apos;&#123;print $4&#125;&apos; &gt; fore.name</span><br><span class="line"># 提取序号行和序号行的下一行</span><br><span class="line">grep &apos;^[0-9]&apos; list -A 1 &gt; temp1</span><br><span class="line"># 提取字母开头的行</span><br><span class="line">awk &apos;&#123;if ($0 ~ &quot;^[a-Z]&quot;)print&#125;&apos;  temp1 &gt; midlle.name</span><br><span class="line"># 生成 GCF id对应物种partern的文件 final name</span><br><span class="line">paste -d &apos;\t&apos; fore.name final.list</span><br><span class="line"># 格式如下</span><br><span class="line">GCA_000247815.2 FicAlb1.5</span><br><span class="line">GCA_002078875.2 NumMel1.0</span><br></pre></td></tr></table></figure><p>然后重新排列组合这些pattern 就可以得到 wget的运行文件了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GCF = <span class="string">"ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF"</span></span><br><span class="line">genome = <span class="string">"fna.gz"</span></span><br><span class="line">annotate =  <span class="string">"gff.gz"</span></span><br><span class="line">cds = <span class="string">"cds*"</span></span><br><span class="line">protein = <span class="string">"protein.faa.gz"</span></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> tfile:</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> tfile:</span><br><span class="line">        lst1 = row.split(<span class="string">'\t'</span>)</span><br><span class="line">        head = lst1[<span class="number">0</span>][<span class="number">4</span>:<span class="number">7</span>]</span><br><span class="line">        middle = lst1[<span class="number">0</span>][<span class="number">7</span>:<span class="number">10</span>]</span><br><span class="line">        tail = lst1[<span class="number">0</span>][<span class="number">10</span>:<span class="number">13</span>]</span><br><span class="line">        f1 = lst1[<span class="number">0</span>]</span><br><span class="line">        r2 = lst1[<span class="number">1</span>]</span><br><span class="line">        genome_ftp = <span class="string">"wget -c "</span>+GCF+<span class="string">'/'</span>+head+<span class="string">'/'</span>+middle+<span class="string">'/'</span>+tail+<span class="string">'/'</span>+f1+<span class="string">'_'</span>+r2.strip()+<span class="string">'/*'</span>+genome</span><br><span class="line">        annotate_ftp = <span class="string">"wget -c "</span>+GCF+<span class="string">'/'</span>+head+<span class="string">'/'</span>+middle+<span class="string">'/'</span>+tail+<span class="string">'/'</span>+f1+<span class="string">'_'</span>+r2.strip()+<span class="string">'/*'</span>+annotate</span><br><span class="line">        cds_ftp = <span class="string">"wget -c "</span>+GCF+<span class="string">'/'</span>+head+<span class="string">'/'</span>+middle+<span class="string">'/'</span>+tail+<span class="string">'/'</span>+f1+<span class="string">'_'</span>+r2.strip()+<span class="string">'/*'</span>+cds</span><br><span class="line">        protein_ftp = <span class="string">"wget -c "</span>+GCF+<span class="string">'/'</span>+head+<span class="string">'/'</span>+middle+<span class="string">'/'</span>+tail+<span class="string">'/'</span>+f1+<span class="string">'_'</span>+r2.strip()+<span class="string">'/*'</span>+protein</span><br><span class="line">        print(genome_ftp)</span><br><span class="line">        print(annotate_ftp)</span><br><span class="line">        print(cds_ftp)</span><br><span class="line">        print(protein_ftp)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCBI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤Ensembl中数据的冗余信息</title>
      <link href="/2020/05/25/Ensembl_filter/"/>
      <url>/2020/05/25/Ensembl_filter/</url>
      
        <content type="html"><![CDATA[<h2 id="Ensembl-格式介绍"><a href="#Ensembl-格式介绍" class="headerlink" title="Ensembl 格式介绍"></a>Ensembl 格式介绍</h2><p>u1s1 真的佩服Emsembl数据库的开发团队，十分想问候他们怎么做的这么详细的</p><hr><p>sudo killall coreaudiod</p><p>Ensembl 数据库格式十分简洁明了，每一个基因都有对应的 gene id, 每一个转录本有对应的<br>trasncript id, 每一个蛋白有对应的 protein id, 而且这三个id之间。。没有规律</p><p>比如 这是鸡中的一个蛋白序列的简化stable的信息</p><blockquote><p>ENSGALG00000009622    ENSGALT00000032268     ENSGALP00000031632<br>其实在真实的序列中，也不是上面的样子而是如下这样包含了stableeversion的</p><blockquote><p>ENSGALP00000073247.1 pep chromosome:GRCg6a:15:8238927:8239208:1<br>gene:ENSGALG00000049010.1 transcript:ENSGALT00000103863.1<br>gene_biotype:IG_V_gene transcript_biotype:IG_V_gene</p></blockquote></blockquote><p>在biomart中 除了stable id 还有很多label .. awesome～</p><h3 id="我想要得到蛋白序列中同一个gene-id中最长的蛋白序列"><a href="#我想要得到蛋白序列中同一个gene-id中最长的蛋白序列" class="headerlink" title="我想要得到蛋白序列中同一个gene id中最长的蛋白序列"></a>我想要得到蛋白序列中同一个gene id中最长的蛋白序列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$PATH:OrthoFinder/tools/primary_transcript.py</span><br></pre></td></tr></table></figure><p>orthofinder 中已经给出了怎么提取最长转录本的python脚本。并且最长的转录本的id被替换为gene id输出</p><p>提蛋白真的很方便，但是，老师还需要对应基因的intron序列<br>intron序列就需要gff文件中的exon信息和mRNA信息</p><p>怎么通过带着gene id的最长转录本去过滤gff文件呢。</p><blockquote><p>经过一系列的测试。。比如带gene id的蛋白序列blastp回去找到transcript id。但是blast的算法导致 multi match的情况不好去除</p></blockquote><p>所以还是得写个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">lst = []</span><br><span class="line">Sequence = &#123;&#125;</span><br><span class="line"></span><br><span class="line">transcript2gene = &#123;&#125;</span><br><span class="line">pep2gene = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> input_emsembl_fasta:</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> input_emsembl_fasta:</span><br><span class="line">        <span class="keyword">if</span> row.startswith(<span class="string">'&gt;'</span>):</span><br><span class="line">            lst = row.split(<span class="string">" "</span>)</span><br><span class="line">            pep_id = lst[<span class="number">0</span>].replace(<span class="string">'&gt;'</span>,<span class="string">''</span>)</span><br><span class="line">            gene_id = lst[<span class="number">3</span>].replace(<span class="string">'gene:'</span>,<span class="string">''</span>)</span><br><span class="line">            transcript_id = lst[<span class="number">4</span>].replace(<span class="string">'transcript:'</span>,<span class="string">''</span>)</span><br><span class="line">            Sequence[transcript_id] = <span class="string">''</span></span><br><span class="line">            transcript2gene[transcript_id] = gene_id</span><br><span class="line">            pep2gene[transcript_id] = pep_id</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Sequence[transcript_id] += row.strip()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"t1.temp"</span>,<span class="string">'w'</span>) <span class="keyword">as</span> Out:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Sequence.keys():</span><br><span class="line">        Out.write(i+<span class="string">"\t"</span>+str(len(Sequence[i]))+<span class="string">"\t"</span>+transcript2gene[i]+<span class="string">'\t'</span>+pep2gene[i]+<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">gene_id_len=open(<span class="string">"t1.temp"</span>,<span class="string">"r"</span>)</span><br><span class="line">table = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> gene_id_len:</span><br><span class="line">    col = line.strip().split(<span class="string">"\t"</span>)</span><br><span class="line">    col[<span class="number">0</span>] = str(col[<span class="number">0</span>])</span><br><span class="line">    col[<span class="number">1</span>] = int(col[<span class="number">1</span>])</span><br><span class="line">    col[<span class="number">2</span>] = str(col[<span class="number">2</span>])</span><br><span class="line">    col[<span class="number">3</span>] = str(col[<span class="number">3</span>])</span><br><span class="line">    table.append(col)</span><br><span class="line"><span class="comment">#print(table)</span></span><br><span class="line">table_sorted = sorted(table, key=itemgetter(<span class="number">2</span>, <span class="number">1</span>),reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#print(table_sorted)</span></span><br><span class="line">output_file = open(<span class="string">"t2.temp"</span>,<span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> table_sorted:</span><br><span class="line">    row = [str(x) <span class="keyword">for</span> x <span class="keyword">in</span> row]</span><br><span class="line">    output_file.write(<span class="string">"\t"</span>.join(row) + <span class="string">'\n'</span>)</span><br><span class="line">output_file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_file=open(<span class="string">"t2.temp"</span>,<span class="string">"r"</span>)</span><br><span class="line">dict2=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> input_file.readlines():</span><br><span class="line">    col = line.strip().split(<span class="string">"\t"</span>)</span><br><span class="line">    col[<span class="number">0</span>] = str(col[<span class="number">0</span>])</span><br><span class="line">    col[<span class="number">1</span>] = int(col[<span class="number">1</span>])</span><br><span class="line">    col[<span class="number">2</span>] = str(col[<span class="number">2</span>])</span><br><span class="line">    col[<span class="number">3</span>] = str(col[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">if</span> col[<span class="number">2</span>] <span class="keyword">not</span> <span class="keyword">in</span> dict2:</span><br><span class="line">        dict2[col[<span class="number">2</span>]]=col[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dict2[col[<span class="number">2</span>]]+= <span class="string">'\t'</span>+col[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print(dict2)</span></span><br><span class="line"><span class="comment">#print(dict2.values())</span></span><br><span class="line">list_values=list(dict2.values())</span><br><span class="line"><span class="comment">#print(list_values)</span></span><br><span class="line">result_file = open(<span class="string">"final.fa"</span>,<span class="string">"w"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> list_values:</span><br><span class="line">    col = line.strip().split(<span class="string">"\t"</span>)</span><br><span class="line">    col[<span class="number">0</span>] = str(col[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">#print(col[0])</span></span><br><span class="line"></span><br><span class="line">    result_file.write(col[<span class="number">0</span>]+<span class="string">"\n"</span>)</span><br><span class="line">result_file.close()</span><br></pre></td></tr></table></figure><p>专为Ensembl设计，结果会保存最长转录本的 transcript id， gene id， pep id</p><p>然后再过滤gff</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">ab = &#123;&#125;</span><br><span class="line">with open(sys.argv[1]) as  rename_file:</span><br><span class="line">    for row in rename_file:</span><br><span class="line">        lst1 = row.strip().split(&apos;\t&apos;)</span><br><span class="line">        ab[lst1[0]] = lst1[1]</span><br><span class="line"></span><br><span class="line">with open(sys.argv[2]) as gff_file:</span><br><span class="line">    for row in gff_file:</span><br><span class="line">for key,value in ab.items():</span><br><span class="line">           if &quot;ID=gene:&quot;+key in row:</span><br><span class="line">                print(row.strip())</span><br><span class="line">            elif value in row:</span><br><span class="line">                print(row.strip())</span><br></pre></td></tr></table></figure><p>这样就得到了只包含最长转录本的gff文件</p><p>再用张老师的提取intron的脚本就可以得到intron文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl -w</span></span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> Set::IntSpan;</span><br><span class="line"><span class="keyword">use</span> Bio::DB::Fasta;</span><br><span class="line"></span><br><span class="line"><span class="comment"># date, 2016-12-30, zhanglei</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $ref       = $ARGV[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">my</span> $gene2pep  = $ARGV[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">my</span> $gene2tran = $ARGV[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">my</span> $gtf       = $ARGV[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">my</span> $out       = $ARGV[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">die</span> <span class="string">"Usage: $0 ref.fa gene2pep gene2transcript file.gff3 out.fa</span></span><br><span class="line"><span class="string">This script is used to extract intron from the gff3 file(NOT GTF file!)\n"</span> <span class="keyword">if</span> @ARGV &lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Loading the ID file\t"</span>;</span><br><span class="line"><span class="keyword">my</span> %gene2peps;</span><br><span class="line"><span class="keyword">my</span> %trans2gene;</span><br><span class="line"><span class="keyword">open</span> IN, <span class="string">"&lt;$gene2pep"</span>;</span><br><span class="line"><span class="keyword">while</span> (&lt;IN&gt;) &#123;</span><br><span class="line"><span class="keyword">chomp</span>;</span><br><span class="line"><span class="keyword">my</span> @array = (<span class="keyword">split</span> <span class="regexp">/\s+/</span>);</span><br><span class="line">$gene2peps&#123;$array[<span class="number">0</span>]&#125; = $array[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> IN, <span class="string">"&lt;$gene2tran"</span>;</span><br><span class="line"><span class="keyword">while</span> (&lt;IN&gt;) &#123;</span><br><span class="line"><span class="keyword">chomp</span>;</span><br><span class="line"><span class="keyword">my</span> @array = (<span class="keyword">split</span> <span class="regexp">/\s+/</span>);</span><br><span class="line">$trans2gene&#123;$array[<span class="number">1</span>]&#125; = $array[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Extracting gff3 file\t"</span>;</span><br><span class="line"><span class="comment"># extract gtf</span></span><br><span class="line"><span class="keyword">open</span> IN, <span class="string">"&lt;$gtf"</span>;</span><br><span class="line"><span class="keyword">my</span> @lines;</span><br><span class="line"><span class="keyword">while</span> (&lt;IN&gt;) &#123;</span><br><span class="line"><span class="keyword">my</span> @array = (<span class="keyword">split</span> <span class="regexp">/\s+/</span>, $_);</span><br><span class="line"><span class="keyword">if</span> ($array[<span class="number">2</span>] eq <span class="string">'mRNA'</span> || $array[<span class="number">2</span>] eq <span class="string">'exon'</span>) &#123;</span><br><span class="line"><span class="keyword">push</span> @lines, $_;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"done\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Formatdb $ref\t"</span>;</span><br><span class="line"><span class="comment"># sequence DB</span></span><br><span class="line"><span class="keyword">my</span> $ref_db = Bio::DB::Fasta -&gt; new($ref);</span><br><span class="line"><span class="keyword">print</span> <span class="string">"done\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Get gene id from gff3\t"</span>;</span><br><span class="line"><span class="comment"># load the gff file</span></span><br><span class="line"><span class="keyword">open</span> OUT, <span class="string">"&gt;$out"</span>;</span><br><span class="line"><span class="keyword">my</span> %hash;</span><br><span class="line"><span class="keyword">foreach</span> (@lines) &#123;</span><br><span class="line"><span class="keyword">chomp</span>;</span><br><span class="line"><span class="keyword">next</span> <span class="keyword">if</span> /^<span class="comment">#/;</span></span><br><span class="line"><span class="keyword">next</span> <span class="keyword">if</span> /^\<span class="keyword">s</span>+<span class="regexp">/;</span></span><br><span class="line"><span class="regexp">my @cols = (split /</span>\<span class="keyword">s</span>+<span class="regexp">/, $_);</span></span><br><span class="line"><span class="regexp">my $gene_id = my $trans_id = my $pep_id;</span></span><br><span class="line"><span class="regexp">if ($cols[2] eq 'mRNA') &#123;</span></span><br><span class="line"><span class="regexp">($gene_id) = (/</span>Parent\=gene\:(\w+);<span class="regexp">/);   #Parent=gene:ENSGALG00000053455</span></span><br><span class="line"><span class="regexp">($trans_id) = (/</span>ID\=transcript\:(\w+);<span class="regexp">/);</span></span><br><span class="line"><span class="regexp">#print "mRNA $gene_id $trans_id\n";</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">elsif ($cols[2] eq 'exon') &#123;</span></span><br><span class="line"><span class="regexp">($trans_id) = (/</span>Parent\=transcript\:(\w+);<span class="regexp">/);  #Parent=transcript:</span></span><br><span class="line"><span class="regexp">$gene_id = $trans2gene&#123;$trans_id&#125;;</span></span><br><span class="line"><span class="regexp">#print "exon $gene_id $trans_id\n";</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">$pep_id = $gene2peps&#123;$gene_id&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">next unless $gene_id;</span></span><br><span class="line"><span class="regexp"># chr, strand, gene start and end</span></span><br><span class="line"><span class="regexp"># chr, strand, gene start and end</span></span><br><span class="line"><span class="regexp">if ($cols[2] eq 'mRNA' ) &#123;</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;chr&#125; = $cols[0];</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;strand&#125; = $cols[6];</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;start&#125; = $cols[3];</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;end&#125; = $cols[4];</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;ex_num&#125; = 0;</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;pep_id&#125; = $pep_id;</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;trans_id&#125; = $trans_id;</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;exon&#125; = new Set::IntSpan;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"># exon number</span></span><br><span class="line"><span class="regexp">if ($cols[2] eq 'exon' &amp;&amp; exists $hash&#123;$gene_id&#125;) &#123;</span></span><br><span class="line"><span class="regexp">my ( $start, $end ) = @cols[3, 4];</span></span><br><span class="line"><span class="regexp">$hash&#123;$gene_id&#125;&#123;exon&#125;-&gt;U("$start-$end");</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">print "done\n";</span></span><br><span class="line"><span class="regexp">print "Extract introns from $ref\t";</span></span><br><span class="line"><span class="regexp"># get the exon sequence</span></span><br><span class="line"><span class="regexp">foreach my $gene_id (sort keys %hash) &#123;</span></span><br><span class="line"><span class="regexp">my $chr = $hash&#123;$gene_id&#125;&#123;chr&#125;;</span></span><br><span class="line"><span class="regexp">my $strand = $hash&#123;$gene_id&#125;&#123;strand&#125;;</span></span><br><span class="line"><span class="regexp">my $start = $hash&#123;$gene_id&#125;&#123;start&#125;;</span></span><br><span class="line"><span class="regexp">my $end   = $hash&#123;$gene_id&#125;&#123;end&#125;;</span></span><br><span class="line"><span class="regexp">my $pep_id = $hash&#123;$gene_id&#125;&#123;pep_id&#125;;</span></span><br><span class="line"><span class="regexp">my $trans_id = $hash&#123;$gene_id&#125;&#123;trans_id&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">my $all_set = new Set::IntSpan "$start-$end";</span></span><br><span class="line"><span class="regexp">my $exon_set = $hash&#123;$gene_id&#125;&#123;exon&#125;;</span></span><br><span class="line"><span class="regexp">my $intron_set = diff $all_set $exon_set;</span></span><br><span class="line"><span class="regexp">my @array_intron = sets $intron_set;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">my $seq;</span></span><br><span class="line"><span class="regexp"># upstream and downstream, 0 bp</span></span><br><span class="line"><span class="regexp">#my $min = min $set;</span></span><br><span class="line"><span class="regexp">#$min = $min - 1;</span></span><br><span class="line"><span class="regexp">#my $s_min = 1 + $min - 0;</span></span><br><span class="line"><span class="regexp">#my $max = max $set;</span></span><br><span class="line"><span class="regexp">#$max = $max + 1;</span></span><br><span class="line"><span class="regexp">#my $e_max = $max - 1 + 0;</span></span><br><span class="line"><span class="regexp">#my $upstream = $ref_db-&gt;seq($chr, $s_min =&gt; $min);</span></span><br><span class="line"><span class="regexp">#my $downstream = $ref_db-&gt;seq($chr, $max =&gt; $e_max);</span></span><br><span class="line"><span class="regexp">#$downstream = $upstream = "";</span></span><br><span class="line"><span class="regexp">#   $seq = "$upstream";</span></span><br><span class="line"><span class="regexp"># exon region</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">@array_intron = reverse @array_intron if $strand eq '-';</span></span><br><span class="line"><span class="regexp">foreach my $intron (@array_intron) &#123;</span></span><br><span class="line"><span class="regexp">my ($start, $end) = (split /</span>\-<span class="regexp">/, $intron);</span></span><br><span class="line"><span class="regexp">$end = $start unless defined $end;</span></span><br><span class="line"><span class="regexp">my $seq = $ref_db-&gt;seq($chr, $start =&gt; $end);</span></span><br><span class="line"><span class="regexp">$seq = reverse_complement($seq) if $strand eq '-';</span></span><br><span class="line"><span class="regexp">my $new_strand;</span></span><br><span class="line"><span class="regexp">if ($strand eq '-') &#123;</span></span><br><span class="line"><span class="regexp">$new_strand = "minus_strand";</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">elsif ($strand eq '+') &#123;</span></span><br><span class="line"><span class="regexp">$new_strand = "positive_strand";</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">else &#123;</span></span><br><span class="line"><span class="regexp">print "Warning $gene_id $strand not defined\n";</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">print OUT "&gt;Gene_ID:$gene_id#Transcript_ID:$trans_id#Protein_ID:$pep_id#intron#$new_strand#$chr\:$start-$end\n$seq\n";</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">close OUT;</span></span><br><span class="line"><span class="regexp">print "done\n";</span></span><br><span class="line"><span class="regexp">### sub routines ###</span></span><br><span class="line"><span class="regexp">sub reverse_complement &#123;</span></span><br><span class="line"><span class="regexp">        my $dna = shift;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># reverse the DNA sequence</span></span><br><span class="line"><span class="regexp">        my $revcomp = reverse($dna);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># complement the reversed DNA sequence</span></span><br><span class="line"><span class="regexp">        $revcomp =~ tr/</span>ACGTacgt/TGCAtgca/;</span><br><span class="line">        <span class="keyword">return</span> $revcomp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cds也就比较好提了。毕竟各个id都有了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Ensembl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载鸟类的基因组1) Ensembl</title>
      <link href="/2020/05/25/wget_Ensembl/"/>
      <url>/2020/05/25/wget_Ensembl/</url>
      
        <content type="html"><![CDATA[<h1 id="如何从ENSEMBL数据库-下载里面所有鸟类的-基因组-蛋白序列-cds序列-和gff3注释文件"><a href="#如何从ENSEMBL数据库-下载里面所有鸟类的-基因组-蛋白序列-cds序列-和gff3注释文件" class="headerlink" title="如何从ENSEMBL数据库 下载里面所有鸟类的 基因组 蛋白序列 cds序列 和gff3注释文件"></a>如何从ENSEMBL数据库 下载里面所有鸟类的 基因组 蛋白序列 cds序列 和gff3注释文件</h1><p>去年下过一次 但是当时没有存下过程<br>首先进入Ensmbl数据库下载 all Species list (首页给出的Sp list 只有动物的)<br>然后根据图片和common name挑选出哪些是鸟类，并把前两列存在一个新的txt文件中</p><p>38bird.ensembl.list.txt</p><p>然后观察ftp网址发现，只需要有scientific name就可以下载，但是所有字母都为小写，且string之间有下划线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;&apos; &apos;s/ /_/g&apos; 38bird.ensembl.list.txt</span><br><span class="line">awk &apos;&#123;print $2&#125;&apos; 38bird.ensembl.list.txt &gt; specific_name.list</span><br><span class="line">cat scientific_name.list | tr  &apos;[A-Z]&apos; &apos;[a-z]&apos; &gt; xiaoxie.scientific.list</span><br></pre></td></tr></table></figure><p>然后就可以根据 xiaoxie.scientific.list 循环输出wget下载命令,用wget -c 可以续传，因为下载速度实在太慢了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">less xiaoxie.scientific.list | while read line</span><br><span class="line">do</span><br><span class="line">echo &apos;wget -c ftp://ftp.ensembl.org/pub/release-100/fasta/&apos;$&#123;line&#125;&apos;/cds/*.cds.all.fa.gz&apos;</span><br><span class="line">done &gt; download_cds.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">less xiaoxie.scientific.list | while read line</span><br><span class="line">do</span><br><span class="line">echo &apos;wget -c  ftp://ftp.ensembl.org/pub/release-100/gff3/&apos;$&#123;line&#125;&apos;/*.100.gff3.gz&apos;</span><br><span class="line">done &gt; download_gff3.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">less xiaoxie.scientific.list | while read line</span><br><span class="line">do</span><br><span class="line">echo &apos;wget -c  ftp://ftp.ensembl.org/pub/release-100/fasta/&apos;$&#123;line&#125;&apos;/pep/*.100.protein.gz&apos;</span><br><span class="line">done &gt; download_protein.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">less xiaoxie.scientific.list | while read line</span><br><span class="line">do</span><br><span class="line">echo &apos;wget -c ftp://ftp.ensembl.org/pub/release-100/fasta/&apos;$&#123;line&#125;&apos;/dna/*.dna_sm.toplevel.fa.gz&apos;</span><br><span class="line">done &gt; download_genome.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nohup sh *.sh &gt; run_wget.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ensembl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个可以下载ncbi中指定物种的基因组的脚本</title>
      <link href="/2020/05/15/%E6%9F%A5%E8%AF%A2%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BDncbi%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/05/15/%E6%9F%A5%E8%AF%A2%E4%BB%A5%E5%8F%8A%E4%B8%8B%E8%BD%BDncbi%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>RT</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for  NCBI</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#@author:shy</span></span><br><span class="line"><span class="comment"># This script is used to get genome sequence and annotation file within the taxon you want </span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests, json</span><br><span class="line"><span class="keyword">import</span> urllib.request, urllib.error</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">ap = argparse.ArgumentParser()</span><br><span class="line">ap.add_argument(<span class="string">"-q"</span>, <span class="string">"--query"</span>, required=<span class="literal">True</span>,</span><br><span class="line">help=<span class="string">"query Species/Genera/Family/Order/GCA/GCF"</span>)</span><br><span class="line"></span><br><span class="line">args = vars(ap.parse_args())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">findMarginb = re.compile(<span class="string">r'math"&gt;(.*?)&lt;/h1&gt;'</span>)</span><br><span class="line">findNcbi_id = re.compile(<span class="string">r'/assembly/(.*?)" ref='</span>)</span><br><span class="line">findSample_id = re.compile(<span class="string">r'[1-9]\d*"&gt;(.*?)&lt;/a&gt;'</span>)</span><br><span class="line">findCov = re.compile(<span class="string">r'Genome coverage: &lt;/dt&gt;&lt;dd&gt;(.*?)&lt;/dd&gt;&lt;dt&gt;'</span>)</span><br><span class="line">Seq_tech = re.compile(<span class="string">r'Sequencing technology: &lt;/dt&gt;&lt;dd&gt;(.*?)&lt;/dd&gt;'</span>)</span><br><span class="line">name_find = re.compile(<span class="string">r';unlock"&gt;(.*?)&lt;/a&gt;&lt;/dd&gt;&lt;dt&gt;'</span>)</span><br><span class="line">GCA_find = re.compile(<span class="string">r'GenBank assembly accession: &lt;/dt&gt;&lt;dd&gt;(.*?)&lt;/dd&gt;'</span>)</span><br><span class="line">GCF_find = re.compile(<span class="string">r'RefSeq assembly accession: &lt;/dt&gt;&lt;dd&gt;(.*?)&lt;/dd&gt;'</span>)</span><br><span class="line">Date_find = re.compile(<span class="string">r'Date: &lt;/dt&gt;&lt;dd&gt;(.*?)&lt;/dd&gt;'</span>)</span><br><span class="line">PRJN_find = re.compile(<span class="string">r'href="/bioproject/(.*?)/"&gt;'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    baseurl  = <span class="string">"https://www.ncbi.nlm.nih.gov/assembly/&#123;&#125;"</span>.format(args[<span class="string">"query"</span>])</span><br><span class="line">    getData(baseurl)</span><br><span class="line">    <span class="comment">#for row in NCBI_id:</span></span><br><span class="line">        <span class="comment">#new_url = "https://www.ncbi.nlm.nih.gov/assembly/&#123;&#125;/".format(row)</span></span><br><span class="line">        <span class="comment">#getSeq(new_url)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(baseurl)</span>:</span></span><br><span class="line">    datalist = []</span><br><span class="line">    data =[]</span><br><span class="line">    html = askURL(baseurl)</span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">'div'</span>,class_=<span class="string">"col margin_r0 nine_col"</span>):</span><br><span class="line">        item = str(item)</span><br><span class="line">        data.append(item)<span class="comment"># save all info which class in item</span></span><br><span class="line">        <span class="comment">#print(item)</span></span><br><span class="line">        <span class="comment">#Ncbi_id = re.findall(findNcbi_id,item)[0]</span></span><br><span class="line">        <span class="comment">#Sample_id = re.findall(findSample_id,item)[0]</span></span><br><span class="line">        <span class="comment">#print(Ncbi_id)</span></span><br><span class="line">        Cov = re.findall(findCov,item)[<span class="number">0</span>]</span><br><span class="line">        tech = re.findall(Seq_tech,item)[<span class="number">0</span>]</span><br><span class="line">        name = re.findall(name_find,item)[<span class="number">0</span>]</span><br><span class="line">        GCA = re.findall(GCA_find,item)[<span class="number">0</span>]</span><br><span class="line">        GCF = re.findall(GCF_find,item)[<span class="number">0</span>]</span><br><span class="line">        Date = re.findall(Date_find,item)[<span class="number">0</span>]</span><br><span class="line">        PRJN = re.findall(PRJN_find,item)[<span class="number">0</span>]</span><br><span class="line">        Marginb = re.findall(findMarginb,item)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print(item)</span></span><br><span class="line">        print(name+<span class="string">'\t'</span>+PRJN+<span class="string">'\t'</span>+Marginb+<span class="string">'\t'</span>+Cov+<span class="string">'\t'</span>+tech+<span class="string">'\t'</span>+GCA+<span class="string">'\t'</span>+GCF+<span class="string">'\t'</span>+Date)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> datalist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># simulate browser head info </span></span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.75 Safari/537.36"</span></span><br><span class="line">        &#125;</span><br><span class="line">    requset = urllib.request.Request(url,headers=head)</span><br><span class="line"></span><br><span class="line">    html = <span class="string">""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(requset)</span><br><span class="line">        html = response.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> hasattr(e,<span class="string">"code"</span>):</span><br><span class="line">            print(e.code)</span><br><span class="line">        <span class="keyword">if</span> hasattr(e,<span class="string">"reason"</span>):</span><br><span class="line">            print(e.reason)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ncbi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详细一点的Orthofinder，与之前英文的没区别</title>
      <link href="/2020/05/15/%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A%E7%9A%84OrthoFinder/"/>
      <url>/2020/05/15/%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A%E7%9A%84OrthoFinder/</url>
      
        <content type="html"><![CDATA[<h1 id="ortholog-identification"><a href="#ortholog-identification" class="headerlink" title="ortholog identification"></a>ortholog identification</h1><h2 id="filter-Prunella-strophiata"><a href="#filter-Prunella-strophiata" class="headerlink" title="filter Prunella strophiata"></a>filter Prunella strophiata</h2><h3 id="in-order-to-keep-gene-id-format-consistantly-use-awk-and-python-scripts-and-gffread-and-transeq-for-refomating"><a href="#in-order-to-keep-gene-id-format-consistantly-use-awk-and-python-scripts-and-gffread-and-transeq-for-refomating" class="headerlink" title="in order to keep gene id format consistantly, use awk and python scripts and gffread and transeq for refomating"></a>in order to keep gene id format consistantly, use awk and python scripts and gffread and transeq for refomating</h3><h3 id="1-gene-and-mRNA-will-cause-redirect-error-remove-first"><a href="#1-gene-and-mRNA-will-cause-redirect-error-remove-first" class="headerlink" title="1. gene and mRNA will cause redirect error, remove first"></a>1. gene and mRNA will cause redirect error, remove first</h3><h4 id="因为原始的Prunella-strophiata的注释文件中，gene-id-的格式如下"><a href="#因为原始的Prunella-strophiata的注释文件中，gene-id-的格式如下" class="headerlink" title="因为原始的Prunella strophiata的注释文件中，gene id 的格式如下"></a>因为原始的Prunella strophiata的注释文件中，gene id 的格式如下</h4><blockquote><p>contig1000      EVM     gene    23218   23970   .       +       .       ID=evm.TU.contig1000.2;Name=EVM%20prediction%20contig1000.2<br>contig1000      EVM     mRNA    23218   23970   .       +       .       ID=evm.model.contig1000.2;Parent=evm.TU.contig1000.2;Name=EVM%20predicti<br>on%20contig1000.2<br>contig1000      EVM     exon    23218   23970   .       +       .       ID=evm.model.contig1000.2.exon1;Parent=evm.model.contig1000.2<br>contig1000      EVM     CDS     23218   23970   .       +       0       ID=cds.evm.model.contig1000.2;Parent=evm.model.contig1000.2</p></blockquote><h4 id="但是为了在最终结果的-Orthogroups-中能清楚的看出来group中包含哪些物种，所以把注释文件中的-gene-id-替换为物种名加序号的格式"><a href="#但是为了在最终结果的-Orthogroups-中能清楚的看出来group中包含哪些物种，所以把注释文件中的-gene-id-替换为物种名加序号的格式" class="headerlink" title="但是为了在最终结果的 Orthogroups 中能清楚的看出来group中包含哪些物种，所以把注释文件中的 gene id 替换为物种名加序号的格式"></a>但是为了在最终结果的 Orthogroups 中能清楚的看出来group中包含哪些物种，所以把注释文件中的 gene id 替换为物种名加序号的格式</h4><h4 id="如Prunella-strophiata中的基因，需要修改命名为-Prunella-strophiata-best-assembled-1-Prunella-strophiata-best-assembled-2"><a href="#如Prunella-strophiata中的基因，需要修改命名为-Prunella-strophiata-best-assembled-1-Prunella-strophiata-best-assembled-2" class="headerlink" title="如Prunella strophiata中的基因，需要修改命名为 Prunella_strophiata_best_assembled_1, Prunella_strophiata_best_assembled_2"></a>如Prunella strophiata中的基因，需要修改命名为 Prunella_strophiata_best_assembled_1, Prunella_strophiata_best_assembled_2</h4><h4 id="因为gene和的信息内容是一致的，使用下面的命令先去除包含mrna的行"><a href="#因为gene和的信息内容是一致的，使用下面的命令先去除包含mrna的行" class="headerlink" title="因为gene和的信息内容是一致的，使用下面的命令先去除包含mrna的行"></a>因为gene和的信息内容是一致的，使用下面的命令先去除包含mrna的行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;if($3 != "mRNA")print $0&#125;' Prunella_strophiata_assemble.evm.gff3  &gt; Prunella_strophiata_assemble.remove_mRNA.gff3</span><br></pre></td></tr></table></figure><h3 id="2-replace-gene-id"><a href="#2-replace-gene-id" class="headerlink" title="2. replace gene id"></a>2. replace gene id</h3><h4 id="使用-reformat-py2-脚本去替换原始的gff3文件中的-gene-id"><a href="#使用-reformat-py2-脚本去替换原始的gff3文件中的-gene-id" class="headerlink" title="使用 reformat.py2 脚本去替换原始的gff3文件中的 gene id"></a>使用 reformat.py2 脚本去替换原始的gff3文件中的 gene id</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python reformat.py2 Prunella_strophiata_assemble.remove_mRNA.gff3 &gt;  Prunella_strophiata.best_assembled.gff3</span><br></pre></td></tr></table></figure><h4 id="修改后的注释文件如下-差别只在最后一列，这样输出还有一个目的是为了gffread软件的读取"><a href="#修改后的注释文件如下-差别只在最后一列，这样输出还有一个目的是为了gffread软件的读取" class="headerlink" title="修改后的注释文件如下,差别只在最后一列，这样输出还有一个目的是为了gffread软件的读取"></a>修改后的注释文件如下,差别只在最后一列，这样输出还有一个目的是为了gffread软件的读取</h4><blockquote><p>contig1000      EVM     gene    23218   23970   .       +       .       ID=Prunella_strophita_best_assembled_1<br>contig1000      EVM     exon    23218   23970   .       +       .       Parent=Prunella_strophita_best_assembled_1<br>contig1000      EVM     CDS     23218   23970   .       +       0       Parent=Prunella_strophita_best_assembled_1</p></blockquote><h3 id="3-extract-cds-sequence"><a href="#3-extract-cds-sequence" class="headerlink" title="3. extract cds sequence"></a>3. extract cds sequence</h3><h4 id="使用-gffread-软件，输入修改过的gff文件和基因组序列，提取出其中的cds序列，gffread在提取的时候会识别第七列的正负链信息取反向互补"><a href="#使用-gffread-软件，输入修改过的gff文件和基因组序列，提取出其中的cds序列，gffread在提取的时候会识别第七列的正负链信息取反向互补" class="headerlink" title="使用 gffread 软件，输入修改过的gff文件和基因组序列，提取出其中的cds序列，gffread在提取的时候会识别第七列的正负链信息取反向互补"></a>使用 gffread 软件，输入修改过的gff文件和基因组序列，提取出其中的cds序列，gffread在提取的时候会识别第七列的正负链信息取反向互补</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gffread Prunella_strophiata.best_assembled.gff3 -g Prunella_strophiata_assemble.fa -x Prunella_strophiata.best_assembled.cds.fa</span><br></pre></td></tr></table></figure><h3 id="4-cds2protein"><a href="#4-cds2protein" class="headerlink" title="4. cds2protein"></a>4. cds2protein</h3><h4 id="使用EMBOSS数据包中的-transeq-程序对上一步提取出来的cds序列进行翻译"><a href="#使用EMBOSS数据包中的-transeq-程序对上一步提取出来的cds序列进行翻译" class="headerlink" title="使用EMBOSS数据包中的 transeq 程序对上一步提取出来的cds序列进行翻译"></a>使用EMBOSS数据包中的 transeq 程序对上一步提取出来的cds序列进行翻译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transeq -sequence Prunella_strophiata.best_assembled.cds.fa -outseq Prunella_strophaita.best_assembled.pep.fa</span><br></pre></td></tr></table></figure><h3 id="5-remove-the-info-added-by-transeq"><a href="#5-remove-the-info-added-by-transeq" class="headerlink" title="5. remove the info added by transeq"></a>5. remove the info added by transeq</h3><h4 id="因为EMBOSS-中的-transeq-软件会对-gene-id-进行修改，将Prunella-strophiata-best-assembled-1改为了Prunella-strophiata-best-assembled-1-1"><a href="#因为EMBOSS-中的-transeq-软件会对-gene-id-进行修改，将Prunella-strophiata-best-assembled-1改为了Prunella-strophiata-best-assembled-1-1" class="headerlink" title="因为EMBOSS 中的 transeq 软件会对 gene id 进行修改，将Prunella_strophiata_best_assembled_1改为了Prunella_strophiata_best_assembled_1_1"></a>因为EMBOSS 中的 transeq 软件会对 gene id 进行修改，将Prunella_strophiata_best_assembled_1改为了Prunella_strophiata_best_assembled_1_1</h4><h4 id="所以使用sed命令去除掉gene-id末尾的-1-同时就得到了最终的蛋白文件"><a href="#所以使用sed命令去除掉gene-id末尾的-1-同时就得到了最终的蛋白文件" class="headerlink" title="所以使用sed命令去除掉gene id末尾的_1 同时就得到了最终的蛋白文件"></a>所以使用sed命令去除掉gene id末尾的_1 同时就得到了最终的蛋白文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/\(.*\)_1\(.*\)/\1\2/g' Prunella_strophiata.best_assembled.pep.fa</span><br></pre></td></tr></table></figure><h2 id="filter-Du’s-file"><a href="#filter-Du’s-file" class="headerlink" title="filter Du’s file"></a>filter Du’s file</h2><h4 id="杜老师的16个岩鹨基因组的原始注释文件中即没有包含cds的信息，也没有包含gene-id的信息"><a href="#杜老师的16个岩鹨基因组的原始注释文件中即没有包含cds的信息，也没有包含gene-id的信息" class="headerlink" title="杜老师的16个岩鹨基因组的原始注释文件中即没有包含cds的信息，也没有包含gene id的信息"></a>杜老师的16个岩鹨基因组的原始注释文件中即没有包含cds的信息，也没有包含gene id的信息</h4><h4 id="原始注释如下"><a href="#原始注释如下" class="headerlink" title="原始注释如下"></a>原始注释如下</h4><blockquote><p>C26941125       exonerate:protein2genome:local  gene    1346    2626    1492    -       .       gene_id 1 ; sequence evm.model.contig1003.2 ; gene_orientation + ; identity 99.30 ; similarity 99.30<br>C26941125       exonerate:protein2genome:local  exon    2490    2626    .       -       .       insertions 0 ; deletions 0 ; identity 95.56 ; similarity 95.56<br>C26941125       exonerate:protein2genome:local  intron  2378    2489    .       -       .       intron_id 1<br>C26941125       exonerate:protein2genome:local  exon    2235    2377    .       -       .       insertions 0 ; deletions 1 ; identity 100.00 ; similarity 100.00 ; frameshifts 2<br>C26941125       exonerate:protein2genome:local  intron  2148    2234    .       -       .       intron_id 2<br>C26941125       exonerate:protein2genome:local  exon    2116    2147    .       -       .       insertions 0 ; deletions 0 ; identity 100.00 ; similarity 100.00<br>C26941125       exonerate:protein2genome:local  intron  1897    2115    .       -       .       intron_id 3<br>C26941125       exonerate:protein2genome:local  exon    1346    1896    .       -       .       insertions 0 ; deletions 0 ; identity 100.00 ; similarity 100.00<br>scaffold175008  exonerate:protein2genome:local  gene    1423    2438    1202    +       .       gene_id 1 ; sequence evm.model.contig1003.1 ; gene_orientation + ; identity 89.45 ; similarity 89.84<br>scaffold175008  exonerate:protein2genome:local  exon    1423    2014    .       +       .       insertions 0 ; deletions 0 ; identity 86.80 ; similarity 86.80<br>scaffold175008  exonerate:protein2genome:local  intron  2015    2259    .       +       .       intron_id 1<br>scaffold175008  exonerate:protein2genome:local  exon    2260    2438    .       +       .       insertions 0 ; deletions 0 ; identity 98.31 ; similarity 100.00</p></blockquote><h4 id="所以首先要做的是先添加gene-id的信息，然后再根据注释文件中的exon的位置信息，提取出所有转录本"><a href="#所以首先要做的是先添加gene-id的信息，然后再根据注释文件中的exon的位置信息，提取出所有转录本" class="headerlink" title="所以首先要做的是先添加gene id的信息，然后再根据注释文件中的exon的位置信息，提取出所有转录本"></a>所以首先要做的是先添加gene id的信息，然后再根据注释文件中的exon的位置信息，提取出所有转录本</h4><h4 id="再用transdecoder软件，对所有的转录本去预测ORF，得到最长ORF"><a href="#再用transdecoder软件，对所有的转录本去预测ORF，得到最长ORF" class="headerlink" title="再用transdecoder软件，对所有的转录本去预测ORF，得到最长ORF"></a>再用transdecoder软件，对所有的转录本去预测ORF，得到最长ORF</h4><h3 id="1-get-cdna-file-and-transdecoder-commands"><a href="#1-get-cdna-file-and-transdecoder-commands" class="headerlink" title="1. get cdna file and transdecoder commands"></a>1. get cdna file and transdecoder commands</h3><h3 id="This-step-aims-at-reformat-16-genome-annotation-of-Du-by-adding-gene-id"><a href="#This-step-aims-at-reformat-16-genome-annotation-of-Du-by-adding-gene-id" class="headerlink" title="This step aims at reformat 16 genome annotation of Du by adding gene id"></a>This step aims at reformat 16 genome annotation of Du by adding gene id</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls *gff3 | sed 's/.gff3//g' | while read line;</span><br><span class="line">do python reformat.py $&#123;line&#125;.gff3  &gt; $&#123;line&#125;.refomat.gff3;</span><br><span class="line">gffread $&#123;line&#125;.refomat.gff3 -g $&#123;line&#125;.fa  -w $&#123;line&#125;.cdna.fa;</span><br><span class="line">echo "TransDecoder.LongOrfs -t "$&#123;line&#125;".cdna.fa &amp;" &gt;&gt; run_TransDecoder.LongOrfs.sh</span><br><span class="line">echo "TransDecoder.Predict -t "$&#123;line&#125;".cdna.fa &amp;" &gt;&gt; run_TransDecoder.Predict.sh</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="在上面的循环中，执行了4个循环的命令，在下面分四个说明"><a href="#在上面的循环中，执行了4个循环的命令，在下面分四个说明" class="headerlink" title="在上面的循环中，执行了4个循环的命令，在下面分四个说明"></a>在上面的循环中，执行了4个循环的命令，在下面分四个说明</h4><h4 id="1-使用reformat-py脚本修改gene-id的格式"><a href="#1-使用reformat-py脚本修改gene-id的格式" class="headerlink" title="1. 使用reformat.py脚本修改gene id的格式"></a>1. 使用reformat.py脚本修改gene id的格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python reformat.py $&#123;line&#125;.gff3  &gt; $&#123;line&#125;.refomat.gff3;</span><br></pre></td></tr></table></figure><h4 id="reformat-py-脚本如下，各部分代表的意义与上面的-reformat-py2-类似"><a href="#reformat-py-脚本如下，各部分代表的意义与上面的-reformat-py2-类似" class="headerlink" title="reformat.py 脚本如下，各部分代表的意义与上面的 reformat.py2 类似"></a>reformat.py 脚本如下，各部分代表的意义与上面的 reformat.py2 类似</h4><h4 id="修改后的gff文件格式如下，差别只在最后一列"><a href="#修改后的gff文件格式如下，差别只在最后一列" class="headerlink" title="修改后的gff文件格式如下，差别只在最后一列"></a>修改后的gff文件格式如下，差别只在最后一列</h4><blockquote><p>C26941125       exonerate:protein2genome:local  gene    1346    2626    1492    -       .       ID=Prunella_atrogularis_141230_1<br>C26941125       exonerate:protein2genome:local  exon    2490    2626    .       -       .       Parent=Prunella_atrogularis_141230_1<br>C26941125       exonerate:protein2genome:local  intron  2378    2489    .       -       .       Parent=Prunella_atrogularis_141230_1<br>C26941125       exonerate:protein2genome:local  exon    2235    2377    .       -       .       Parent=Prunella_atrogularis_141230_1<br>C26941125       exonerate:protein2genome:local  intron  2148    2234    .       -       .       Parent=Prunella_atrogularis_141230_1<br>C26941125       exonerate:protein2genome:local  exon    2116    2147    .       -       .       Parent=Prunella_atrogularis_141230_1<br>C26941125       exonerate:protein2genome:local  intron  1897    2115    .       -       .       Parent=Prunella_atrogularis_141230_1<br>C26941125       exonerate:protein2genome:local  exon    1346    1896    .       -       .       Parent=Prunella_atrogularis_141230_1</p></blockquote><h4 id="2-使用gffread提取exons组成的cdna序列"><a href="#2-使用gffread提取exons组成的cdna序列" class="headerlink" title="2.使用gffread提取exons组成的cdna序列"></a>2.使用gffread提取exons组成的cdna序列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gffread $&#123;line&#125;.refomat.gff3 -g $&#123;line&#125;.fa  -w $&#123;line&#125;.cdna.fa;</span><br></pre></td></tr></table></figure><h4 id="3-与-4-的命令的目的就是生成TransDecoder软件所诉需要的命令行，即软件名字-cdna序列名字"><a href="#3-与-4-的命令的目的就是生成TransDecoder软件所诉需要的命令行，即软件名字-cdna序列名字" class="headerlink" title="3. 与 4. 的命令的目的就是生成TransDecoder软件所诉需要的命令行，即软件名字+cdna序列名字"></a>3. 与 4. 的命令的目的就是生成TransDecoder软件所诉需要的命令行，即软件名字+cdna序列名字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;TransDecoder.LongOrfs -t &quot;$&#123;line&#125;&quot;.cdna.fa &amp;&quot; &gt;&gt; run_TransDecoder.LongOrfs.sh</span><br><span class="line">echo &quot;TransDecoder.Predict -t &quot;$&#123;line&#125;&quot;.cdna.fa &amp;&quot; &gt;&gt; run_TransDecoder.Predict.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2. use TransDecoder to predict ORF region</span><br><span class="line">#### 运行上一步保存的命令行，TransDecoder使用cdna序列预测cds序列</span><br><span class="line">nohup sh run_TransDecoder.LongOrfs.sh &gt; run_TransDecoder.LongOrfs.log</span><br><span class="line">nohup sh run_TransDecoder.Predict.sh &gt; run_TransDecoder.Predict.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3. generate longest transcripts and remove duplicated sequence in pep file</span><br><span class="line">```shell</span><br><span class="line">ls *.transdecoder.pep | while read line</span><br><span class="line">do</span><br><span class="line">/usr/bin/perl retrive_longest_splicing_variant.pl $&#123;line&#125; longest.$&#123;line&#125;</span><br><span class="line">/usr/bin/perl rm_dup_fasta.pl longest.$&#123;line&#125; temp.longest.$&#123;line&#125;</span><br><span class="line">awk -F &apos;#&apos; &apos;&#123;if($0 ~&quot;^&gt;&quot;)&#123;print $1&#125;else&#123;print $0&#125;&#125;&apos; temp.$&#123;line&#125; &gt;   final.$&#123;line&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="在上面的循环中，执行了3个循环的命令，在下面分三个说明"><a href="#在上面的循环中，执行了3个循环的命令，在下面分三个说明" class="headerlink" title="在上面的循环中，执行了3个循环的命令，在下面分三个说明"></a>在上面的循环中，执行了3个循环的命令，在下面分三个说明</h4><h4 id="1-对TransDecoder的结果中的蛋白文件进行提取最长转录本"><a href="#1-对TransDecoder的结果中的蛋白文件进行提取最长转录本" class="headerlink" title="1. 对TransDecoder的结果中的蛋白文件进行提取最长转录本"></a>1. 对TransDecoder的结果中的蛋白文件进行提取最长转录本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/perl retrive_longest_splicing_variant.pl $&#123;line&#125; longest.$&#123;line&#125;</span><br></pre></td></tr></table></figure><h4 id="2-对TransDecoder的结果中的蛋白文件进行去重复"><a href="#2-对TransDecoder的结果中的蛋白文件进行去重复" class="headerlink" title="2. 对TransDecoder的结果中的蛋白文件进行去重复"></a>2. 对TransDecoder的结果中的蛋白文件进行去重复</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/perl rm_dup_fasta.pl longest.$&#123;line&#125; temp.longest.$&#123;line&#125;</span><br></pre></td></tr></table></figure><h4 id="3-对蛋白文件的gene-id进行修改，将冗余的部分去掉"><a href="#3-对蛋白文件的gene-id进行修改，将冗余的部分去掉" class="headerlink" title="3. 对蛋白文件的gene id进行修改，将冗余的部分去掉"></a>3. 对蛋白文件的gene id进行修改，将冗余的部分去掉</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F '#' '&#123;if($0 ~"^&gt;")&#123;print $1&#125;else&#123;print $0&#125;&#125;' temp.$&#123;line&#125; &gt;   final.$&#123;line&#125;</span><br></pre></td></tr></table></figure><h2 id="filter-BGI-file"><a href="#filter-BGI-file" class="headerlink" title="filter BGI file"></a>filter BGI file</h2><h3 id="因为BGI的gff注释文件中，已经有了原始的基因名，所以先提取出原始的基因名，再添加一个对应的基因名，再将原始的注释文件替换"><a href="#因为BGI的gff注释文件中，已经有了原始的基因名，所以先提取出原始的基因名，再添加一个对应的基因名，再将原始的注释文件替换" class="headerlink" title="因为BGI的gff注释文件中，已经有了原始的基因名，所以先提取出原始的基因名，再添加一个对应的基因名，再将原始的注释文件替换"></a>因为BGI的gff注释文件中，已经有了原始的基因名，所以先提取出原始的基因名，再添加一个对应的基因名，再将原始的注释文件替换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls *BGI*  | while read line</span><br><span class="line">do</span><br><span class="line">grep '&gt;' $&#123;line&#125;.pep | sed 's/&gt;//g' &gt; $&#123;line&#125;.modify.seqid</span><br><span class="line">awk '&#123;if($3 =="gene")&#123;a=index($0,"~~");b=index($0,";");print substr($0,a+2,b-a-2)&#125;&#125;' &gt; $&#123;line&#125;.origin.seqid</span><br><span class="line">paste -d '\t' $&#123;line&#125;.origin.seqid $&#123;line&#125;.modify.seqid &gt; $&#123;line&#125;_coress.seqid</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">python  replace_gff_gene_id.py Prunella_fulvescens_BGI_coress.seqid Prunella_fulvescens.homolog.gff &gt; Prunella_fulvescens.modify.gff3</span><br><span class="line">python  replace_gff_gene_id.py Prunella_himalayana_BGI_coress.seqid Prunella_himalayana.homolog.gff &gt;  Prunella_himalayana.modify.gff3</span><br></pre></td></tr></table></figure><h2 id="download-Gallus-genome-from-Ensembl-database-and-remove-reduant-transcripts"><a href="#download-Gallus-genome-from-Ensembl-database-and-remove-reduant-transcripts" class="headerlink" title="download Gallus genome from Ensembl database and remove reduant transcripts"></a>download Gallus genome from Ensembl database and remove reduant transcripts</h2><h3 id="1-下载人和鸡的蛋白序列"><a href="#1-下载人和鸡的蛋白序列" class="headerlink" title="1. 下载人和鸡的蛋白序列"></a>1. 下载人和鸡的蛋白序列</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://ftp.ensembl.org/pub/release-100/fasta/gallus_gallus/pep/Gallus_gallus.GRCg6a.pep.all.fa.gz</span><br><span class="line">gunzip Gallus_gallus.GRCg6a.pep.all.fa.gz</span><br><span class="line"></span><br><span class="line">wget ftp://ftp.ensembl.org/pub/release-100/fasta/homo_sapiens/pep/Homo_sapiens.GRCh38.pep.all.fa.gz</span><br><span class="line">gunzip Homo_sapiens.GRCh38.pep.all.fa.gz</span><br></pre></td></tr></table></figure><h3 id="2-过滤掉同一gene-id中短的mrna序列"><a href="#2-过滤掉同一gene-id中短的mrna序列" class="headerlink" title="2. 过滤掉同一gene id中短的mrna序列"></a>2. 过滤掉同一gene id中短的mrna序列</h3><h3 id="retrive-longest-transcripts-from-above-protein-fasta-file"><a href="#retrive-longest-transcripts-from-above-protein-fasta-file" class="headerlink" title="retrive longest transcripts from above protein fasta file"></a>retrive longest transcripts from above protein fasta file</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls *fa | while read line</span><br><span class="line">do</span><br><span class="line">python ~/software/OrthoFinder/tools/primary_transcript.py $&#123;line&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="CORE-PROGRAM"><a href="#CORE-PROGRAM" class="headerlink" title="CORE PROGRAM"></a>CORE PROGRAM</h1><h2 id="run-OrthoFinder-and-get-the-Orthogroups"><a href="#run-OrthoFinder-and-get-the-Orthogroups" class="headerlink" title="run OrthoFinder and get the Orthogroups"></a>run OrthoFinder and get the Orthogroups</h2><h3 id="将上述所有蛋白序列文件作为输入去预测Orthogroups"><a href="#将上述所有蛋白序列文件作为输入去预测Orthogroups" class="headerlink" title="将上述所有蛋白序列文件作为输入去预测Orthogroups"></a>将上述所有蛋白序列文件作为输入去预测Orthogroups</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/software/OrthoFinder/orthofinder -f pep -S diamond</span><br></pre></td></tr></table></figure><h2 id="published-info"><a href="#published-info" class="headerlink" title="published info"></a>published info</h2><h3 id="OrthoFinder发表在GB的文章，引用次数一年内已经有69次"><a href="#OrthoFinder发表在GB的文章，引用次数一年内已经有69次" class="headerlink" title="OrthoFinder发表在GB的文章，引用次数一年内已经有69次"></a>OrthoFinder发表在GB的文章，引用次数一年内已经有69次</h3><blockquote><p>Emms D.M. &amp; Kelly S. OrthoFinder: phylogenetic orthology inference for comparative<br>genomics (2019), Genome Biology 20:238</p></blockquote><h2 id="use-longest-transcripts-gene-ids-filter-gff-file-and-get-intron-sequences"><a href="#use-longest-transcripts-gene-ids-filter-gff-file-and-get-intron-sequences" class="headerlink" title="use longest transcripts gene ids filter gff file and get intron sequences"></a>use longest transcripts gene ids filter gff file and get intron sequences</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">less *.seqid |sed 's/seqid//g'| while read line</span><br><span class="line">do cat $&#123;line&#125; | while read row</span><br><span class="line">grep -w $&#123;row&#125; $&#123;line&#125;.gff3</span><br><span class="line">done &gt; $&#123;line&#125;.reformat.gff3</span><br><span class="line">/usr/bin/perl extract_intron_from_gff3_based_on_exon.pl $&#123;line&#125;.fa $&#123;line&#125;.reformat.gff3 $&#123;line&#125;.intron.fa</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Ortholog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OrthoFinder 寻找同源基因</title>
      <link href="/2020/05/15/OrthoFinde/"/>
      <url>/2020/05/15/OrthoFinde/</url>
      
        <content type="html"><![CDATA[<h1 id="ortholog-identification"><a href="#ortholog-identification" class="headerlink" title="ortholog identification"></a>ortholog identification</h1><h2 id="in-order-to-keep-gene-id-format-consistantly-use-awk-and-python-and-gffread-and-transeq-for-refomating"><a href="#in-order-to-keep-gene-id-format-consistantly-use-awk-and-python-and-gffread-and-transeq-for-refomating" class="headerlink" title="in order to keep gene id format consistantly,use awk and python and gffread and transeq for refomating"></a>in order to keep gene id format consistantly,use awk and python and gffread and transeq for refomating</h2><h3 id="base-pipeline"><a href="#base-pipeline" class="headerlink" title="base pipeline"></a>base pipeline</h3><h3 id="1-gene-and-mRNA-will-cause-redirect-error-remove-first"><a href="#1-gene-and-mRNA-will-cause-redirect-error-remove-first" class="headerlink" title="1. gene and mRNA will cause redirect error, remove first"></a>1. gene and mRNA will cause redirect error, remove first</h3><p>awk ‘{if($3 != “mRNA”)print $0}’ Prunella_strophita_assemble.evm.gff3  &gt; Prunella_strophita_assemble.remove_mRNA.gff3</p><h3 id="2-replace-gene-id"><a href="#2-replace-gene-id" class="headerlink" title="2. replace gene id"></a>2. replace gene id</h3><p>python reformat.py2 Prunella_strophita_assemble.remove_mRNA.gff3 &gt;  Prunella_strophita.best_assembled.gff3</p><h3 id="3-extract-cds-sequence"><a href="#3-extract-cds-sequence" class="headerlink" title="3. extract cds sequence"></a>3. extract cds sequence</h3><p>gffread Prunella_strophita.best_assembled.gff3 -g Prunella_strophita_assemble.fa -x Prunella_strophita.best_assembled.cds.fa</p><h3 id="4-cds2protein"><a href="#4-cds2protein" class="headerlink" title="4. cds2protein"></a>4. cds2protein</h3><p>transeq -sequence Prunella_strophita.best_assembled.cds.fa -outseq Prunella_strophita.best_assembled.pep.fa</p><h3 id="5-remove-the-info-added-by-transeq"><a href="#5-remove-the-info-added-by-transeq" class="headerlink" title="5. remove the info added by transeq"></a>5. remove the info added by transeq</h3><p>sed -i ‘s/(.<em>)_1(.</em>)/\1\2/g’ Prunella_strophita.best_assembled.pep.fa</p><h2 id="shell-pipeline"><a href="#shell-pipeline" class="headerlink" title="shell pipeline"></a>shell pipeline</h2><p>ls *gff3 | sed ‘s/.gff3//g’ | while read line;<br>do python reformat.py ${line}.gff3  &gt; ${line}.refomat.gff3;<br>gffread ${line}.refomat.gff3 -g ${line}.fa  -w ${line}.cdna.fa;<br>echo “TransDecoder.LongOrfs -t “${line}”.cdna.fa &amp;” &gt;&gt; run_TransDecoder.LongOrfs.sh<br>echo “TransDecoder.Predict -t “${line}”.cdna.fa &amp;” &gt;&gt; run_TransDecoder.Predict.sh<br>done</p><h1 id="use-TransDecoder-to-predict-ORF-region"><a href="#use-TransDecoder-to-predict-ORF-region" class="headerlink" title="use TransDecoder to predict ORF region"></a>use TransDecoder to predict ORF region</h1><p>nohup sh run_TransDecoder.LongOrfs.sh &gt; run_TransDecoder.LongOrfs.log<br>nohup sh run_TransDecoder.Predict.sh &gt; run_TransDecoder.Predict.log</p><h1 id="generate-longest-transcripts-and-remove-duplicated-sequence-in-pep-file"><a href="#generate-longest-transcripts-and-remove-duplicated-sequence-in-pep-file" class="headerlink" title="generate longest transcripts and remove duplicated sequence in pep file"></a>generate longest transcripts and remove duplicated sequence in pep file</h1><p>ls *.transdecoder.pep | while read line<br>do<br>/usr/bin/perl retrive_longest_splicing_variant.pl ${line} longest.${line}<br>/usr/bin/perl rm_dup_fasta.pl longest.${line} temp.longest.${line}<br>awk -F ‘#’ ‘{if($0 ~”^&gt;”){print $1}else{print $0}}’ temp.${line} &gt;   final.${line}<br>done </p><h1 id="rename-file"><a href="#rename-file" class="headerlink" title="rename file"></a>rename file</h1><p>rename .cdna.fa.transdecoder.pep .pep.fa <em>.cdna.fa.transdecoder.pep<br>rename final.longest.P P final.longest.Prunella_</em></p><h2 id="download-Gallus-genome-from-Ensembl-database-and-remove-reduant-transcripts"><a href="#download-Gallus-genome-from-Ensembl-database-and-remove-reduant-transcripts" class="headerlink" title="download Gallus genome from Ensembl database and remove reduant transcripts"></a>download Gallus genome from Ensembl database and remove reduant transcripts</h2><p>wget <a href="ftp://ftp.ensembl.org/pub/release-100/fasta/gallus_gallus/pep/Gallus_gallus.GRCg6a.pep.all.fa.gz" target="_blank" rel="noopener">ftp://ftp.ensembl.org/pub/release-100/fasta/gallus_gallus/pep/Gallus_gallus.GRCg6a.pep.all.fa.gz</a><br>gunzip Gallus_gallus.GRCg6a.pep.all.fa.gz</p><p>python ~/software/OrthoFinder/tools/primary_transcript.py Gallus_gallus.GRCg6a.pep.all.fa<br>mv /home/sunhaoyun/data/Prunella_genome/primary_transcripts/Gallus_gallus.GRCg6a.pep.all.fa Gallus.pep.fa</p><h2 id="run-OrthoFinder"><a href="#run-OrthoFinder" class="headerlink" title="run OrthoFinder"></a>run OrthoFinder</h2><p>~/software/OrthoFinder/orthofinder -f pep -S diamond</p><h1 id="analyse-result"><a href="#analyse-result" class="headerlink" title="analyse result"></a>analyse result</h1><h3 id="1-overview-how-many-genes-were-assigned-to-orthogroups"><a href="#1-overview-how-many-genes-were-assigned-to-orthogroups" class="headerlink" title="1. overview how many genes were assigned to orthogroups"></a>1. overview how many genes were assigned to orthogroups</h3><h4 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h4><p>/home/public/Prunella/Prunella_genome/Sunhaoyun_genome/Prunella_sp19_with_Gallus/Comparative_Genomics_Statistics/Statistics_Overall.tsv</p><h3 id="2-check-the-percentages-on-a-per-species-basis-here"><a href="#2-check-the-percentages-on-a-per-species-basis-here" class="headerlink" title="2. check the percentages on a per species basis here"></a>2. check the percentages on a per species basis here</h3><h4 id="PATH-1"><a href="#PATH-1" class="headerlink" title="PATH"></a>PATH</h4><p>/home/public/Prunella/Prunella_genome/Sunhaoyun_genome/OrthoFinder/Prunella_sp19_with_Gallus/CComparative_Genomics_Statistics/Statistics_PerSpecies.tsv</p><h3 id="3-species-tree"><a href="#3-species-tree" class="headerlink" title="3. species tree"></a>3. species tree</h3><p>####PATH<br>/home/public/Prunella/Prunella_genome/Sunhaoyun_genome/OrthoFinder/Prunella_sp19_with_Gallus/Species_Tree/SpeciesTree_rooted.txt</p><h3 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h3><h3 id="This-speceis-tree-may-have-some-error"><a href="#This-speceis-tree-may-have-some-error" class="headerlink" title="This speceis tree may have some error"></a>This speceis tree may have some error</h3><h3 id="If-the-species-tree-is-not-correct-then-this-will-not-impact-the-orthogroup-inference"><a href="#If-the-species-tree-is-not-correct-then-this-will-not-impact-the-orthogroup-inference" class="headerlink" title="If the species tree is not correct then this will not impact the orthogroup inference,"></a>If the species tree is not correct then this will not impact the orthogroup inference,</h3><h3 id="but-it-might-affect-the-orthologue-inference-in-some-of-the-gene-trees-which-have-gene-duplication-events"><a href="#but-it-might-affect-the-orthologue-inference-in-some-of-the-gene-trees-which-have-gene-duplication-events" class="headerlink" title="but it might affect the orthologue inference in some of the gene trees which have gene duplication events."></a>but it might affect the orthologue inference in some of the gene trees which have gene duplication events.</h3><h3 id="4-find-out-Gallus-orthologues-are-in-the-other-speceis"><a href="#4-find-out-Gallus-orthologues-are-in-the-other-speceis" class="headerlink" title="4. find out Gallus orthologues are in  the other speceis"></a>4. find out Gallus orthologues are in  the other speceis</h3><h4 id="such-as-methyltransferase-like-21C-gene-METTL21C-plays-an-important-role-in-chicken-muscle-development"><a href="#such-as-methyltransferase-like-21C-gene-METTL21C-plays-an-important-role-in-chicken-muscle-development" class="headerlink" title="such as methyltransferase-like 21C gene (METTL21C) plays an important role in chicken muscle development"></a>such as methyltransferase-like 21C gene (METTL21C) plays an important role in chicken muscle development</h4><h4 id="GgMETTL21C1-corresponding-gene-id-is-ENSGALG00000001790-6"><a href="#GgMETTL21C1-corresponding-gene-id-is-ENSGALG00000001790-6" class="headerlink" title="GgMETTL21C1 corresponding gene id is ENSGALG00000001790.6"></a>GgMETTL21C1 corresponding gene id is ENSGALG00000001790.6</h4><h4 id="PATH-2"><a href="#PATH-2" class="headerlink" title="PATH"></a>PATH</h4><p>/home/public/Prunella/Prunella_genome/Sunhaoyun_genome/OrthoFinder/Prunella_sp19_with_Gallus/Orthologues/Orthologues_Gallus.pep/</p><p>ls *tsv | while read line; do grep ‘ENSGALG00000001790.6’ ${line}; done</p><h3 id="5-Orthogroups-comparisons-across-a-clade-of-species"><a href="#5-Orthogroups-comparisons-across-a-clade-of-species" class="headerlink" title="5. Orthogroups comparisons across a clade of species"></a>5. Orthogroups comparisons across a clade of species</h3><h4 id="overview-file-PATH"><a href="#overview-file-PATH" class="headerlink" title="overview file PATH"></a>overview file PATH</h4><p>/home/public/Prunella/Prunella_genome/Sunhaoyun_genome/OrthoFinder/Prunella_sp19_with_Gallus/Orthogroups/Orthogroups.tsv</p><h4 id="For-each-orthogroup-there-is-a-FASTA-file-in"><a href="#For-each-orthogroup-there-is-a-FASTA-file-in" class="headerlink" title="For each orthogroup there is a FASTA file in"></a>For each orthogroup there is a FASTA file in</h4><p>/home/public/Prunella/Prunella_genome/Sunhaoyun_genome/OrthoFinder/Prunella_sp19_with_Gallus/Orthogroup_Sequences</p><h4 id="which-contains-the-sequences-for-the-genes-in-that-orthogroup"><a href="#which-contains-the-sequences-for-the-genes-in-that-orthogroup" class="headerlink" title="which contains the sequences for the genes in that orthogroup."></a>which contains the sequences for the genes in that orthogroup.</h4><h2 id="Other-scipts"><a href="#Other-scipts" class="headerlink" title="Other scipts"></a>Other scipts</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># reformat.py</span><br><span class="line">import sys</span><br><span class="line">i=1</span><br><span class="line">with open(sys.argv[1]) as input_gff:</span><br><span class="line">    sp_name = input_gff.name.replace(&apos;.gff3&apos;,&apos;&apos;)</span><br><span class="line">    for row in input_gff:</span><br><span class="line">        lst1 = row.split(&apos;\t&apos;)</span><br><span class="line">        if &quot;gene_id&quot; in lst1[8]:</span><br><span class="line">            lst1[8] = &quot;ID=&quot;+sp_name+&quot;_&quot;+str(i)</span><br><span class="line">            new_list=&apos;\t&apos;.join(lst1)</span><br><span class="line">            print(new_list)</span><br><span class="line">            i+=1</span><br><span class="line">        else:</span><br><span class="line">            lst1[8] = &quot;Parent=&quot;+sp_name+&quot;_&quot;+str(i-1)</span><br><span class="line">            new_list=&apos;\t&apos;.join(lst1)</span><br><span class="line">            print(new_list)</span><br><span class="line">```python</span><br></pre></td></tr></table></figure><p>#reformat.py2<br>import sys<br>i=1<br>with open(sys.argv[1]) as input_gff:<br>    sp_name = input_gff.name.replace(‘assemble.remove_mRNA.gff3’,’best_assembled’)<br>    for row in input_gff:<br>        lst1 = row.split(‘\t’)<br>        if “TU” in lst1[8]:<br>            lst1[8] = “ID=”+sp_name+”<em>“+str(i)<br>            new_list=’\t’.join(lst1)<br>            print(new_list)<br>            i+=1<br>        else:<br>            lst1[8] = “Parent=”+sp_name+”</em>“+str(i-1)<br>            new_list=’\t’.join(lst1)<br>            print(new_list)</p><pre><code class="python"></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> OrthoFinder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAML and MCScanX-transposed</title>
      <link href="/2020/05/15/PAML/"/>
      <url>/2020/05/15/PAML/</url>
      
        <content type="html"><![CDATA[<p>通常师姐她们做的PAML选择压力检验 是为了分析一个基因，或者多个基因串联，构建的系统发育树中，收选择的物种是谁，在不同的物种当中是否具有不同的选择方向。</p><p>意思也就是在这篇文章中Molecular Evolution of the TET Gene Family in Mammals，TET有三个直系同源基因，然后把这三个基因对应的20个物种分别建树，先用sites model中的模型M0（假设比对中所有密码子位点都为一个ω）看每个基因的进化速率</p><p>Selection pressure causes differentiation of the SPL gene family in the Juglandaceae</p><p>这一篇用branch sites model的</p><p>branch sites model 是相对于集合了branch model和sites model的，因为他允许了在model中sites的omega值不同的同时也允许了branch的omega也不相同。即反馈到ctl文件中就是 Model =2 Nsite =2，代表了branch model中的foreground ： background 和Sites Model中的M2 model W0 = 0 ;W1 = 1; W2 &gt; 1</p><p>对于ModelA和ModelA null 的比较，Null 在检测中强制fix omega =1，就代表着backgroud的sites均处于negative selection,.foreground中的sites均处于neutral selection 而在modelA中 foreground 的sites全部处于positive selection </p><p>但是但是但是 PAML这个软件的目的就是检测正选择，而当输入的序列过于相似的时候，很少量的正选择的位点就很难反馈到模型上，十分容易造成正选择模型和凌假设模型差异不显著</p><p>NOTE:NG86 assumes no transition-transversion rate difference and no codon usage bias.</p><p>####1.WGD</p><p>Whole-genome duplications (WGDs) have occurred in thelineages of plants [1], animals [2,3] and fungi [4,5], with possibleconsequences including evolution of novel or modified genefunctions [6,7,8,9], and/or provision of ‘‘buffer capacity’’ [10,11]or  genetic  redundancy  that  increases  genetic  robustness[12,13,14,15,16,17].  Genome  duplication  may  also  increaseopportunities for nonreciprocal recombination [18,19,20], permit-ting or causing duplicated genes to evolve in concert for a period oftime. Rapid DNA loss and restructuring of low-copy DNA[21,22,23,24], retrotransposon activation [25,26,27] and epigeneticchanges [28,29,30,31,32,33] following WGD may further providematerials for evolutionary change</p><p>全基因组重复，基因组复制也可能增加不可逆重组的机会[18，19，20]，允许或导致复制的基因在一段时间内协同进化</p><p>####2.Tandem and Proximal</p><p>Tandem duplicates  are  consecutive  in  the  genome  while  proximal duplicates are near one another but separated by a few gene</p><p>These two gene duplication modes are presumed to arise throughunequal crossing over [36] or localized transposon activitie</p><p>####3.Dispersed</p><p>Dispersed duplicates are neither adjacent to each other in thegenome nor within homeologous chromosome segments </p><p>####4.Transposed</p><p>DNA  transposons  such  aspackmules  (rice)  [39],  helitrons  (maize)  [40],  and  CACTAelements (sorghum) [27] may relocate duplicated genes or genesegments to new chromosomal positions (referred to as DNA basedtransposed duplication). RNA based transposed duplication, oftenreferred to as retrotransposition, typically creates a single-exonretrocopy from a multi-exon parental gene, by reverse transcrip-tion of a spliced messenger RNA. It is presumed that the retrocopyduplicates only the transcribed sequence of the parental gene,detached from the parental promoter. The new retrogene is oftendeposited in a novel chromosomal environment with new (i.e. non-ancestral) neighboring genes and, having lost its native promoter,is only likely to survive as a functional gene if a new promoter is acquired [41,42]</p><p>NOTE！</p><p>A transposed duplicate pairs must be meet the following criteria: one gene existed in its ancestral locus, and the other was located in a non-ancestral locus (<a href="https://www.frontiersin.org/articles/10.3389/fpls.2018.00161/full#B87" target="_blank" rel="noopener">Wang Y. et al., 2011</a>).</p><p>NOTE！</p><p>If a pair of transposed duplicated genes comprised an ancestral gene with more than two exons and a novel transposed copy without an intron, then this pair was inferred to be derived from RNA-based transposition (retro transposition).</p>]]></content>
      
      
      
        <tags>
            
            <tag> gene duplication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blast + Hmmsearch 鉴定一个基因家族</title>
      <link href="/2020/04/29/identify/"/>
      <url>/2020/04/29/identify/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hmmsearch -o trifida.hmmsearch.log --tblout trifida.hmmsearch.tblout MIP.hmm  longest.trifida.pep.fa</span><br><span class="line"></span><br><span class="line">awk '&#123;if ($1!~/^#/)print $1&#125;' trifida.hmmsearch.tblout &gt; trifida.hmmsearch.seqid</span><br><span class="line"></span><br><span class="line">makeblastdb -in longest.trifida.pep.fa   -title trifida -dbtype prot -parse_seqids -out trifida</span><br><span class="line"></span><br><span class="line">blastp -db trifida -query at.MIP.pep.fa -evalue 1e-3 -outfmt 6 &gt; trifida.blastp</span><br><span class="line"></span><br><span class="line">awk '&#123;print $2&#125;' trifida.blastp | sort | uniq &gt; trifida.blastp.seqid</span><br><span class="line"></span><br><span class="line">cat trifida.hmmsearch.seqid trifida.blastp.seqid | sort | uniq &gt; trifida.MIP.seqid</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> gene family </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ggsci自动生成适合学术期刊的配色</title>
      <link href="/2020/04/22/Nature%20%E9%85%8D%E8%89%B2%E9%A3%8E%E6%A0%BCpal_npg/"/>
      <url>/2020/04/22/Nature%20%E9%85%8D%E8%89%B2%E9%A3%8E%E6%A0%BCpal_npg/</url>
      
        <content type="html"><![CDATA[<p>最近做了很多图被说不好看。想到ggsci可以自动给分组添加颜色，就想看看他可不可以把颜色的十六进制码输出出来，然后发现是有这个函数的。</p><p>ggsci提供以下颜色</p><blockquote><p>Name    Scales    Palette Types    Palette Generator</p><p>NPG    scale_color_npg() scale_fill_npg()    “nrc”    pal_npg()</p><p>AAAS    scale_color_aaas() scale_fill_aaas()    “default”    pal_aaas()</p><p>NEJM    scale_color_nejm() scale_fill_nejm()    “default”    pal_nejm()</p><p>Lancet    scale_color_lancet() scale_fill_lancet()    “lanonc”    pal_lancet()</p><p>JAMA    scale_color_jama() scale_fill_jama()    “default”    pal_jama()</p><p>JCO    scale_color_jco() scale_fill_jco()    “default”    pal_jco()</p><p>UCSCGB    scale_color_ucscgb() scale_fill_ucscgb()    “default”    pal_ucscgb()</p><p>D3    scale_color_d3()</p></blockquote><a id="more"></a> <p>library(ggsci)<br>library(scales)</p><p>###Nature 配色风格pal_npg</p><p>npg_pal &lt;- pal_npg(“nrc”)(8) #函数中types没有测试有什么功能，可能控制了基础类型，如bright warm等，alpha可以修改颜色的透明度，具体反映在十六进制颜色代码后。如#FF0000为红色#FF0000FF为透明度为1的红色，#FF0000E5为透明度为0.7的红色，但是E5换算十进制后并不是255的70%，具体转换方式有待研究。<br>show_col(npg_pal)<br>npg_pal</p><h3 id="Science-配色风格pal-aaas"><a href="#Science-配色风格pal-aaas" class="headerlink" title="Science 配色风格pal_aaas"></a>Science 配色风格pal_aaas</h3><p>aaas_pal &lt;- pal_aaas(“default”)(8)<br>show_col(aaas_pal)<br>aaas_pal</p><h3 id="NEJM0配色nejm-pal"><a href="#NEJM0配色nejm-pal" class="headerlink" title="NEJM0配色nejm_pal"></a>NEJM0配色nejm_pal</h3><p>nejm_pal &lt;- pal_nejm(“default”)(8)<br>show_col(nejm_pal)<br>nejm_pal</p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown, maker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OrthoMCL进行同源基因比对</title>
      <link href="/2019/12/21/mysql/"/>
      <url>/2019/12/21/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="以root账户登陆mysql"><a href="#以root账户登陆mysql" class="headerlink" title="以root账户登陆mysql"></a>以root账户登陆mysql</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 创建本地登录的账户</span><br><span class="line">create user &apos;mysql&apos;@&apos;localhost&apos; identified by &apos;111111&apos;;</span><br><span class="line"></span><br><span class="line"># 创建远程可登录的账户</span><br><span class="line">create user &apos;mysql&apos;@&apos;%&apos; identified by &apos;111111&apos;;</span><br><span class="line"></span><br><span class="line"># 用户创建完成后，刷新授权</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 创建一个新的数据库</span><br><span class="line">create database orthomcl DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line"># 授权</span><br><span class="line">GRANT ALL PRIVILEGES ON orthomcl.* TO &apos;orthomcl&apos;@&apos;localhost&apos;   IDENTIFIED BY &apos;111111&apos;;</span><br><span class="line">GRANT ALL PRIVILEGES ON orthomcl.* TO &apos;orthomcl&apos;@&apos;%&apos;   IDENTIFIED BY &apos;111111&apos;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 查看结果</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">perl scripts/orthomcl-setup-database.pl --user orthomcl --password 111111 --host 127.0.0.1 --database orthomcl --outfile configure_outfile.conf [--no-create-database]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perl scripts/orthomcl-pipeline.pl -i ../../data/orthomcl/ -o ../../data/orthomcl_out -m configure_outfile.conf --nocompliant</span><br></pre></td></tr></table></figure><p>Warning: directory “../../data/orthomcl_out” already exists, are you sure you want to store data here [Y]? Y</p><p>Starting OrthoMCL pipeline on: Sun Dec 15 11:12:16 2019</p><p>Git commit: 08bd2baf43db6e35afb3e22e95dce8a3f740729c</p><p>=Stage 1: Validate Files =</p><p>Validating Pcollaris_S26913_per_pep.fasta … 6276 sequences</p><p>Validating Pocularis_EAK479_pep.fasta … 6224 sequences</p><p>Validating Prubeculoides_QHH0839_pep.fasta … 6704 sequences</p><p>Validating Pimmaculata_XZ14285_pep.fasta … 5791 sequences</p><p>Validating Pkoslowi_26923_pep.fasta … 11783 sequences</p><p>Validating Pcollaris_PA20150614-Sichuan_pep.fasta … 8328 sequences</p><p>Validating Prubida_2S_63614_pep.fasta … 12875 sequences</p><p>Validating Pstrophita_assemble_pep.fasta … 20581 sequences</p><p>Validating Pcollaris_130562_Jon_Italy_pep.fasta … 6855 sequences</p><p>Validating Patrogularis_141230_pep.fasta … 10880 sequences</p><p>Validating Pmodularis_117541_pep.fasta … 8978 sequences</p><p>Validating Pmontanella_m80200_pep.fasta … 8534 sequences</p><p>Validating Pcollaris_S1318_taiwan_pep.fasta … 14461 sequences</p><p>Validating Pocularis_MR1290_pep.fasta … 6774 sequences</p><p>Validating Phimalayana_66660_pep.fasta … 6852 sequences</p><p>Validating Phimalayana_57883_pep.fasta … 7552 sequences</p><p>Validating Pfulvescens_QHH0845_pep.fasta … 9746 sequences</p><p>Validating Gallus_gallus_pep.fasta … 28444 sequences</p><p>Validated 18 files</p><p>Stage 1 took 0.17 minutes </p><p>=Stage 2: Validate Database=</p><p>Warning: some tables exist already in database dbi:mysql:orthomcl_new:127.0.0.1:mysql_local_infile, user=root, database_name=orthomcl_new. Do you want to remove (y/n)? y</p><p>Executing: ‘drop database orthomcl_new’</p><p>Executing: ‘create database orthomcl_new’</p><p>Successfully removed old database entries</p><p>Stage 2 took 0.02 minutes </p><p>=Stage 3: Load OrthoMCL Database Schema=</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclInstallSchema “/home/sunhaoyun/software/orthomcl-pipeline/configure_outfile.conf” “/home/sunhaoyun/data/orthomcl_out/log/orthomclSchema.log” 1&gt;/home/sunhaoyun/data/orthomcl_out/log/3.loadschema.stdout.log 2&gt;/home/sunhaoyun/data/orthomcl_out/log/3.loadschema.stderr.log</p><p>Stage 3 took 0.00 minutes </p><p>=Stage 4: Adjust Fasta=</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pcollaris_S26913_per_pep “/home/sunhaoyun/data/orthomcl/Pcollaris_S26913_per_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pocularis_EAK479_pep “/home/sunhaoyun/data/orthomcl/Pocularis_EAK479_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Prubeculoides_QHH0839_pep “/home/sunhaoyun/data/orthomcl/Prubeculoides_QHH0839_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pimmaculata_XZ14285_pep “/home/sunhaoyun/data/orthomcl/Pimmaculata_XZ14285_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pkoslowi_26923_pep “/home/sunhaoyun/data/orthomcl/Pkoslowi_26923_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pcollaris_PA20150614-Sichuan_pep “/home/sunhaoyun/data/orthomcl/Pcollaris_PA20150614-Sichuan_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Prubida_2S_63614_pep “/home/sunhaoyun/data/orthomcl/Prubida_2S_63614_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pstrophita_assemble_pep “/home/sunhaoyun/data/orthomcl/Pstrophita_assemble_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pcollaris_130562_Jon_Italy_pep “/home/sunhaoyun/data/orthomcl/Pcollaris_130562_Jon_Italy_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Patrogularis_141230_pep “/home/sunhaoyun/data/orthomcl/Patrogularis_141230_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pmodularis_117541_pep “/home/sunhaoyun/data/orthomcl/Pmodularis_117541_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pmontanella_m80200_pep “/home/sunhaoyun/data/orthomcl/Pmontanella_m80200_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pcollaris_S1318_taiwan_pep “/home/sunhaoyun/data/orthomcl/Pcollaris_S1318_taiwan_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pocularis_MR1290_pep “/home/sunhaoyun/data/orthomcl/Pocularis_MR1290_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Phimalayana_66660_pep “/home/sunhaoyun/data/orthomcl/Phimalayana_66660_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Phimalayana_57883_pep “/home/sunhaoyun/data/orthomcl/Phimalayana_57883_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Pfulvescens_QHH0845_pep “/home/sunhaoyun/data/orthomcl/Pfulvescens_QHH0845_pep.fasta” 1</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclAdjustFasta Gallus_gallus_pep “/home/sunhaoyun/data/orthomcl/Gallus_gallus_pep.fasta” 1</p><p>Stage 4 took 0.08 minutes </p><p>=Stage 5: Filter Fasta=</p><p>/home/sunhaoyun/software/orthomcl-pipeline/orthomclSoftware-v2.0.9/bin/orthomclFilterFasta “/home/sunhaoyun/data/orthomcl_out/compliant_fasta” 10 20</p><p>Stage 5 took 0.12 minutes </p><p>=Stage 6: Split Fasta=</p><p>splitting /home/sunhaoyun/data/orthomcl_out/blast_dir/goodProteins.fasta into 4 pieces</p><p>jStage 6 took 0.42 minutes </p><p>=Stage 7: Format Database=</p><p>/home/sunhaoyun/software/orthomcl-pipeline/blast-2.2.26/bin/formatdb -i “/home/sunhaoyun/data/orthomcl_out/blast_dir/goodProteins.fasta” -p “T” -l “/home/sunhaoyun/data/orthomcl_out/log/formatdb.log” 1&gt;/home/sunhaoyun/data/orthomcl_out/log/7.format-stdout.log 2&gt;/home/sunhaoyun/data/orthomcl_out/log/7.format-stderr.log</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql, OrthoMCL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建一颗ML树</title>
      <link href="/2019/12/04/shimei/"/>
      <url>/2019/12/04/shimei/</url>
      
        <content type="html"><![CDATA[<h4 id="流程大概就是"><a href="#流程大概就是" class="headerlink" title="流程大概就是"></a>流程大概就是</h4><p>刘亮老师讲的那个差不多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 安装mafft</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载mafft，因为mafft的安装包是.rpm结尾的压缩包，rpm包如果不用管理员安装的话会提示权限错误，但是咱这脑</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 子就别用管理员了，万一删了啥不该删的。rpm2cpio这个工具可以把rpm包在当前目录解压缩，使用方法为</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm2cpio XXX.rpm | cpio -div 解压出来的结果会默认先放在usr里面</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://mafft.cbrc.jp/alignment/software/mafft-7.450-gcc_fc6.x86_64.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 由于mac没有rpm2cpio, linux跳过brew install  rpm2cpio这句</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> brew install  rpm2cpio</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm2cpio mafft-7.450-gcc_fc6.x86_64.rpm | cpio -div</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压完可以看到出现了一个usr目录，usr里的bin放的是执行文件，mafft要求所有所有执行文件都在环境变量里，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所以下一步先添加环境变量，就是快捷方式，首先要查看当前目录在哪儿,<span class="built_in">pwd</span> 获取当前目录,假如说现在目录 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在/home/zhengyuno/softwares/mafft</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> usr</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">/home/zhengyuno/softwares/mafft/usr/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.bash_profile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 滚到最下面的空白处把<span class="built_in">pwd</span>的结果加上一些符号粘贴进去，vim编辑器输入时候，摁i是进入insert模式，输入完了摁</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> esc退出insert模式，然后摁 :wq 保存并退出 （左下角会显示状态）。输入的时候一定要记得前后的PATH要不然</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 就啥快捷方式都没了，别问我为啥知道，试过好多次了T.T</span></span><br><span class="line"></span><br><span class="line">export PATH=/home/zhengyuno/softwares/mafft/usr/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入mafft出来这个交互式页面就ok了</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mafft</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">   MAFFT v7.450 (2019/Aug/23)</span><br><span class="line"></span><br><span class="line">        MBE 30:772-780 (2013), NAR 30:3059-3066 (2002)</span><br><span class="line">        https://mafft.cbrc.jp/alignment/software/</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Input file? (FASTA format; Folder=/Users/sunhaoyun/temp_dir/usr/bin)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ctrl + c 中断当前程序，然后我们就不用交互式的模式了，直接用一行的<span class="built_in">command</span> line模式就行</span></span><br></pre></td></tr></table></figure><p>这里推荐看<a href="http://www.chenlianfu.com/?p=2214" target="_blank" rel="noopener">陈连福老师的博客</a> </p><p>以及<a href="https://mafft.cbrc.jp/alignment/software/manual/manual.html" target="_blank" rel="noopener">官方文档</a>，当然我这种比较懒的官方的manual都没看完过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## mafft的使用 首先选一个算法，看一下算法有很多，有的适合差不多长的，有的适合比较近缘的，不会选，</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用auto，看一下output选项，因为下一步过滤要fasta格式，他默认也是fasta,不用改</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mafft --auto cds_ENSG00000000419.fasta &gt; cds419_mafft_out.fa</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">运行完了屏幕上的信息可以保存一下</span></span><br></pre></td></tr></table></figure><a id="more"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 安装G-block</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gblock安装很简单，回到softwares目录. Gblock是tar z 压缩文件 用tar 的xz命令就行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://molevol.cmima.csic.es/castresana/Gblocks/Gblocks_Linux64_0.91b.tar.Z</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar zxvf Gblocks_Linux64_0.91b.tar.Z</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> Gblocks_0.91b</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./Gblocks</span></span><br><span class="line">******************************************************</span><br><span class="line">                    GBLOCKS 0.91b                     </span><br><span class="line">SELECTION OF CONSERVED BLOCKS FROM MULTIPLE ALIGNMENTS</span><br><span class="line">        FOR THEIR USE IN PHYLOGENETIC ANALYSIS        </span><br><span class="line">******************************************************</span><br><span class="line"></span><br><span class="line">o. Open File</span><br><span class="line"></span><br><span class="line">b. Block Parameters</span><br><span class="line"></span><br><span class="line">s. Saving Options</span><br><span class="line"></span><br><span class="line">g. (Get Blocks)</span><br><span class="line"></span><br><span class="line">q. Quit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your Choice: </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 应该可以运行 也是交互式的 ctrl + c 退出就行,也添加一下变量吧，</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.bash_profile</span></span><br><span class="line">export PATH=/home/zhengyuno/softwares/Gblocks_0.91b:$PATH</span><br></pre></td></tr></table></figure><p>Gblocks 的<a href="http://molevol.cmima.csic.es/castresana/Gblocks/Gblocks_documentation.html" target="_blank" rel="noopener">官方文档</a></p><p>这个还是得看一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## -t=选择氨基酸还是核酸 -b1几几这些他的默认要求都比较高，所以如果使用默认的在亲缘关系较远的物种，</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 就会什么都不剩下，所以可以选择不过滤或者手动把b12345都设置的低一些，比如我这个有90个物种，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果都是默认参数在所有物种里都保守的话，就没有保守的可以算进来了，主要还是看研究的问题是什么</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> Gblocks cds419_mafft_out.fa -b1=10 -b2=10 -b3=6 -b4=10 -b5=h </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 默认是原来的名字加-gb结尾的fa文件</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 安装raxml</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其实现在raxml-ng 出来了稳定版，更推荐使用这个新的，因为raxml-ng的wiki写的真的特别好，一步一步的。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不过当时刘亮老师教的raxml现在用的也很多,就还用raxml把，回到softwares</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> raxml 用git <span class="built_in">clone</span>安装,下好了进去直接编译就好啦,一般编译多线程的版本，就是用起来更快的版本PTHREADS</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 两个都编译好了，因为有时候数据量小的话也不用那么多cpu</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/stamatak/standard-RAxML.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> standard-RAxML</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make -f Makefile.PTHREADS.gcc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make -f Makefile.gcc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.bash_profile</span></span><br><span class="line">export PATH=/home/zhengyuno/softwares/standard-RAxML/:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Raxml 需要的输入文件是phylip，而Gblocks的输出文件是fasta格式，所以就用raxml里面的小工具转换一下格</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 式。这一步时候注意目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh /home/zhengyuno/softwares/standard-RAxML/usefulScripts/convertFasta2Phylip.sh cds419_mafft_out.fa-gb &gt; cds419_mafft_out.phylip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行raxml -<span class="comment">#设置100次bootstrap，-p -b 设置seed，其实raxml-ng的那个说明里面写的更清楚，按照他那个</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 跑一遍会更好</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> raxmlHPC -s cds419_mafft_out.phylip -n out -mGTRGAMMA -p 666 -<span class="comment">#100 -b 666 </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后一个ML法构建的基因树就做好了</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/stamatak/standard-RAxML" target="_blank" rel="noopener">raxml文档</a></p><p><a href="https://github.com/amkozlov/raxml-ng/wiki" target="_blank" rel="noopener">raxml-ng文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Phylogeny </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李笑来老板的re part</title>
      <link href="/2019/10/01/re/"/>
      <url>/2019/10/01/re/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式本质上是个独立的语言，短小却格外强悍 —— 乃至于，如果你竟然没学会它的话，你的之前学的编程技能干脆与残疾无异。</p><p>Wikipedia 上对正则表达式的说明如下：</p><blockquote><p><strong>正则表达式</strong>（英语：Regular Expression，在代码中常简写为 regex、regexp 或 RE），又称<em>正规表示式</em>、<em>正规表示法</em>、<em>正规运算式</em>、<em>规则运算式</em>、<em>常规表示法</em>，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在 Perl 中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由 Unix 中的工具软件（例如 sed 和 grep）普及开的。</p></blockquote><a id="more"></a> <p>以下是绝大多数翻译成中文的教程中对正则表达式进行讲解时所使用的描述：</p><blockquote><p>一个正则表达式（Regular Expression）通常被称为一个模式（Pattern）。</p></blockquote><p>我常常觉得当初要是它被翻译成 “规则表达式”，那么很可能初学者不会感到那么大的压力 —— 谁都一样，看着由 “每个都认识的字构成的词组” 却不能直观地想到它究竟是什么东西，都会感到莫名的压力。</p><p><strong>Regular</strong>，其实在它的众多语义中，取以下释义最符合 Regular Expression 的原意<a href="#fn1" name="fn1b"><sup>[1]</sup></a>：</p><blockquote><p>⑭ Linguistics 规则的 ▸ regular verbs 规则动词</p></blockquote><p>而 <strong>Pattern</strong> 这个词，在词典里有好几个对应的中文词汇：</p><blockquote><p>① 图案；② 式样；③ 图样；④ 榜样；⑤ 模式；⑥ 样品；⑦ 模子</p></blockquote><p>在当前语境之下，把 Pattern 翻译成 “模式”，显然不如 “模子” 更好（甚至连 “样品” 感觉都比 “模式” 更恰当）—— “模子” 这个词很直观啊，拿着一个模子去找与它一致的字符串…… “与规则一致”，英文用的是 <strong>Match</strong>，一般被翻译作 “匹配”。</p><p>在自学编程的过程中，处处都是这种语言翻译带来的迷惑、障碍，或者耽误。既然应该把 Regular Expression 理解为 “规则表达式” 更好，那其实吧，把 Pattern 直接理解为中文的 “<em>规则</em>”，可能更直观更准确，理解上更是毫无障碍：</p><blockquote><p>一个规则表达式（Regular Expression）通常被称为一个规则（Pattern）。</p></blockquote><p>那么，<strong>规则表达式</strong>里写的是什么呢？只能是<strong>规则</strong>了…… 到最后好像也就 “捕获”（Capture）这个词没什么歧义。</p><p>现在，我们已经把术语全部 “解密” 了，然后再看看下面的表述：</p><blockquote><p>我们可以用书写特定的规则，用来在文本中捕获与规则一致的字符串，而后对其进行操作……</p></blockquote><p>理解起来相当顺畅。</p><p>以下的 Python 代码中，<a href="https://regexper.com#%5Cwo%5Cw" target="_blank" rel="noopener"><code>\wo\w</code></a> 就是一个<em>规则表达式</em>（或称为<em>规则</em>）；</p><p>而 <code>re.findall(pttn, str)</code> 的作用就是，在 <code>str</code> 里找到所有与这个<strong>规则</strong>（Pattern，模式）<strong>一致</strong>（Match，匹配）的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">'The quick brown fox jumps over the lazy dog'</span></span><br><span class="line">pttn = re.compile(<span class="string">r'\wo\w'</span>)</span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;row&apos;, &apos;fox&apos;, &apos;dog&apos;]</code></pre><p>总结一下：</p><blockquote><p><strong>规则表达式</strong>（Regular Expressions，通常缩写为 Regex）是最强大且不可或缺的文本处理工具 —— 它的用处就是在文本中<strong>扫描/搜索</strong>（Scan/Search）与某一<strong>规则</strong>（Pattern）<strong>匹配</strong>（Match，即，与规则一致）的所有实例，并且还可以按照规则<strong>捕获</strong>（Capture）其中的部分或者全部，对它们进行<strong>替换</strong>（Replace）。</p></blockquote><p>接下来为了避免歧义，我们干脆用 Regex 这个缩写，以及与它相关的英文单词：pattern, match, capture, replace(ment)……</p><p>有时，使用 Regex 并不是为了 Replace，而是为了检查格式，比如，可以用 Regex 检查用户输入的密码是否过于简单（比如，全部都由数字构成），比如可以用来验证用户输入的电话号码、证件号码是否符合特定格式等等。</p><p>另外，在自学的过程中，想尽一切办法把一切术语用简单直白的 “人话” 重新表述，是特别有效的促进进步的行为模式。</p><h2 id="视觉体验"><a href="#视觉体验" class="headerlink" title="视觉体验"></a>视觉体验</h2><p>所谓百闻不如一见。</p><p>眼见为实 —— 想办法让一个陌生的概念视觉上直观，是突破大多学习障碍的最简单粗暴直接有效的方式。</p><p>我们最好先直接看看 Regex 的工作过程。以下，是用微软发行的代码编辑工具 Visual Studio Code 针对一小段文本使用若干条 Regex 进行匹配的过程：</p><p><img src="https://raw.githubusercontent.com/selfteaching/the-craft-of-selfteaching/master/images/regex-test.gif?raw=true" alt></p><p>Python 的项目代码仓库里有一个很简短的 Demo 程序，叫 <a href="https://github.com/python/cpython/blob/master/Tools/demo/redemo.py" target="_blank" rel="noopener"><code>redemo.py</code></a>，它使用 <a href="https://docs.python.org/3/library/tkinter.html" target="_blank" rel="noopener">Tcl/Tk</a> 作为图形界面，也可以用来测试正则表达式。</p><p>它的代码地址是：</p><blockquote><p><a href="https://raw.githubusercontent.com/python/cpython/master/Tools/demo/redemo.py" target="_blank" rel="noopener">https://raw.githubusercontent.com/python/cpython/master/Tools/demo/redemo.py</a></p></blockquote><p>它运行起来长成这样：</p><p><img src="https://raw.githubusercontent.com/selfteaching/the-craft-of-selfteaching/master/images/redemo.png?raw=true" alt></p><p>目前（2019）网上最方便的 Regex 测试器，是 <a href="https://regex101.com" target="_blank" rel="noopener">regex101.com</a>：</p><p>以下，就是在一段文本中，找出所有首写字母大写的词汇的<em>过程</em>，并将其先全部替换成小写，再将其全部替换为大写的过程；使用的正则表达式是 <code>([A-Z]\w+)</code>，替换表达式分别是 <code>\L$1</code> 和 <code>\U$1</code>：</p><p><img src="https://raw.githubusercontent.com/selfteaching/the-craft-of-selfteaching/master/images/regex101.gif?raw=true" alt></p><p>这个网站太好了，所以，平日里我是用 <a href="https://github.com/jiahaog/nativefier" target="_blank" rel="noopener">Nativefier</a> 工具将这个网站打包为一个 Mac Desktop App 使用。不过，它也有局限，就是被搜索文件略微大点就报错，说 <code>timeout</code>……</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们需要个文本文件，用来当作练习使用正则表达式去搜索替换的目标。这个文件保存在当前的根目录，文件名称是：<code>regex-target-text-sample.txt</code>。</p><p>以下代码中，<code>pttn = r&#39;beg[iau]ns?&#39;</code> 这一句中的 <a href="https://regexper.com#beg[iau]ns?" target="_blank" rel="noopener"><code>beg[iau]ns?</code></a> 就是 Regex 的 Pattern。</p><p><strong>注意</strong>：在 Python 代码中，写 Pattern 的时候，之所以要在字符串 <code>&#39;...&#39;</code> 之前加上 <code>r</code>，写成 <code>r&#39;...&#39;</code>，是因为如果不用 raw string 的话，那么，每个转义符号都要写成 <code>\\</code>；如果用 raw string，转义符号就可以直接使用 <code>\</code> 本身了…… 当然，如果你想搜索 <code>\</code> 这个符号本身的话，那么还是得写 <code>\\</code>。</p><p>而 <code>re.findall(pttn, str)</code> 的意思是说，把 <code>str</code> 中所有与 <code>pttn</code> 这个规则一致的字符串都找出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'regex-target-text-sample.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    str = f.read()</span><br><span class="line">pttn = <span class="string">r'beg[iau]ns?'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;begin&apos;, &apos;began&apos;, &apos;begun&apos;, &apos;begin&apos;]</code></pre><p>文件 <code>regex-target-text-sample.txt</code> 中的内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>begin began begun bigins begining<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>google gooogle goooogle goooooogle<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>coloured color coloring  colouring colored<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>never ever verb however everest<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>520 52000 5200000 520000000 520000000000<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>error wonderer achroiocythaemia achroiocythemia<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>The white dog wears a black hat.<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>Handel, Händel, Haendel<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>(843) 542-4256<span class="tag">&lt;/<span class="name">dl</span>&gt;</span> <span class="tag">&lt;<span class="name">dl</span>&gt;</span>(431) 270-9664<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>3336741162<span class="tag">&lt;/<span class="name">dl</span>&gt;</span> <span class="tag">&lt;<span class="name">dl</span>&gt;</span>3454953965<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>peoplesr@live.com<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">li</span>&gt;</span>jaxweb@hotmail.com<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>dhwon@comcast.net<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">li</span>&gt;</span>krueger@me.com<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>URLs<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">https://docs.python.org/3/howto/regex.html</span><br><span class="line">https://docs.python.org/3/library/re.html</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>passwords<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">Pasw0rd~</span><br><span class="line">i*Eh,GF67E</span><br><span class="line">a$4Bh9XE&amp;E</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>duplicate words<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>It's very very big.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Keep it simple, simple, simple!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在以下的示例中，有时直接设定了 str 的值，而不是使用以上整个文本文件 —— 因为读者在阅读的时候，最好能直接看到被搜索的字符串。另外，如果使用整个文件，所得到的 Match 太多，也确实影响阅读。</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>毕竟，你已经不是 “啥都不懂” 的人了。你已经知道一个事实：编程语言无非是用来运算的。</p><p>所谓的运算，就有操作符（Operators）和操作元（Operands）—— 而操作符肯定是有优先级的，不然的话，那么多操作元和操作符放在一起，究竟先操作哪个呢？</p><p>Regex 也一样，它本身就是个迷你语言（Mini Language）。在 Regex 中，操作符肯定也有优先级。它的操作元有个专门的名称，<strong>原子</strong>（Atom）。</p><p>先大致看看它的操作符优先级，你就会对它有相当不错的了解：</p><table><thead><tr><th>排列</th><th>原子与操作符优先级</th><th>（从高到低）</th></tr></thead><tbody><tr><td>1</td><td>转义符号 (Escaping Symbol)</td><td><code>\</code></td></tr><tr><td>2</td><td>分组、捕获 (Grouping or Capturing)</td><td><code>(...)</code> <code>(?:...)</code> <code>(?=...)</code> <code>(?!...)</code> <code>(?&lt;=...)</code> <code>(?&lt;!...)</code></td></tr><tr><td>3</td><td>数量 (Quantifiers)</td><td><code>a*</code> <code>a+</code> <code>a?</code> <code>a{n, m}</code></td></tr><tr><td>4</td><td>序列与定位（Sequence and Anchor）</td><td><code>abc</code> <code>^</code> <code>$</code> <code>\b</code> <code>\B</code></td></tr><tr><td>5</td><td>或（Alternation）</td><td><code>a|b|c</code></td></tr><tr><td>6</td><td>原子 (Atoms)</td><td><code>a</code> <code>[^abc]</code> <code>\t</code> <code>\r</code> <code>\n</code> <code>\d</code> <code>\D</code> <code>\s</code> <code>\S</code> <code>\w</code> <code>\W</code> <code>.</code></td></tr></tbody></table><p>当然，你若是在之前，没有自学过、理解过 Python（或者任何其它编程语言）表达式中的操作符优先级，那么一上来就看上面的表格不仅对你没有帮助，只能让你更迷惑。</p><p>—— 这就是理解能力逐步积累逐步加强的过程。</p><h2 id="原子"><a href="#原子" class="headerlink" title="原子"></a>原子</h2><p>在 Regex 的 Pattern 中，操作元，即，被运算的 “值”，被称为<strong>原子</strong>（Atom）。</p><h3 id="本义字符"><a href="#本义字符" class="headerlink" title="本义字符"></a>本义字符</h3><p>最基本的原子，就是本义字符，它们都是单个字符。</p><p>本义字符包括从 <code>a</code> 到 <code>z</code>，<code>A</code> 到 <code>Z</code>，<code>0</code> 到 <code>9</code>，还有 <code>_</code> —— 它们所代表的就是它们的字面值。</p><p>即，相当于，<code>string.ascii_letters</code> 和 <code>string.digits</code> 以及 <code>_</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">string.ascii_letters</span><br><span class="line">string.digits</span><br></pre></td></tr></table></figure><pre><code>&apos;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;&apos;0123456789&apos;</code></pre><p>以下字符在 Regex 中都有特殊含义：</p><blockquote><p><code>\</code> <code>+</code> <code>*</code> <code>.</code> <code>?</code> <code>-</code> <code>^</code> <code>$</code> <code>|</code> <code>(</code> <code>)</code> <code>[</code> <code>]</code> <code>{</code> <code>}</code> <code>&lt;</code> <code>&gt;</code></p></blockquote><p>当你在写 Regex 的时候，如果你需要搜索的字符不是本义字符，而是以上这些特殊字符时，<em>建议</em>都直接加上转义符号 <code>\</code> 来表示，比如，你想搜索 <code>&#39;</code>，那你就写 <code>\&#39;</code>，或者你想搜索 <code>#</code> 那你就写 <code>\#</code>（事实上，<code>#</code> 并不是 Regex 的特殊符号，所以，它之前的转义符号可有可无）—— 这对初学者来说可能是最安全的策略。</p><p>跟过往一样，所有的细节都很重要，它们就是需要花时间逐步熟悉到牢记。</p><h3 id="集合原子"><a href="#集合原子" class="headerlink" title="集合原子"></a>集合原子</h3><p>集合原子还是原子。</p><p>标示集合原子，使用方括号 <code>[]</code>。<code>[abc]</code> 的意思是说，“<code>a</code> or <code>b</code> or <code>c</code>”，即，<code>abc</code> 中的任意一个字符。</p><p>比如，<a href="https://regexper.com#beg[iau]n" target="_blank" rel="noopener"><code>beg[iau]n</code></a> 能够代表 <code>begin</code>、<code>began</code>，以及 <code>begun</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str = <span class="string">'begin began begun bigins begining'</span></span><br><span class="line">pttn = <span class="string">r'beg[iau]n'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;begin&apos;, &apos;began&apos;, &apos;begun&apos;, &apos;begin&apos;]</code></pre><p>在方括号中，我们可以使用两个操作符：<code>-</code>（区间）和 <code>^</code>（非）。</p><ul><li><code>[a-z]</code> 表示从小写字母 <code>a</code> 到小写字母 <code>z</code> 中的任意一个字符。</li><li><code>[^abc]</code> 表示 <code>abc</code> 以外的其它任意字符，即，非 <code>[abc]</code>。</li></ul><p>注意，一个集合原子中，<code>^</code> 符号只能用一次，只能紧跟在 <code>[</code> 之后。否则不起作用。</p><h3 id="类别原子"><a href="#类别原子" class="headerlink" title="类别原子"></a>类别原子</h3><p>类别原子，是指那些能够代表 “一类字符” 的原子，它们都得使用转义符号再加上另外一个符号表达，包括：</p><p><code>\d</code> 任意数字；等价于 <code>[0-9]</code></p><p><code>\D</code> 任意非数字；等价于 <code>[^0-9]</code></p><p><code>\w</code> 任意本义字符；等价于 <code>[a-zA-Z0-9_]</code></p><p><code>\W</code> 任意非本义字符；等价于 <code>[^a-zA-Z0-9_]</code></p><p><code>\s</code> 任意空白；相当于 <code>[ \f\n\r\t\v]</code>（注意，方括号内第一个字符是空格符号）</p><p><code>\S</code> 任意非空白；相当于 <code>[^ \f\n\r\t\v]</code>（注意，紧随 <code>^</code> 之后的是一个空格符号）</p><p><code>.</code> 除 <code>\r</code> <code>\n</code> 之外的任意字符；相当于 <code>[^\r\n]</code></p><p>类别原子挺好记忆的，如果你知道各个字母是哪个词的首字母的话：</p><blockquote><ul><li><code>d</code> 是 digits</li><li><code>w</code> 是 word characters</li><li><code>s</code> 是 spaces</li></ul></blockquote><p>另外，在空白的集合 <code>[ \f\n\r\t\v]</code> 中：<code>\f</code> 是分页符；<code>\n</code> <code>\r</code> 是换行符；<code>\t</code> 是制表符；<code>\v</code> 是纵向制表符（很少用到）。各种关于空白的转义符也同样挺好记忆的，如果你知道各个字母是那个词的首字母的话：</p><blockquote><ul><li><code>f</code> 是 flip</li><li><code>n</code> 是 new line</li><li><code>r</code> 是 return</li><li><code>t</code> 是 tab</li><li><code>v</code> 是 vertical tab</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str = <span class="string">'&lt;dl&gt;(843) 542-4256&lt;/dl&gt; &lt;dl&gt;(431) 270-9664&lt;/dl&gt;'</span></span><br><span class="line">pttn = <span class="string">r'\d\d\d\-'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;542-&apos;, &apos;270-&apos;]</code></pre><h3 id="边界原子"><a href="#边界原子" class="headerlink" title="边界原子"></a>边界原子</h3><p>我们可以用边界原子指定边界。也可以称作 “定位操作符”。</p><p><code>^</code> 匹配被搜索字符串的开始位置；</p><p><code>$</code> 匹配被搜索字符串的结束位置；</p><p><code>\b</code> 匹配单词的边界；<a href="https://regexper.com#er%5Cb" target="_blank" rel="noopener"><code>er\b</code></a>，能匹配 <code>coder</code> 中的 <code>er</code>，却不能匹配 <code>error</code> 中的 <code>er</code>；</p><p><code>\B</code> 匹配非单词边界；<a href="https://regexper.com#er%5CB" target="_blank" rel="noopener"><code>er\B</code></a>，能匹配 <code>error</code> 中的 <code>er</code>，却不能匹配 <code>coder</code> 中的 <code>er</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str = <span class="string">'never ever verb however everest'</span></span><br><span class="line">pttn = <span class="string">r'er\b'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line">pttn = <span class="string">r'er\B'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;er&apos;, &apos;er&apos;, &apos;er&apos;][&apos;er&apos;, &apos;er&apos;]</code></pre><p><strong>注意</strong>：<code>^</code> 和 <code>$</code> 在 Python 语言中被 <code>\A</code> 和 <code>\Z</code> 替代。</p><p>事实上，每种语言或多或少都对 Regex 有自己的定制。不过，本章讨论的绝大多数细节，都是通用的。</p><h3 id="组合原子"><a href="#组合原子" class="headerlink" title="组合原子"></a>组合原子</h3><p>我们可以用圆括号 <code>()</code> 将多个单字符原子组合成一个原子 —— 这么做的结果是，<code>()</code> 内的字符串将被当作一整个原子，可以被随后我们要讲解的数量操作符操作。</p><p>另外，<code>()</code> 这个操作符，有两个作用：<strong>组合</strong>（Grouping），就是我们刚刚讲到的作用；而另外一个作用是<strong>捕获</strong>（Capturing)，后面会讲到。</p><p>注意区别，<a href="https://regexper.com#er" target="_blank" rel="noopener"><code>er</code></a>、<a href="https://regexper.com#[er]" target="_blank" rel="noopener"><code>[er]</code></a> 和 <a href="https://regexper.com#(er" target="_blank" rel="noopener"><code>(er)</code></a> 各不相同。</p><blockquote><ul><li><code>er</code> 是两个原子，<code>&#39;e&#39;</code> 和紧随其后的 <code>&#39;r&#39;</code></li><li><code>[er]</code> 是一个原子，或者 <code>&#39;e&#39;</code> 或者 <code>&#39;r&#39;</code>；</li><li><code>(er)</code> 是一个原子，<code>&#39;er&#39;</code></li></ul></blockquote><p>下一节中讲到数量操作符的时候，会再次强调这点。</p><h2 id="数量操作符"><a href="#数量操作符" class="headerlink" title="数量操作符"></a>数量操作符</h2><p>数量操作符有：<code>+</code> <code>?</code> <code>*</code> <code>{n, m}</code>。</p><p>它们是用来限定位于它们之前的原子允许出现的个数；不加数量限定则代表出现一次且仅出现一次：</p><p><code>+</code> 代表前面的原子必须至少出现一次，即：<code>出现次数 ≧ 1</code></p><blockquote><p>例如，<a href="https://regexper.com#go+gle" target="_blank" rel="noopener"><code>go+gle</code></a>可以匹配 <code>google</code> <code>gooogle</code> <code>goooogle</code> 等；</p></blockquote><p><code>?</code> 代表前面的原子最多只可以出现一次，即：<code>0 ≦ 出现次数 ≦ 1</code></p><blockquote><p>例如，<a href="https://regexper.com#colou?red" target="_blank" rel="noopener"><code>colou?red</code></a>可以匹配 <code>colored</code> 或者 <code>coloured</code>;</p></blockquote><p><code>*</code> 代表前面的原子可以不出现，也可以出现一次或者多次，即：<code>出现次数 ≧ 0</code></p><blockquote><p>例如，<a href="https://regexper.com#520*" target="_blank" rel="noopener"><code>520*</code></a>可以匹配 <code>52</code> <code>520</code> <code>52000</code> <code>5200000</code> <code>520000000000</code> 等。</p></blockquote><p><code>{n}</code> 之前的原子出现确定的 <code>n</code> 次；</p><p><code>{n,}</code> 之前的原子出现至少 <code>n</code> 次；</p><p><code>{n, m}</code> 之前的原子出现至少 <code>n</code> 次，至多 <code>m</code> 次</p><blockquote><p>例如，<a href="https://regexper.com#go%7B2,5%7Dgle" target="_blank" rel="noopener"><code>go{2,5}gle</code></a>，能匹配 <code>google</code> <code>gooogle</code> <code>goooogle</code> 或 <code>gooooogle</code>，但不能匹配 <code>gogle</code> 和 <code>gooooooogle</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'regex-target-text-sample.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    str = f.read()</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'go+gle'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'go&#123;2,5&#125;gle'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'colou?red'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'520*'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;google&apos;, &apos;gooogle&apos;, &apos;goooogle&apos;, &apos;goooooogle&apos;][&apos;google&apos;, &apos;gooogle&apos;, &apos;goooogle&apos;][&apos;coloured&apos;, &apos;colored&apos;][&apos;520&apos;, &apos;52000&apos;, &apos;5200000&apos;, &apos;520000000&apos;, &apos;520000000000&apos;]</code></pre><p>数量操作符是对它之前的原子进行操作的，换言之，数量操作符的操作元是操作符之前的原子。</p><p>上一节提到，要注意区别：<code>er</code>、<code>[er]</code> 和 <code>(er)</code> 各不相同。</p><blockquote><ul><li><code>er</code> 是两个原子，<code>&#39;e&#39;</code> 之后 <code>&#39;r&#39;</code></li><li><code>[er]</code> 是一个原子，或者 <code>&#39;e&#39;</code> 或者 <code>&#39;r&#39;</code>；</li><li><code>(er)</code> 是一个原子，<code>&#39;er&#39;</code></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str = <span class="string">'error wonderer severeness'</span></span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'er'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'[er]'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'(er)'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;er&apos;, &apos;er&apos;, &apos;er&apos;, &apos;er&apos;][&apos;e&apos;, &apos;r&apos;, &apos;r&apos;, &apos;r&apos;, &apos;e&apos;, &apos;r&apos;, &apos;e&apos;, &apos;r&apos;, &apos;e&apos;, &apos;e&apos;, &apos;r&apos;, &apos;e&apos;, &apos;e&apos;][&apos;er&apos;, &apos;er&apos;, &apos;er&apos;, &apos;er&apos;]</code></pre><p>在以上的例子中，看不出 <code>er</code> 和 <code>(er)</code> 的区别，但是，加上数量操作符就不一样了 —— 因为<em>数量操作符只对它之前的那一个原子进行操作</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str = <span class="string">'error wonderer severeness'</span></span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'er+'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'[er]+'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'(er)+'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;err&apos;, &apos;er&apos;, &apos;er&apos;, &apos;er&apos;][&apos;err&apos;, &apos;r&apos;, &apos;erer&apos;, &apos;e&apos;, &apos;ere&apos;, &apos;e&apos;][&apos;er&apos;, &apos;er&apos;, &apos;er&apos;]</code></pre><h2 id="或操作符"><a href="#或操作符" class="headerlink" title="或操作符 |"></a>或操作符 <code>|</code></h2><p>或操作符 <code>|</code> 是所有操作符中优先级最低的，数量操作符的优先级比它高，所以，在 <code>|</code> 前后的原子被数量操作符（如果有的话）操作之后才交给 <code>|</code> 操作。</p><p>于是，<a href="https://regexper.com#begin%7Cbegan%7Cbegun" target="_blank" rel="noopener"><code>begin|began|begun</code></a> 能够匹配 <code>begin</code> 或 <code>began</code> 或 <code>begun</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str = <span class="string">'begin began begun begins beginn'</span></span><br><span class="line">pttn = <span class="string">r'begin|began|begun'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;begin&apos;, &apos;began&apos;, &apos;begun&apos;, &apos;begin&apos;, &apos;begin&apos;]</code></pre><p>在集合原子中（即，<code>[]</code> 内的原子）各个原子之间的关系，只有 “或” —— 相当于方括号中的每个原子之间都有一个被省略的 <code>|</code>。</p><p><strong>注意</strong>：方括号的 <code>|</code> 不被当作特殊符号，而是被当作 <code>|</code> 这个符号本身。在方括号中的圆括号，也被当作圆括号 <code>()</code> 本身，而无分组含义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">str = <span class="string">'achroiocythaemia achroiocythemia a|e'</span></span><br><span class="line">pttn = <span class="string">r'[a|ae]'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'[a|e]'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'[ae]'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'[(ae)]'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">pttn = <span class="string">r'[a|ae|(ae)]'</span></span><br><span class="line">re.findall(pttn, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;a&apos;, &apos;a&apos;, &apos;e&apos;, &apos;a&apos;, &apos;a&apos;, &apos;e&apos;, &apos;a&apos;, &apos;a&apos;, &apos;|&apos;, &apos;e&apos;]</code></pre><h2 id="匹配并捕获"><a href="#匹配并捕获" class="headerlink" title="匹配并捕获"></a>匹配并捕获</h2><p>捕获（Capture），使用的是圆括号 <code>()</code>。使用圆括号得到的匹配的值被暂存成一个带有索引的列表，第一个是 <code>$1</code>，第二个是 <code>$2</code>…… 以此类推。随后，我们可以在替换的过程中使用 <code>$1</code> <code>$2</code> 中所保存的值。</p><p><strong>注意</strong>：在 Python 语言中调用 <code>re</code> 模块之后，在 <code>re.sub()</code> 中调用被匹配的值，用的索引方法是 <code>\1</code>、<code>\2</code>…… 以此类推。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">'The white dog wears a black hat.'</span></span><br><span class="line">pttn = <span class="string">r'The (white|black) dog wears a (white|black) hat.'</span></span><br><span class="line">re.findall(pttn, str)</span><br><span class="line"></span><br><span class="line">repl = <span class="string">r'The \2 dog wears a \1 hat.'</span></span><br><span class="line">re.sub(pttn, repl, str)</span><br><span class="line"></span><br><span class="line">repl = <span class="string">r'The \1 dog wears a \1 hat.'</span></span><br><span class="line">re.sub(pttn, repl, str)</span><br></pre></td></tr></table></figure><pre><code>[(&apos;white&apos;, &apos;black&apos;)]&apos;The black dog wears a white hat.&apos;&apos;The white dog wears a white hat.&apos;</code></pre><h2 id="非捕获匹配"><a href="#非捕获匹配" class="headerlink" title="非捕获匹配"></a>非捕获匹配</h2><p>有时，你并不想捕获圆括号中的内容，在那个地方你使用括号的目的只是分组，而非捕获，那么，你就在圆括号内最开头加上 <code>?:</code> —— <code>(?:...)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">'The white dog wears a black hat.'</span></span><br><span class="line">pttn = <span class="string">r'The (?:white|black) dog wears a (white|black) hat.'</span></span><br><span class="line">re.findall(pttn, str)                   <span class="comment"># 只捕获了一处，也就是说只有一个值将来可以被引用</span></span><br><span class="line"></span><br><span class="line">repl = <span class="string">r'The \1 dog wears a \1 hat.'</span>    <span class="comment"># 之前的一处捕获，在替换时可被多次引用</span></span><br><span class="line">書評</span><br><span class="line">re.sub(pttn, repl, str)</span><br></pre></td></tr></table></figure><pre><code>[&apos;black&apos;]&apos;The black dog wears a black hat.&apos;</code></pre><p>在 Python 代码中使用正则表达式，匹配和捕获以及随后的替换，有更灵活的方式，因为可以对那些值直接编程。<code>re.sub()</code> 中，<code>repl</code> 参数甚至可以接收另外一个函数作为参数 —— 以后你肯定会自行认真阅读以下页面中的所有内容：</p><blockquote><p><a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/3/library/re.html</a></p></blockquote><p>非捕获匹配，还有若干个操作符：</p><p> <code>(?=pattern)</code></p><blockquote><p>正向肯定预查（look ahead positive assert），在任何匹配规则的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，<a href="https://regexper.com#%60Windows(?=95%7C98%7CNT%7C2000)%60" target="_blank" rel="noopener"><code>Windows(?=95|98|NT|2000)</code></a><br>能匹配 <code>Windows2000</code> 中的 <code>Windows</code>，但不能匹配 <code>Windows3.1</code> 中的 <code>Windows</code>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p></blockquote><p><code>(?!pattern)</code></p><blockquote><p>正向否定预查（negative assert），在任何不匹配规则的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如<a href="https://regexper.com#Windows(?=95%7C98%7CNT%7C2000)" target="_blank" rel="noopener"><code>Windows(?!95|98|NT|2000)</code></a><br>能匹配 <code>Windows3.1</code> 中的 <code>Windows</code>，但不能匹配 <code>Windows2000</code> 中的 <code>Windows</code>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p></blockquote><p><code>(?&lt;=pattern)</code></p><blockquote><p>反向（look behind）肯定预查，与正向肯定预查类似，只是方向相反。例如，<a href="https://regexper.com#(?%3C=95%7C98%7CNT%7C2000)Windows" target="_blank" rel="noopener"><code>(?&lt;=95|98|NT|2000)Windows</code></a><br>能匹配 <code>2000Windows</code> 中的 <code>Windows</code>，但不能匹配 <code>3.1Windows</code> 中的 <code>Windows</code>。</p></blockquote><p> <code>(?&lt;!pattern)</code></p><blockquote><p>反向否定预查，与正向否定预查类似，只是方向相反。例如 <code>(?&lt;!95|98|NT|2000)Windows</code><br>能匹配 <code>3.1Windows</code> 中的 <code>Windows</code>，但不能匹配 <code>2000Windows</code> 中的 <code>Windows</code>。</p></blockquote><h2 id="控制标记"><a href="#控制标记" class="headerlink" title="控制标记"></a>控制标记</h2><p>有几个全局控制标记（Flag）需要了解，其中最常默认指定的有 <code>G</code> 和 <code>M</code>：</p><p><code>A</code>/<code>ASCII</code>，默认为 <code>False</code></p><blockquote><ul><li><code>\d</code>, <code>\D</code>, <code>\w</code>, <code>\W</code>, <code>\s</code>, <code>\S</code>, <code>\b</code>, 和 <code>\B</code> 等只限于 ASCII 字符</li><li>行内写法：<code>(?a)</code></li><li>Python re 模块中的常量：<code>re.A</code> <code>re.ASCII</code></li></ul></blockquote><p><code>I</code>/<code>IGNORECASE</code>，默认为 <code>False</code></p><blockquote><ul><li>忽略字母大小写</li><li>行内写法：<code>(?i)</code></li><li>Python re 模块中的常量：<code>re.I</code> <code>re.IGNORECASE</code></li></ul></blockquote><p><code>G</code>/<code>GLOBAL</code>，默认为 <code>True</code></p><blockquote><ul><li>找到第一个 match 之后不返回</li><li>行内写法：<code>(?g)</code></li><li>Python re 模块中这个标记不能更改，默认为 TRUE</li></ul></blockquote><p><code>L</code>/<code>LOCALE</code>，默认为 <code>False</code></p><blockquote><ul><li>由本地语言设置决定 <code>\d</code>, <code>\D</code>, <code>\w</code>, <code>\W</code>, <code>\s</code>, <code>\S</code>, <code>\b</code>, 和 <code>\B</code> 等等的内容</li><li>行内写法：<code>(?L)</code></li><li>Python re 模块中的常量：<code>re.L</code> <code>re.LOCALE</code></li></ul></blockquote><p><code>M</code>/<code>MULTILINE</code>，默认为 <code>True</code></p><blockquote><ul><li>使用本标志后，<code>^</code> 和 <code>$</code> 匹配行首和行尾时，会增加换行符之前和之后的位置。</li><li>行内写法：<code>(?m)</code></li><li>Python re 模块中的常量：<code>re.M</code> <code>re.MULTILINE</code></li></ul></blockquote><p><code>S</code>/<code>DOTALL</code>，默认为 <code>False</code></p><blockquote><ul><li>使 <code>.</code> 完全匹配任何字符，包括换行；没有这个标志，<code>.</code> 匹配除了 <code>n</code> <code>r</code> 之外的任何字符。</li><li>行内写法：<code>(?s)</code></li><li>Python re 模块中的常量：<code>re.S</code> <code>re.DOTALL</code></li></ul></blockquote><p><code>X</code>/<code>VERBOSE</code>，默认为 <code>False</code></p><blockquote><ul><li>当该标志被指定时，Pattern 中的的空白符会被忽略，除非该空白符在圆括号或方括号中，或在反斜杠 <code>\</code> 之后。这样做的结果是允许将注释写入 Pattern，这些注释会被 Regex 解析引擎忽略。注释用 <code>#</code> 号来标识，不过该符号不能在字符串或反斜杠之后。</li><li>行内写法：<code>(?x)</code></li><li>Python re 模块中的常量：<code>re.X</code> <code>re.VERBOSE</code></li></ul></blockquote><h2 id="几个最常用的-Regex"><a href="#几个最常用的-Regex" class="headerlink" title="几个最常用的 Regex"></a>几个最常用的 Regex</h2><p>以下是几个常用的 Regex<a href="#fn2" name="fn2b"><sup>[2]</sup></a>，值得保存：</p><ul><li><p>matching username</p><blockquote><p><a href="https://regexper.com#/%5E[a-z0-9_-]%7B3,16%7D$/" target="_blank" rel="noopener"><code>/^[a-z0-9_-]{3,16}$/</code></a></p></blockquote></li><li><p>matching password<a href="#fn3" name="fn3b"><sup>[3]</sup></a></p><blockquote><p><a href="https://regexper.com#/%5E[a-z0-9_-]%7B6,18%7D$/" target="_blank" rel="noopener"><code>/^[a-z0-9_-]{6,18}$/</code></a></p></blockquote></li><li><p>matching a HEX value</p><blockquote><p><a href="https://regexper.com#/%5E#?([a-f0-9]%7B6%7D%7C[a-f0-9]%7B3%7D)$/" target="_blank" rel="noopener"><code>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</code></a></p></blockquote></li><li><p>matching a slug</p><blockquote><p><a href="https://regexper.com#/%5E[a-z0-9-]+$/" target="_blank" rel="noopener"><code>/^[a-z0-9-]+$/</code></a></p></blockquote></li><li><p>matching email address</p><blockquote><p><a href="https://regexper.com#/%5E([a-z0-9_%5C.-]+)@([%5Cda-z%5C.-]+)%5C.([a-z%5C.]%7B2,6%7D)$/" target="_blank" rel="noopener"><code>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</code></a></p></blockquote></li><li><p>matching a URL</p><blockquote><p><a href="https://regexper.com#/%5E(https?:%5C/%5C/)?([%5Cda-z%5C.-]+)%5C.([a-z%5C.]%7B2,6%7D)([%5C/%5Cw%20%5C.-]*)*%5C/?$/" target="_blank" rel="noopener"><code>/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</code></a></p></blockquote></li><li><p>matching an IP address</p><blockquote><p><a href="https://regexper.com/#%2F%5E%28%3F%3A%28%3F%3A25%5B0-5%5D%7C2%5B0-4%5D%5B0-9%5D%7C%5B01%5D%3F%5B0-9%5D%5B0-9%5D%3F%29%5C.%29%7B3%7D%28%3F%3A25%5B0-5%5D%7C2%5B0-4%5D%5B0-9%5D%7C%5B01%5D%3F%5B0-9%5D%5B0-9%5D%3F%29%24%2F" target="_blank" rel="noopener"><code>/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</code></a></p></blockquote></li><li><p>matching a HTML tag</p><blockquote><p><a href="https://regexper.com/#%2F%5E<%28%5Ba-z%5D%2B%29%28%5B%5E<%5D%2B%29*%28%3F%3A>%28.*%29<%5C%2F%5C1>%7C%5Cs%2B%5C%2F>%29%24%2F" target="_blank" rel="noopener"><code>/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$/</code></a></p></blockquote></li></ul><p>对了，告诉你一个小秘密：</p><blockquote><p>以上的正则表达式，点击都能连接到 <a href="https://regexper.com" target="_blank" rel="noopener">regexper.com</a>，在那里你能查看这些正则表达式的图形化示意图。另外，本文中，处于 markdown cell 的绝大多数正则表达式都有这样的连接…… 你可以重读的时候试试。</p></blockquote><p>写 Regex 最烧脑的地方在于 “使其全面” —— 要考虑到各种意外情况。</p><p>当然，除非必要，也不要在 “全面” 这事上面花太多时间 —— 给你看一个据说是 “最大程度上能够匹配所有 email 地址的 Regex” <a href="#fn4" name="fn4b"><sup>[4]</sup></a>，我都懒得测试的一个正则表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]</span><br><span class="line">)+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:</span><br><span class="line">\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(</span><br><span class="line">?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[</span><br><span class="line">\t]))*&quot;(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\0</span><br><span class="line">31]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\</span><br><span class="line">](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+</span><br><span class="line">(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:</span><br><span class="line">(?:\r\n)?[ \t])*))*|(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z</span><br><span class="line">|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)</span><br><span class="line">?[ \t])*)*\&lt;(?:(?:\r\n)?[ \t])*(?:@(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\</span><br><span class="line">r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[</span><br><span class="line"> \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)</span><br><span class="line">?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t]</span><br><span class="line">)*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[</span><br><span class="line"> \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*</span><br><span class="line">)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t]</span><br><span class="line">)+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*)</span><br><span class="line">*:(?:(?:\r\n)?[ \t])*)?(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+</span><br><span class="line">|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r</span><br><span class="line">\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:</span><br><span class="line">\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t</span><br><span class="line">]))*&quot;(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031</span><br><span class="line">]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](</span><br><span class="line">?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?</span><br><span class="line">:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?</span><br><span class="line">:\r\n)?[ \t])*))*\&gt;(?:(?:\r\n)?[ \t])*)|(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?</span><br><span class="line">:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?</span><br><span class="line">[ \t]))*&quot;(?:(?:\r\n)?[ \t])*)*:(?:(?:\r\n)?[ \t])*(?:(?:(?:[^()&lt;&gt;@,;:\\&quot;.\[\]</span><br><span class="line">\000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|</span><br><span class="line">\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;</span><br><span class="line">@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;</span><br><span class="line">(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t]</span><br><span class="line">)*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\</span><br><span class="line">&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?</span><br><span class="line">:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[</span><br><span class="line">\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-</span><br><span class="line">\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(</span><br><span class="line">?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])*)*\&lt;(?:(?:\r\n)?[ \t])*(?:@(?:[^()&lt;&gt;@,;</span><br><span class="line">:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([</span><br><span class="line">^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;</span><br><span class="line">.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\</span><br><span class="line">]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\</span><br><span class="line">[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\</span><br><span class="line">r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\]</span><br><span class="line">\000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]</span><br><span class="line">|\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \0</span><br><span class="line">00-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\</span><br><span class="line">.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,</span><br><span class="line">;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?</span><br><span class="line">:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])*))*@(?:(?:\r\n)?[ \t])*</span><br><span class="line">(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.</span><br><span class="line">\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t])*(?:[</span><br><span class="line">^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]</span><br><span class="line">]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\&gt;(?:(?:\r\n)?[ \t])*)(?:,\s*(</span><br><span class="line">?:(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\</span><br><span class="line">&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])*)(?:\.(?:(</span><br><span class="line">?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[</span><br><span class="line">\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t</span><br><span class="line">])*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t</span><br><span class="line">])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?</span><br><span class="line">:\.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|</span><br><span class="line">\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*|(?:</span><br><span class="line">[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\</span><br><span class="line">]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])*)*\&lt;(?:(?:\r\n)</span><br><span class="line">?[ \t])*(?:@(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;</span><br><span class="line">()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)</span><br><span class="line">?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;</span><br><span class="line">@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*(?:,@(?:(?:\r\n)?[</span><br><span class="line"> \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,</span><br><span class="line">;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\.(?:(?:\r\n)?[ \t]</span><br><span class="line">)*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\</span><br><span class="line">&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*)*:(?:(?:\r\n)?[ \t])*)?</span><br><span class="line">(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.</span><br><span class="line">\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])*)(?:\.(?:(?:</span><br><span class="line">\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z|(?=[\[</span><br><span class="line">&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|&quot;(?:[^\&quot;\r\\]|\\.|(?:(?:\r\n)?[ \t]))*&quot;(?:(?:\r\n)?[ \t])</span><br><span class="line">*))*@(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])</span><br><span class="line">+|\Z|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*)(?:\</span><br><span class="line">.(?:(?:\r\n)?[ \t])*(?:[^()&lt;&gt;@,;:\\&quot;.\[\] \000-\031]+(?:(?:(?:\r\n)?[ \t])+|\Z</span><br><span class="line">|(?=[\[&quot;()&lt;&gt;@,;:\\&quot;.\[\]]))|\[([^\[\]\r\\]|\\.)*\](?:(?:\r\n)?[ \t])*))*\&gt;(?:(</span><br><span class="line">?:\r\n)?[ \t])*))*)?;\s*)</span><br></pre></td></tr></table></figure><h2 id="趣事一则"><a href="#趣事一则" class="headerlink" title="趣事一则"></a>趣事一则</h2><p><a href="https://en.wikipedia.org/wiki/ELIZA" target="_blank" rel="noopener">ELIZA</a> 是人类史上第一个 “聊天机器人” 程序，上个世纪六十年代，1966 年实现的。核心就是使用正则表达式匹配对方语句中的关键词汇，再经过替换，形成看似有意义的 “回应” —— 事实上，ELIZA 完全不知道自己在说什么……</p><p>几年后，就是七十年代初，1972 年，另外一个聊天机器人 <a href="https://en.wikipedia.org/wiki/PARRY" target="_blank" rel="noopener">Parry</a> <a href="#fn5" name="fn5b"><sup>[5]</sup></a>被写了出来…… 随后第二年，这两个聊天机器人在 ARPANET “碰面” 好好地聊了一下<a href="#fn6" name="fn6b"><sup>[6]</sup></a>：</p><blockquote><p>ELIZA: Good Evening. Tell me your problems. Please terminate input with a period or a question mark.</p><p>PARRY: People get on my nerves sometimes.</p><p>ELIZA: I am not sure I understand you fully.</p><p>PARRY: You should pay more attention.</p><p>ELIZA: Suppose you should pay more attention.</p><p>PARRY: You’re entitled to your own opinion.</p><p>ELIZA: What makes you think I am entitled to my own opinion?</p><p>PARRY: It bothers me just to be around people in general.</p><p>ELIZA: Please go on.</p><p>PARRY: I went to the track at Bay Meadows a while back.</p><p>ELIZA: What does that suggest to you?</p><p>PARRY: I went to the races.</p><p>……</p></blockquote><p>以下是后人用 Python 重新实现的 ELIZA 的程序代码，你可以直接执行它，尝试一下与 ELIZA 聊聊天：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %load https://raw.githubusercontent.com/jezhiggins/eliza.py/master/eliza.py</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#  eliza.py</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  a cheezy little Eliza knock-off by Joe Strout</span></span><br><span class="line"><span class="comment">#  with some updates by Jeff Epler</span></span><br><span class="line"><span class="comment">#  hacked into a module and updated by Jez Higgins</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eliza</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.keys = list(map(<span class="keyword">lambda</span> x:re.compile(x[<span class="number">0</span>], re.IGNORECASE),gPats))</span><br><span class="line">    self.values = list(map(<span class="keyword">lambda</span> x:x[<span class="number">1</span>],gPats))</span><br><span class="line"></span><br><span class="line">  <span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># translate: take a string, replace any words found in dict.keys()</span></span><br><span class="line">  <span class="comment">#  with the corresponding dict.values()</span></span><br><span class="line">  <span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">translate</span><span class="params">(self,str,dict)</span>:</span></span><br><span class="line">    words = str.lower().split()</span><br><span class="line">    keys = dict.keys();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(words)):</span><br><span class="line">      <span class="keyword">if</span> words[i] <span class="keyword">in</span> keys:</span><br><span class="line">        words[i] = dict[words[i]]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">' '</span>.join(words)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment">#  respond: take a string, a set of regexps, and a corresponding</span></span><br><span class="line">  <span class="comment">#    set of response lists; find a match, and return a randomly</span></span><br><span class="line">  <span class="comment">#    chosen response from the corresponding list.</span></span><br><span class="line">  <span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">respond</span><span class="params">(self,str)</span>:</span></span><br><span class="line">    <span class="comment"># find a match among keys</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(self.keys)):</span><br><span class="line">      match = self.keys[i].match(str)</span><br><span class="line">      <span class="keyword">if</span> match:</span><br><span class="line">        <span class="comment"># found a match ... stuff with corresponding value</span></span><br><span class="line">        <span class="comment"># chosen randomly from among the available options</span></span><br><span class="line">        resp = random.choice(self.values[i])</span><br><span class="line">        <span class="comment"># we've got a response... stuff in reflected text where indicated</span></span><br><span class="line">        pos = resp.find(<span class="string">'%'</span>)</span><br><span class="line">        <span class="keyword">while</span> pos &gt; <span class="number">-1</span>:</span><br><span class="line">          num = int(resp[pos+<span class="number">1</span>:pos+<span class="number">2</span>])</span><br><span class="line">          resp = resp[:pos] + \</span><br><span class="line">            self.translate(match.group(num),gReflections) + \</span><br><span class="line">            resp[pos+<span class="number">2</span>:]</span><br><span class="line">          pos = resp.find(<span class="string">'%'</span>)</span><br><span class="line">        <span class="comment"># fix munged punctuation at the end</span></span><br><span class="line">        <span class="keyword">if</span> resp[<span class="number">-2</span>:] == <span class="string">'?.'</span>: resp = resp[:<span class="number">-2</span>] + <span class="string">'.'</span></span><br><span class="line">        <span class="keyword">if</span> resp[<span class="number">-2</span>:] == <span class="string">'??'</span>: resp = resp[:<span class="number">-2</span>] + <span class="string">'?'</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># gReflections, a translation table used to convert things you say</span></span><br><span class="line"><span class="comment">#    into things the computer says back, e.g. "I am" --&gt; "you are"</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line">gReflections = &#123;</span><br><span class="line">  <span class="string">"am"</span>   : <span class="string">"are"</span>,</span><br><span class="line">  <span class="string">"was"</span>  : <span class="string">"were"</span>,</span><br><span class="line">  <span class="string">"i"</span>    : <span class="string">"you"</span>,</span><br><span class="line">  <span class="string">"i'd"</span>  : <span class="string">"you would"</span>,</span><br><span class="line">  <span class="string">"i've"</span>  : <span class="string">"you have"</span>,</span><br><span class="line">  <span class="string">"i'll"</span>  : <span class="string">"you will"</span>,</span><br><span class="line">  <span class="string">"my"</span>  : <span class="string">"your"</span>,</span><br><span class="line">  <span class="string">"are"</span>  : <span class="string">"am"</span>,</span><br><span class="line">  <span class="string">"you've"</span>: <span class="string">"I have"</span>,</span><br><span class="line">  <span class="string">"you'll"</span>: <span class="string">"I will"</span>,</span><br><span class="line">  <span class="string">"your"</span>  : <span class="string">"my"</span>,</span><br><span class="line">  <span class="string">"yours"</span>  : <span class="string">"mine"</span>,</span><br><span class="line">  <span class="string">"you"</span>  : <span class="string">"me"</span>,</span><br><span class="line">  <span class="string">"me"</span>  : <span class="string">"you"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># gPats, the main response table.  Each element of the list is a</span></span><br><span class="line"><span class="comment">#  two-element list; the first is a regexp, and the second is a</span></span><br><span class="line"><span class="comment">#  list of possible responses, with group-macros labelled as</span></span><br><span class="line"><span class="comment">#  %1, %2, etc.</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line">gPats = [</span><br><span class="line">  [<span class="string">r'I need (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Why do you need %1?"</span>,</span><br><span class="line">    <span class="string">"Would it really help you to get %1?"</span>,</span><br><span class="line">    <span class="string">"Are you sure you need %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Why don\'?t you ([^\?]*)\??'</span>,</span><br><span class="line">  [  <span class="string">"Do you really think I don't %1?"</span>,</span><br><span class="line">    <span class="string">"Perhaps eventually I will %1."</span>,</span><br><span class="line">    <span class="string">"Do you really want me to %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Why can\'?t I ([^\?]*)\??'</span>,</span><br><span class="line">  [  <span class="string">"Do you think you should be able to %1?"</span>,</span><br><span class="line">    <span class="string">"If you could %1, what would you do?"</span>,</span><br><span class="line">    <span class="string">"I don't know -- why can't you %1?"</span>,</span><br><span class="line">    <span class="string">"Have you really tried?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I can\'?t (.*)'</span>,</span><br><span class="line">  [  <span class="string">"How do you know you can't %1?"</span>,</span><br><span class="line">    <span class="string">"Perhaps you could %1 if you tried."</span>,</span><br><span class="line">    <span class="string">"What would it take for you to %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I am (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Did you come to me because you are %1?"</span>,</span><br><span class="line">    <span class="string">"How long have you been %1?"</span>,</span><br><span class="line">    <span class="string">"How do you feel about being %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I\'?m (.*)'</span>,</span><br><span class="line">  [  <span class="string">"How does being %1 make you feel?"</span>,</span><br><span class="line">    <span class="string">"Do you enjoy being %1?"</span>,</span><br><span class="line">    <span class="string">"Why do you tell me you're %1?"</span>,</span><br><span class="line">    <span class="string">"Why do you think you're %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Are you ([^\?]*)\??'</span>,</span><br><span class="line">  [  <span class="string">"Why does it matter whether I am %1?"</span>,</span><br><span class="line">    <span class="string">"Would you prefer it if I were not %1?"</span>,</span><br><span class="line">    <span class="string">"Perhaps you believe I am %1."</span>,</span><br><span class="line">    <span class="string">"I may be %1 -- what do you think?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'What (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Why do you ask?"</span>,</span><br><span class="line">    <span class="string">"How would an answer to that help you?"</span>,</span><br><span class="line">    <span class="string">"What do you think?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'How (.*)'</span>,</span><br><span class="line">  [  <span class="string">"How do you suppose?"</span>,</span><br><span class="line">    <span class="string">"Perhaps you can answer your own question."</span>,</span><br><span class="line">    <span class="string">"What is it you're really asking?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Because (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Is that the real reason?"</span>,</span><br><span class="line">    <span class="string">"What other reasons come to mind?"</span>,</span><br><span class="line">    <span class="string">"Does that reason apply to anything else?"</span>,</span><br><span class="line">    <span class="string">"If %1, what else must be true?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'(.*) sorry (.*)'</span>,</span><br><span class="line">  [  <span class="string">"There are many times when no apology is needed."</span>,</span><br><span class="line">    <span class="string">"What feelings do you have when you apologize?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Hello(.*)'</span>,</span><br><span class="line">  [  <span class="string">"Hello... I'm glad you could drop by today."</span>,</span><br><span class="line">    <span class="string">"Hi there... how are you today?"</span>,</span><br><span class="line">    <span class="string">"Hello, how are you feeling today?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I think (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Do you doubt %1?"</span>,</span><br><span class="line">    <span class="string">"Do you really think so?"</span>,</span><br><span class="line">    <span class="string">"But you're not sure %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'(.*) friend (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Tell me more about your friends."</span>,</span><br><span class="line">    <span class="string">"When you think of a friend, what comes to mind?"</span>,</span><br><span class="line">    <span class="string">"Why don't you tell me about a childhood friend?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Yes'</span>,</span><br><span class="line">  [  <span class="string">"You seem quite sure."</span>,</span><br><span class="line">    <span class="string">"OK, but can you elaborate a bit?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'(.*) computer(.*)'</span>,</span><br><span class="line">  [  <span class="string">"Are you really talking about me?"</span>,</span><br><span class="line">    <span class="string">"Does it seem strange to talk to a computer?"</span>,</span><br><span class="line">    <span class="string">"How do computers make you feel?"</span>,</span><br><span class="line">    <span class="string">"Do you feel threatened by computers?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Is it (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Do you think it is %1?"</span>,</span><br><span class="line">    <span class="string">"Perhaps it's %1 -- what do you think?"</span>,</span><br><span class="line">    <span class="string">"If it were %1, what would you do?"</span>,</span><br><span class="line">    <span class="string">"It could well be that %1."</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'It is (.*)'</span>,</span><br><span class="line">  [  <span class="string">"You seem very certain."</span>,</span><br><span class="line">    <span class="string">"If I told you that it probably isn't %1, what would you feel?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Can you ([^\?]*)\??'</span>,</span><br><span class="line">  [  <span class="string">"What makes you think I can't %1?"</span>,</span><br><span class="line">    <span class="string">"If I could %1, then what?"</span>,</span><br><span class="line">    <span class="string">"Why do you ask if I can %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Can I ([^\?]*)\??'</span>,</span><br><span class="line">  [  <span class="string">"Perhaps you don't want to %1."</span>,</span><br><span class="line">    <span class="string">"Do you want to be able to %1?"</span>,</span><br><span class="line">    <span class="string">"If you could %1, would you?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'You are (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Why do you think I am %1?"</span>,</span><br><span class="line">    <span class="string">"Does it please you to think that I'm %1?"</span>,</span><br><span class="line">    <span class="string">"Perhaps you would like me to be %1."</span>,</span><br><span class="line">    <span class="string">"Perhaps you're really talking about yourself?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'You\'?re (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Why do you say I am %1?"</span>,</span><br><span class="line">    <span class="string">"Why do you think I am %1?"</span>,</span><br><span class="line">    <span class="string">"Are we talking about you, or me?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I don\'?t (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Don't you really %1?"</span>,</span><br><span class="line">    <span class="string">"Why don't you %1?"</span>,</span><br><span class="line">    <span class="string">"Do you want to %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I feel (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Good, tell me more about these feelings."</span>,</span><br><span class="line">    <span class="string">"Do you often feel %1?"</span>,</span><br><span class="line">    <span class="string">"When do you usually feel %1?"</span>,</span><br><span class="line">    <span class="string">"When you feel %1, what do you do?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I have (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Why do you tell me that you've %1?"</span>,</span><br><span class="line">    <span class="string">"Have you really %1?"</span>,</span><br><span class="line">    <span class="string">"Now that you have %1, what will you do next?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I would (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Could you explain why you would %1?"</span>,</span><br><span class="line">    <span class="string">"Why would you %1?"</span>,</span><br><span class="line">    <span class="string">"Who else knows that you would %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Is there (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Do you think there is %1?"</span>,</span><br><span class="line">    <span class="string">"It's likely that there is %1."</span>,</span><br><span class="line">    <span class="string">"Would you like there to be %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'My (.*)'</span>,</span><br><span class="line">  [  <span class="string">"I see, your %1."</span>,</span><br><span class="line">    <span class="string">"Why do you say that your %1?"</span>,</span><br><span class="line">    <span class="string">"When your %1, how do you feel?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'You (.*)'</span>,</span><br><span class="line">  [  <span class="string">"We should be discussing you, not me."</span>,</span><br><span class="line">    <span class="string">"Why do you say that about me?"</span>,</span><br><span class="line">    <span class="string">"Why do you care whether I %1?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'Why (.*)'</span>,</span><br><span class="line">  [  <span class="string">"Why don't you tell me the reason why %1?"</span>,</span><br><span class="line">    <span class="string">"Why do you think %1?"</span> ]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'I want (.*)'</span>,</span><br><span class="line">  [  <span class="string">"What would it mean to you if you got %1?"</span>,</span><br><span class="line">    <span class="string">"Why do you want %1?"</span>,</span><br><span class="line">    <span class="string">"What would you do if you got %1?"</span>,</span><br><span class="line">    <span class="string">"If you got %1, then what would you do?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'(.*) mother(.*)'</span>,</span><br><span class="line">  [  <span class="string">"Tell me more about your mother."</span>,</span><br><span class="line">    <span class="string">"What was your relationship with your mother like?"</span>,</span><br><span class="line">    <span class="string">"How do you feel about your mother?"</span>,</span><br><span class="line">    <span class="string">"How does this relate to your feelings today?"</span>,</span><br><span class="line">    <span class="string">"Good family relations are important."</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'(.*) father(.*)'</span>,</span><br><span class="line">  [  <span class="string">"Tell me more about your father."</span>,</span><br><span class="line">    <span class="string">"How did your father make you feel?"</span>,</span><br><span class="line">    <span class="string">"How do you feel about your father?"</span>,</span><br><span class="line">    <span class="string">"Does your relationship with your father relate to your feelings today?"</span>,</span><br><span class="line">    <span class="string">"Do you have trouble showing affection with your family?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'(.*) child(.*)'</span>,</span><br><span class="line">  [  <span class="string">"Did you have close friends as a child?"</span>,</span><br><span class="line">    <span class="string">"What is your favorite childhood memory?"</span>,</span><br><span class="line">    <span class="string">"Do you remember any dreams or nightmares from childhood?"</span>,</span><br><span class="line">    <span class="string">"Did the other children sometimes tease you?"</span>,</span><br><span class="line">    <span class="string">"How do you think your childhood experiences relate to your feelings today?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'(.*)\?'</span>,</span><br><span class="line">  [  <span class="string">"Why do you ask that?"</span>,</span><br><span class="line">    <span class="string">"Please consider whether you can answer your own question."</span>,</span><br><span class="line">    <span class="string">"Perhaps the answer lies within yourself?"</span>,</span><br><span class="line">    <span class="string">"Why don't you tell me?"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'quit'</span>,</span><br><span class="line">  [  <span class="string">"Thank you for talking with me."</span>,</span><br><span class="line">    <span class="string">"Good-bye."</span>,</span><br><span class="line">    <span class="string">"Thank you, that will be $150.  Have a good day!"</span>]],</span><br><span class="line"></span><br><span class="line">  [<span class="string">r'(.*)'</span>,</span><br><span class="line">  [  <span class="string">"Please tell me more."</span>,</span><br><span class="line">    <span class="string">"Let's change focus a bit... Tell me about your family."</span>,</span><br><span class="line">    <span class="string">"Can you elaborate on that?"</span>,</span><br><span class="line">    <span class="string">"Why do you say that %1?"</span>,</span><br><span class="line">    <span class="string">"I see."</span>,</span><br><span class="line">    <span class="string">"Very interesting."</span>,</span><br><span class="line">    <span class="string">"%1."</span>,</span><br><span class="line">    <span class="string">"I see.  And what does that tell you?"</span>,</span><br><span class="line">    <span class="string">"How does that make you feel?"</span>,</span><br><span class="line">    <span class="string">"How do you feel when you say that?"</span>]]</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#  command_interface</span></span><br><span class="line"><span class="comment">#----------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command_interface</span><span class="params">()</span>:</span></span><br><span class="line">  print(<span class="string">'Therapist\n---------'</span>)</span><br><span class="line">  print(<span class="string">'Talk to the program by typing in plain English, using normal upper-'</span>)</span><br><span class="line">  print(<span class="string">'and lower-case letters and punctuation.  Enter "quit" when done.'</span>)</span><br><span class="line">  print(<span class="string">'='</span>*<span class="number">72</span>)</span><br><span class="line">  print(<span class="string">'Hello.  How are you feeling today?'</span>)</span><br><span class="line"></span><br><span class="line">  s = <span class="string">''</span></span><br><span class="line">  therapist = eliza();</span><br><span class="line">  <span class="keyword">while</span> s != <span class="string">'quit'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      s = input(<span class="string">'&gt; '</span>)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">      s = <span class="string">'quit'</span></span><br><span class="line">    print(s)</span><br><span class="line">    <span class="keyword">while</span> s[<span class="number">-1</span>] <span class="keyword">in</span> <span class="string">'!.'</span>:</span><br><span class="line">      s = s[:<span class="number">-1</span>]</span><br><span class="line">    print(therapist.respond(s))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  command_interface()</span><br></pre></td></tr></table></figure><pre><code>Therapist---------Talk to the program by typing in plain English, using normal upper-and lower-case letters and punctuation.  Enter &quot;quit&quot; when done.========================================================================Hello.  How are you feeling today?</code></pre><hr><p><strong>脚注</strong></p><p><a name="fn1">[1]</a>：释义摘自苹果电脑上系统内建的《牛津英汉双解辞典》</p><p><a href="#fn1b"><small>↑Back to Content↑</small></a></p><p><a name="fn2">[2]</a>：<a href="https://bit.ly/2tz8v9n" target="_blank" rel="noopener">8 Regular Expressions You Should Know</a> by Vasili</p><p><a href="#fn2b"><small>↑Back to Content↑</small></a></p><p><a name="fn3">[3]</a>：关于校验密码强度的正则表达式，往往需要设置更为复杂的规则，Stackoverflow 上的一则答复中有很好的示例：<a href="https://stackoverflow.com/a/21456918" target="_blank" rel="noopener">https://stackoverflow.com/a/21456918</a></p><p><a href="#fn3b"><small>↑Back to Content↑</small></a></p><p><a name="fn4">[4]</a>：<a href="http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html" target="_blank" rel="noopener">http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html</a></p><p><a href="#fn4b"><small>↑Back to Content↑</small></a></p><p><a name="fn5">[5]</a>：Parry 的源代码（用 Lisp 写的）在这里：<a href="http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/areas/classics/parry/" target="_blank" rel="noopener">http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/areas/classics/parry/</a></p><p><a href="#fn5b"><small>↑Back to Content↑</small></a></p><p><a name="fn6">[6]</a>：ELIZA 和 Parry 的完整聊天记录在这里：<a href="https://tools.ietf.org/html/rfc439" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc439</a></p><p><a href="#fn6b"><small>↑Back to Content↑</small></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HMM 隐式马尔可夫模型</title>
      <link href="/2019/08/29/HMM_example/"/>
      <url>/2019/08/29/HMM_example/</url>
      
        <content type="html"><![CDATA[<h2 id="Hidden-Markov-Model-隐含马尔可夫模型和-Viterbi-algorithm-维特比算法示例"><a href="#Hidden-Markov-Model-隐含马尔可夫模型和-Viterbi-algorithm-维特比算法示例" class="headerlink" title="Hidden Markov Model 隐含马尔可夫模型和 Viterbi algorithm 维特比算法示例"></a>Hidden Markov Model 隐含马尔可夫模型和 Viterbi algorithm 维特比算法示例</h2><p>基本概念：首先它得是一个统计模型，通过已有的样本来预测马尔可夫过程中的隐含参数。</p><p>可见状态链：观测得到的样本组成的数据集</p><p>隐含状态链：样本背后的隐含的数据集</p><p>转换概率 transition probability：可随意设定转换概率，根据不同的转换概率会得到不同的HMM模型</p><p>输出概率 emission probability：从隐含状态转换为可见状态时的概率，也可自由设定</p><a id="more"></a> <p>提到马尔可夫链，基本上指的都是隐含状态链，因为在隐含状态链之间存在转换概率。我们在求马尔可夫过程的时候，可以分为以下情况：</p><p>​                知道<strong><em>隐含状态数量</em></strong>，知道<strong><em>转换概率</em></strong>，根据<strong><em>可见状态链</em></strong>，求<strong><em>隐含状态链</em></strong>。这是最简单的解码问题，有两种解决方法，两种都对，但结果的意义不一样。一种解法，通过最大似然直接对链的整体找到最可能的解，另一种通过对每一个单次事件概率。两种的差异个人觉得在于看中整体与局部。</p><p>​                知道<strong><em>隐含状态数量</em></strong>，知道<strong><em>转换概率</em></strong>，根据<strong><em>可见状态链</em></strong>，求<strong><em>发生可见状态链的概率</em></strong>。这种问题是用来检测数据是否真的与模型吻合。</p><p>​                知道<strong><em>隐含状态数量</em></strong>，不知道<strong><em>转换概率</em></strong>，根据<strong><em>可见状态链</em></strong>，求<strong><em>转换概率</em></strong>。这种为最常见的情况。此处用到Viterbi algorithm 算法。直接以下面的晴雨天为例子</p><blockquote><p> 说两句废话，答主认为呢，要了解一个算法，要做到以下两点：会其意，知其形。答主回答的，其实主要是第一点。但是这一点呢，恰恰是最重要，而且很多书上不会讲的。正如你在追一个姑娘，姑娘对你说“你什么都没做错！”你要是只看姑娘的表达形式呢，认为自己什么都没做错，显然就理解错了。你要理会姑娘的意思，“你赶紧给我道歉！”这样当你看到对应的表达形式呢，赶紧认错，跪地求饶就对了。数学也是一样，你要是不理解意思，光看公式，往往一头雾水。不过呢，数学的表达顶多也就是晦涩了点，姑娘的表达呢，有的时候就完全和本意相反。所以答主一直认为理解姑娘比理解数学难多了。</p></blockquote><p>HMM（隐马尔可夫模型）是用来描述隐含未知参数的统计模型，举一个经典的例子：一个东京的朋友每天根据天气{下雨，天晴}决定当天的活动{公园散步,购物,清理房间}中的一种，我每天只能在twitter上看到她发的推“啊，我前天公园散步、昨天购物、今天清理房间了！”，那么我可以根据她发的推特推断东京这三天的天气。在这个例子里，显状态是活动，隐状态是天气</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Filename: viterbi.py</span></span><br><span class="line"><span class="comment"># Author：hankcs</span></span><br><span class="line"><span class="comment"># Date: 2014-05-13 下午8:51</span></span><br><span class="line"></span><br><span class="line">states = (<span class="string">'Rainy'</span>, <span class="string">'Sunny'</span>)</span><br><span class="line"></span><br><span class="line">observations = (<span class="string">'walk'</span>, <span class="string">'shop'</span>, <span class="string">'clean'</span>)</span><br><span class="line"></span><br><span class="line">start_probability = &#123;<span class="string">'Rainy'</span>: <span class="number">0.6</span>, <span class="string">'Sunny'</span>: <span class="number">0.4</span>&#125;</span><br><span class="line"></span><br><span class="line">transition_probability = &#123;</span><br><span class="line">    <span class="string">'Rainy'</span>: &#123;<span class="string">'Rainy'</span>: <span class="number">0.7</span>, <span class="string">'Sunny'</span>: <span class="number">0.3</span>&#125;,</span><br><span class="line">    <span class="string">'Sunny'</span>: &#123;<span class="string">'Rainy'</span>: <span class="number">0.4</span>, <span class="string">'Sunny'</span>: <span class="number">0.6</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">emission_probability = &#123;</span><br><span class="line">    <span class="string">'Rainy'</span>: &#123;<span class="string">'walk'</span>: <span class="number">0.1</span>, <span class="string">'shop'</span>: <span class="number">0.4</span>, <span class="string">'clean'</span>: <span class="number">0.5</span>&#125;,</span><br><span class="line">    <span class="string">'Sunny'</span>: &#123;<span class="string">'walk'</span>: <span class="number">0.6</span>, <span class="string">'shop'</span>: <span class="number">0.3</span>, <span class="string">'clean'</span>: <span class="number">0.1</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印路径概率表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_dptable</span><span class="params">(V)</span>:</span></span><br><span class="line">    print(<span class="string">"    "</span>),</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(V)):</span><br><span class="line">        print(<span class="string">"%7d"</span> % i),</span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> V[<span class="number">0</span>].keys():</span><br><span class="line">        print(<span class="string">"%.5s: "</span> % y),</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(len(V)):</span><br><span class="line">            print(<span class="string">"%.7s"</span> % (<span class="string">"%f"</span> % V[t][y])),</span><br><span class="line">        <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">viterbi</span><span class="params">(obs, states, start_p, trans_p, emit_p)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 任何一个HMM都可以通过下列五元组来描述</span></span><br><span class="line"><span class="string">    :param obs:观测序列</span></span><br><span class="line"><span class="string">    :param states:隐状态</span></span><br><span class="line"><span class="string">    :param start_p:初始概率（隐状态）</span></span><br><span class="line"><span class="string">    :param trans_p:转移概率（隐状态）</span></span><br><span class="line"><span class="string">    :param emit_p: 发射概率 （隐状态表现为显状态的概率）</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 路径概率表 V[时间][隐状态] = 概率</span></span><br><span class="line">    V = [&#123;&#125;]</span><br><span class="line">    <span class="comment"># 一个中间变量，代表当前状态是哪个隐状态</span></span><br><span class="line">    path = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化初始状态 (t == 0)</span></span><br><span class="line">    print(<span class="string">'Day 1(walk): '</span>)</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> states:</span><br><span class="line">        V[<span class="number">0</span>][y] = start_p[y] * emit_p[y][obs[<span class="number">0</span>]]</span><br><span class="line">        path[y] = [y]</span><br><span class="line">        <span class="keyword">print</span> y, V[<span class="number">0</span>][y], <span class="string">'='</span>, start_p[y], <span class="string">'*'</span>, emit_p[y][obs[<span class="number">0</span>]]</span><br><span class="line">    print(<span class="string">'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _'</span>)</span><br><span class="line">    <span class="keyword">print</span><span class="string">'V: '</span>, V</span><br><span class="line">    print(<span class="string">'__________________________________________'</span>)</span><br><span class="line">    <span class="comment"># 对 t &gt; 0 跑一遍维特比算法</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>, len(obs)):</span><br><span class="line">        V.append(&#123;&#125;)</span><br><span class="line">        newpath = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Day'</span>, t+<span class="number">1</span>, <span class="string">'('</span>+obs[t]+<span class="string">')'</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> states:</span><br><span class="line">            <span class="comment"># 概率 隐状态 =    前状态是y0的概率 * y0转移到y的概率 * y表现为当前状态的概率</span></span><br><span class="line">            <span class="comment"># (prob, state) = max([(V[t - 1][y0] * trans_p[y0][y] * emit_p[y][obs[t]], y0) for y0 in states])</span></span><br><span class="line">            tmpList = []</span><br><span class="line">            <span class="keyword">print</span></span><br><span class="line">            <span class="keyword">for</span> y0 <span class="keyword">in</span> states:</span><br><span class="line">                tmpList.append((V[t - <span class="number">1</span>][y0] * trans_p[y0][y] * \</span><br><span class="line">                emit_p[y][obs[t]], y0))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">print</span> <span class="string">'當天'</span>+y+<span class="string">': '</span>, <span class="string">"%.7s"</span> % (V[t - <span class="number">1</span>][y0] * trans_p[y0][y] * \</span><br><span class="line">emit_p[y][obs[t]]),</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'='</span>,</span><br><span class="line">                <span class="keyword">print</span> V[t - <span class="number">1</span>][y0], <span class="string">'(前一天 '</span>+y0+<span class="string">')'</span>, <span class="string">'*'</span>,</span><br><span class="line">                <span class="keyword">print</span> trans_p[y0][y], <span class="string">'('</span>+y0+<span class="string">' to '</span>+y+<span class="string">')'</span>, <span class="string">'*'</span>,</span><br><span class="line">                <span class="keyword">print</span> emit_p[y][obs[t]], <span class="string">'('</span>+y, obs[t]+<span class="string">')'</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'當天'</span>+y+<span class="string">'  最大的是: '</span>, max(tmpList)[<span class="number">0</span>]</span><br><span class="line">            (prob, state) = max(tmpList)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录最大概率</span></span><br><span class="line">            V[t][y] = prob</span><br><span class="line">            <span class="comment"># 记录路径</span></span><br><span class="line">            newpath[y] = path[state] + [y]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不需要保留旧路径</span></span><br><span class="line">        path = newpath</span><br><span class="line">        print(<span class="string">'__________________________________________'</span>)</span><br><span class="line"></span><br><span class="line">    print_dptable(V)</span><br><span class="line">    (prob, state) = max([(V[len(obs) - <span class="number">1</span>][y], y) <span class="keyword">for</span> y <span class="keyword">in</span> states])</span><br><span class="line">    <span class="keyword">return</span> (prob, path[state])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> viterbi(observations,</span><br><span class="line">                   states,</span><br><span class="line">                   start_probability,</span><br><span class="line">                   transition_probability,</span><br><span class="line">                   emission_probability)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(example())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n訣竅: 從最後一天推算，\n1. Day3 機率最大的那條路徑\n2. 其Day2 機率最大那條路徑\n3. 的最可能Day1'</span>)</span><br></pre></td></tr></table></figure><p>所以说 逐渐增加长度，每增加一次长度，之后再重新算一遍在这个长度下最后一个位置的转换概率，计算到最后一位时，就知道了每个位置的最大概率。</p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Day 1(walk): </span><br><span class="line">Rainy 0.06 = 0.6 * 0.1</span><br><span class="line">Sunny 0.24 = 0.4 * 0.6</span><br><span class="line">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _</span><br><span class="line">V:  [&#123;&apos;Rainy&apos;: 0.06, &apos;Sunny&apos;: 0.24&#125;]</span><br><span class="line">__________________________________________</span><br><span class="line">Day 2 (shop)</span><br><span class="line"></span><br><span class="line">當天Rainy:  0.0168 = 0.06 (前一天 Rainy) * 0.7 (Rainy to Rainy) * 0.4 (Rainy shop)</span><br><span class="line">當天Rainy:  0.0384 = 0.24 (前一天 Sunny) * 0.4 (Sunny to Rainy) * 0.4 (Rainy shop)</span><br><span class="line">當天Rainy  最大的是:  0.0384</span><br><span class="line"></span><br><span class="line">當天Sunny:  0.0054 = 0.06 (前一天 Rainy) * 0.3 (Rainy to Sunny) * 0.3 (Sunny shop)</span><br><span class="line">當天Sunny:  0.0432 = 0.24 (前一天 Sunny) * 0.6 (Sunny to Sunny) * 0.3 (Sunny shop)</span><br><span class="line">當天Sunny  最大的是:  0.0432</span><br><span class="line">__________________________________________</span><br><span class="line">Day 3 (clean)</span><br><span class="line"></span><br><span class="line">當天Rainy:  0.01344 = 0.0384 (前一天 Rainy) * 0.7 (Rainy to Rainy) * 0.5 (Rainy clean)</span><br><span class="line">當天Rainy:  0.00864 = 0.0432 (前一天 Sunny) * 0.4 (Sunny to Rainy) * 0.5 (Rainy clean)</span><br><span class="line">當天Rainy  最大的是:  0.01344</span><br><span class="line"></span><br><span class="line">當天Sunny:  0.00115 = 0.0384 (前一天 Rainy) * 0.3 (Rainy to Sunny) * 0.1 (Sunny clean)</span><br><span class="line">當天Sunny:  0.00259 = 0.0432 (前一天 Sunny) * 0.6 (Sunny to Sunny) * 0.1 (Sunny clean)</span><br><span class="line">當天Sunny  最大的是:  0.002592</span><br><span class="line">__________________________________________</span><br><span class="line">           0       1       2</span><br><span class="line">Rainy:  0.06000 0.03840 0.01344</span><br><span class="line">Sunny:  0.24000 0.04320 0.00259</span><br><span class="line">(0.01344, [&apos;Sunny&apos;, &apos;Rainy&apos;, &apos;Rainy&apos;])</span><br><span class="line"></span><br><span class="line">訣竅: 從最後一天推算，</span><br><span class="line">1. Day3 機率最大的那條路徑</span><br><span class="line">2. 其Day2 機率最大那條路徑</span><br><span class="line">3. 的最可能Day1</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://gist.github.com/yesseecity" target="_blank" rel="noopener">https://gist.github.com/yesseecity</a> 将步骤列出</p><p><a href="http://www.hankcs.com/nlp/hmm-and-segmentation-tagging-named-entity-recognition.html" target="_blank" rel="noopener">http://www.hankcs.com/nlp/hmm-and-segmentation-tagging-named-entity-recognition.html</a> 一个根据天气和推特的例子</p><p><a href="https://cloud.tencent.com/developer/article/1066699" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1066699</a> 马尔可夫模型简单理解</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> HMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAKER相关操作</title>
      <link href="/2019/08/21/MAKER%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/08/21/MAKER%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>####maker pipeline</p><p>1.Initial MAKER Analysis</p><p>2.Training Gene Prediction (snap, augustus) </p><p>3.Round 2 MAKER Analysis</p><p>4.Training Gene Prediction (snap, augustus)</p><p>5.Round 3 MAKER Analysis</p><p>6.Create Maker standard gene set file</p><p>7.PASA </p><a id="more"></a> <h5 id="1-Initial-MAKER-Analysis"><a href="#1-Initial-MAKER-Analysis" class="headerlink" title="1.Initial MAKER Analysis"></a>1.Initial MAKER Analysis</h5><p>#创建第一次运行maker需要的config文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maker -CTL</span><br></pre></td></tr></table></figure><p>#查看修改opts文件，运行maker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># set of ESTs or assembled mRNA-seq in fasta format 三代转录数据</span><br><span class="line"></span><br><span class="line">est=/home/Data/avianbase/Prunella_strophita_BWA_INDEX/polished.hq.fasta</span><br><span class="line"></span><br><span class="line"># protein sequence file in fasta format (i.e. from mutiple oransisms) 从ensembl数据库中下载的human mus chicken Tae 数据 cat合并</span><br><span class="line"> </span><br><span class="line">protein=/home/Data/avianbase/Prunella_strophita_BWA_INDEX/ensembl/all/merge_pep.fa </span><br><span class="line"></span><br><span class="line"># 首次运行maker将est2 genome 与protein2genome 设置为1 ，即从头预测</span><br><span class="line"></span><br><span class="line">est2genome=1 </span><br><span class="line">protein2genome=1</span><br><span class="line"></span><br><span class="line"># 设置完成后执行</span><br><span class="line"></span><br><span class="line">nohup mpiexec -n 40 maker &gt; run_maker.log</span><br></pre></td></tr></table></figure><hr><p>#maker产生的结果</p><p>​    -Prunella_strophita_assemble_master_datastore_index.log 记录了每一个contig 比对的情况</p><p>使用maker的 gff3_merge     ### fasta_merge ###  对log文件进行注释信息的提取，在得到的 Prunella_strophita_assemble.maker.gff 文件中，包含了est , protein,  repeat masker 以及 maker 的注释结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># generate_gff.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># sed -i 's/rndN/-/g' generate_gff.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每一轮用sed替换rndN信息</span></span><br><span class="line">gff3_merge -s -d Prunella_strophita_assemble_master_datastore_index.log &gt; Prunella_strophita_assemble.maker.gff</span><br><span class="line">fasta_merge -d Prunella_strophita_assemble_master_datastore_index.log</span><br><span class="line">gff3_merge -n -s -d Prunella_strophita_assemble_master_datastore_index.log &gt; Prunella_strophita_assemble.maker.noseq.gff</span><br><span class="line"><span class="meta">#</span><span class="bash"> est alignments</span></span><br><span class="line">awk '&#123; if ($2 == "est2genome") print $0 &#125;' Prunella_strophita_assemble.maker.noseq.gff &gt; Prunella_rndN.maker.est2genome.gff</span><br><span class="line"><span class="meta">#</span><span class="bash"> protein alignments</span></span><br><span class="line">awk '&#123; if ($2 == "protein2genome") print $0 &#125;' Prunella_strophita_assemble.maker.noseq.gff &gt;  Prunella_rndN.maker.protein2genome.gff</span><br><span class="line"><span class="meta">#</span><span class="bash"> repeat alignments</span></span><br><span class="line">awk '&#123; if ($2 ~ "repeat") print $0 &#125;' Prunella_strophita_assemble.maker.noseq.gff &gt;  Prunella_rndN.maker.repeats.gff</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> current dir </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /home/maker/20190718_version_maker/round1/Prunella_strophita_assemble.maker.output</span></span><br><span class="line"></span><br><span class="line">sed -i 's/rndN/rnd1/g' generate_gff.sh</span><br><span class="line">sh generate_gff.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对产生的gff统计基因数量与平均长度</span></span><br><span class="line">cat Prunella_strophita_assemble.maker.noseq.gff | awk '&#123; if ($3 == "gene") print $0 &#125;' | awk '&#123; sum += ($5 - $4) &#125; END &#123; print NR, sum / NR &#125;'</span><br><span class="line"></span><br><span class="line">sh gene_count.sh</span><br><span class="line">round1 result: 19711 7584.01</span><br></pre></td></tr></table></figure><h5 id="2-Training-Gene-Prediction"><a href="#2-Training-Gene-Prediction" class="headerlink" title="2.Training Gene Prediction"></a>2.Training Gene Prediction</h5><p>#将     snap.sh     busco.sh     gene_count.sh     cp到结果文件夹</p><p>通过训练基因模型再次注释提升预测的准确性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## snap 基因结构预测</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## snap.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################</span></span></span><br><span class="line"></span><br><span class="line">mkdir snap</span><br><span class="line">mkdir snap/round1</span><br><span class="line">cd snap/round1</span><br><span class="line">maker2zff -x 0.25 -l 50 -d ../../Prunella_strophita_assemble_master_datastore_index.log</span><br><span class="line">rename genome Prunella_rnd1.zff.length50_aed0.25 genome*</span><br><span class="line">fathom Prunella_rnd1.zff.length50_aed0.25.ann Prunella_rnd1.zff.length50_aed0.25.dna -gene-stats &gt; gene-stats.log 2&gt;&amp;1</span><br><span class="line">fathom  Prunella_rnd1.zff.length50_aed0.25.ann Prunella_rnd1.zff.length50_aed0.25.dna -validate &gt; validate.log 2&gt;&amp;1</span><br><span class="line">fathom  Prunella_rnd1.zff.length50_aed0.25.ann Prunella_rnd1.zff.length50_aed0.25.dna -categorize 1000 &gt; categorize.log 2&gt;&amp;1</span><br><span class="line">fathom uni.ann uni.dna -export 1000 -plus &gt; uni-plus.log 2&gt;&amp;1</span><br><span class="line">mkdir params</span><br><span class="line">cd params</span><br><span class="line">forge ../export.ann ../export.dna &gt; ../forge.log 2&gt;&amp;1</span><br><span class="line">cd ..</span><br><span class="line">hmm-assembler.pl Prunella_rnd1.zff.length50_aed0.25 params &gt; Prunella_rnd1.zff.length50_aed0.25.hmm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## BUSCO 基因结构预测</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">首先为了预测环境的准确性，将第一轮maker运行结果中的gff文件添加首末端1000bp的长度，可能会导致某些注释的mrna超过scaffold的边界，从而会导致bedtools报错，可以统计前后mrna的数量用以计算，而且此项影响较小。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## run_BUSCO.sh</span></span></span><br><span class="line">awk -v OFS="\t" '&#123; if ($3 == "mRNA") print $1, $4, $5 &#125;' Prunella_strophita_assemble.maker.noseq.gff | \</span><br><span class="line">  awk -v OFS="\t" '&#123; if ($2 &lt; 1000) print $1, "0", $3+1000; else print $1, $2-1000, $3+1000 &#125;' | \</span><br><span class="line">  bedtools getfasta -fi /home/Data/avianbase/Prunella_strophita_INDEX/Prunella_strophita_assemble.fa  -bed - -fo Prunella_rnd1.all.maker.transcripts1000.fasta</span><br><span class="line"></span><br><span class="line">mkdir busco</span><br><span class="line">cd busco</span><br><span class="line">BUSCO.py -i Prunella_rnd1.all.maker.transcripts1000.fasta -o Prunella_rnd1 -l /home/maker/software/maker/exe/busco/ave_odb9/ -m genome -c 8 --long -sp human -z --augustus_prameters '--progress=true'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> busco 的结果需要提取并修改为 augustus 物种进行下一轮的预测</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># BUSCO_rndN_number  oringin</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># species_name       target</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## generate_species.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############</span></span></span><br><span class="line"></span><br><span class="line">rename BUSCO_rndN_number species_name *</span><br><span class="line">sed -i 's/BUSCO_rndN_number/species_name/g' species_name_parameters.cfg</span><br><span class="line">sed -i 's/BUSCO_rndN_number/species_name/g' species_name_parameters.cfg.orig1</span><br><span class="line">mkdir ~/software/maker/exe/augustus/config/species/species_name</span><br><span class="line">cp species_name* ~/software/maker/exe/augustus/config/species/species_name</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> current dir /home/maker/20190718_version_maker/round1/Prunella_strophita_assemble.maker.output</span></span><br><span class="line">sh snap.sh</span><br><span class="line">sh run_busco.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd /home/maker/20190718_version_maker/round/Prunella_strophita_assemble.maker.output/busco/run_0726_rnd1/augustus_output/retraining_parameters</span><br><span class="line">sed -i 's/rndN/rnd1/g' generate_species.sh</span><br><span class="line">sed -i 's/species_name/Prunella_chiecken_rnd1/g' generate_species.sh</span><br><span class="line">sh generate_species.sh</span><br></pre></td></tr></table></figure><p>#####3.Round 2 MAKER Analysis</p><p>将第一轮生成的gff结果中 est2genome.gff 和 protein2genome.gff 和 repeats.gff 以及 snap预测的基因模型中 hmm 文件输入第二轮的maker_opts.ctl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cd /home/maker/maker_0720/round2</span><br><span class="line"></span><br><span class="line">maker -CTL</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将maker_opts文件中的 snap 与 Augustus 预测文件添加，将 est2genome.gff, protein2genome.gff,  repeats.gff 输入，将est2genome protein2genome 设置为0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">est_gff=/home/maker/20190704_version_maker/rnd2_data/Prunella_rnd1.all.maker.est2genome.gff   <span class="comment">#aligned ESTs or mRNA-seq from an external GFF3 file</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">genome=/home/Data/avianbase/Prunella_strophita_BWA_INDEX/Prunella_strophita_assemble.fa </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">protein_gff=/home/maker/20190704_version_maker/rnd2_data/Prunella_rnd1.all.maker.protein2genome.gff  <span class="comment">#aligned protein homology evidence from an external GFF3 file</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">rm_gff=/home/maker/20190704_version_maker/rnd2_data/Prunella_rnd1.all.maker.repeats.gff <span class="comment">#pre-identified repeat elements from an external GFF3 file</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">snaphmm=/home/maker/20190704_version_maker/rnd2_data/Prunella_rnd1.zff.length50_aed0.25.hmm <span class="comment">#SNAP HMM file</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">augustus_species=Prunell_strophita <span class="comment">#Augustus gene prediction species model</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">max_dna_len=300000 <span class="comment">#length for dividing up contigs into chunks (increases/decreases memory usage)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">split_hit=20000 <span class="comment">#length for the splitting of hits (expected max intron size for evidence alignments)</span></span></span><br><span class="line"></span><br><span class="line">nohup mpiexec -n 40 maker &gt; run_maker.log</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># generate_gff.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># sed -i 's/rndN/-/g' generate_gff.sh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每一轮用sed替换rndN信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为预测结果中使用基因结构预测</span></span><br><span class="line"></span><br><span class="line">gff3_merge -s -d Prunella_strophita_assemble_master_datastore_index.log &gt; Prunella_strophita_assemble.maker.gff</span><br><span class="line">fasta_merge -d Prunella_strophita_assemble_master_datastore_index.log</span><br><span class="line">gff3_merge -n -s -d Prunella_strophita_assemble_master_datastore_index.log &gt; Prunella_strophita_assemble.maker.noseq.gff</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> est alignments</span></span><br><span class="line">awk '&#123; if ($2 ~ "est2genome") print $0 &#125;' Prunella_strophita_assemble.maker.noseq.gff &gt; Prunella_rndN.maker.est2genome.gff</span><br><span class="line"><span class="meta">#</span><span class="bash"> protein alignments</span></span><br><span class="line">awk '&#123; if ($2 ~ "protein2genome") print $0 &#125;' Prunella_strophita_assemble.maker.noseq.gff &gt;  Prunella_rndN.maker.protein2genome.gff</span><br><span class="line"><span class="meta">#</span><span class="bash"> repeat alignments</span></span><br><span class="line">awk '&#123; if ($2 ~ "repeat") print $0 &#125;' Prunella_strophita_assemble.maker.noseq.gff &gt;  Prunella_rndN.maker.repeats.gff</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/rndN/rnd2/g' generate_gff.sh</span><br><span class="line">sh generate_gff.sh</span><br><span class="line"></span><br><span class="line">sh gene_count.sh</span><br><span class="line">18227 13821.9</span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于第一轮是根据已有信息预测，长度在第二轮得到了修正</span></span><br></pre></td></tr></table></figure><h5 id="4-Training-Gene-Prediction"><a href="#4-Training-Gene-Prediction" class="headerlink" title="4.Training Gene Prediction"></a>4.Training Gene Prediction</h5><p># 与第二步相同, 将 snap.sh     busco.sh     gene_count.sh     cp到结果文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sed -i 's/rnd1/rnd2/g' *.sh</span><br><span class="line">sed -i 's/round1/round2/g' snap.sh</span><br><span class="line">sed -i 's/00rnd1/01_rnd2/g' run_BUSCO.sh</span><br><span class="line">sh snap.sh</span><br><span class="line">sh run_BUSCO.sh</span><br><span class="line">cd busco/augustus_output/retraining_paramters</span><br><span class="line">sh generate_species.sh</span><br></pre></td></tr></table></figure><p>#####5.Round 3 MAKER analysis</p><p>将第二轮maker结果输入maker_opts.ctl 重复第三步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim maker_opts.ctl</span><br><span class="line">nohup mpiexec -n 40 maker &gt; run_maker.log</span><br><span class="line">sh generate_gff.sh</span><br></pre></td></tr></table></figure><p>#####6.Create Maker standard gene set file</p><p># 对第三轮的maker 结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">awk -v OFS="\t" '&#123; if ($3 == "mRNA") print $1, $4, $5 &#125;' /home/maker/20190704_version_maker/02_rnd3/Prunella_strophita_assemble.output/Prunella_strophita_assemble.maker.noseq.gff | \</span><br><span class="line">  bedtools getfasta -fi /home/Data/avianbase/Prunella_strophita_INDEX/Prunella_strophita_assemble.fa -bed - -fo Prunella_rnd3.all.maker.fasta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir busco</span><br><span class="line">cd busco</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不再再添加前后1000bp的片段，同时运行busco时将model改为 transcriptome </span></span><br><span class="line">run_BUSCO.py -i Prunella_rnd3.all.maker.transcripts.fasta -o Prunella_rnd3 -l /home/maker/software/busco-master/aves_odb9/  -m transcriptome -c 8 -sp Prunella_chicken_rnd2 -z --augustus_parameters='--progress=true'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看busco的完整性检查结果</span></span><br><span class="line">less run_Prunella_rnd3/short_summary_Prunella_rnd3.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> gne count</span></span><br><span class="line">sh gene_count.sh</span><br><span class="line">18148 13917.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提取结果中maker注释的gff部分</span></span><br><span class="line">perl get_maker_gff.pl Prunella_strophita_assemble.maker.noseq.gff Prunella_strophita_assemble.maker.only.final.noseq.gff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换gff中的ID</span></span><br><span class="line">maker_map_ids --prefix Prunella --justify 5 Prunella_strophita_assemble.maker.noseq.gff &gt;</span><br><span class="line">Prunella_rnd3.maker.name.map</span><br><span class="line"></span><br><span class="line">map_gff_ids Prunella_rnd3.maker.name.map Prunella_strophita_assemble.maker.only.final.noseq.gff</span><br></pre></td></tr></table></figure><table><thead><tr><th>Gene number</th><th>Gene average length</th><th>Info</th></tr></thead><tbody><tr><td>19711</td><td>7584.01</td><td>Round 1</td></tr><tr><td>18227</td><td>13821.9</td><td>Round 2</td></tr><tr><td>18148</td><td>13917.2</td><td>Round 3</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep 'three_prime_UTR' Prunella_strophita_assemble.maker.only.final.noseq.gff | wc -l</span><br><span class="line">2752</span><br><span class="line">grep 'five_prime_UTR' Prunella_strophita_assemble.maker.only.final.noseq.gff | wc -l</span><br><span class="line">2494</span><br></pre></td></tr></table></figure><h5 id="7-PASA-prediect-utr-region"><a href="#7-PASA-prediect-utr-region" class="headerlink" title="7.PASA prediect utr region"></a>7.PASA prediect utr region</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gmap cds2gff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> clean cds 去除低质量序列</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /data/maker/PASA_20/data</span></span><br><span class="line">/home/maker/software/PASApipeline/bin/seqclean XZ15142.hq.fasta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> custom alignments gff  首先对基因组index然后比对生成 cds 和 gene 模式gff</span></span><br><span class="line">/home/maker/software/PASApipeline/scripts/process_GMAP_alignments_gff3_chimeras_ok.pl --genome Prunella_strophita_assemble.fa  --transcripts XZ15142.hq.fasta.clean --CPU 2 -N 2  -I 500000  &gt; gmap.spliced_alignments.gff3</span><br><span class="line"></span><br><span class="line">gmap -D . -d Prunella_strophita_assemble.fa.gmap -f 2 -n 2 -x 50 -t 2 -B 5  --max-intronlength-middle=500000 --max-intronlength-ends=500000 XZ15142.hq.fasta.clean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Running Alignment Assembly 将基因组与cds信息比对</span></span><br><span class="line">/home/maker/software/PASApipeline/Launch_PASA_pipeline.pl -c sqlite_conf/alignAssembly.config -C -r -R -g data/Prunella_strophita_assemble.fa -t data/XZ15142.hq.fasta.clean -T -u data/XZ15142.hq.fasta --ALIGNERS blat --CPU 2 -N 2 --IMPORT_CUSTOM_ALIGNMENTS_GFF3 data/gmap.spliced_alignments.gff3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Building comprehensive transcriptome database 将结果输入到sqlite数据库</span></span><br><span class="line">~/software/PASApipeline/scripts/build_comprehensive_transcriptome.dbi -c sqlite_conf/alignAssembly.config -t data/XZ15142.hq.fasta.clean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> First round, using pre-existing gene structure annotations 对 gff进行update</span></span><br><span class="line">  ~/software/PASApipeline/Launch_PASA_pipeline.pl -c sqlite_conf/annotCompare.config -g data/Prunella_strophita_assemble.fa -t data/XZ15142.hq.fasta.clean -A -L --annots data/gmap_gene.gff3 --CPU 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Second round</span></span><br><span class="line">~/software/PASApipeline/Launch_PASA_pipeline.pl -c sqlite_conf/annotCompare.config -g data/Prunella_strophita_assemble.fa -t data/XZ15142.hq.fasta.clean -A -L --annots  --CPU 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown, maker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/13/hello-world/"/>
      <url>/2019/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
